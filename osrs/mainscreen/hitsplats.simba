(*
# HitSplats
*)
{$DEFINE SRLT_HITSPLATS_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

type
(*
(ERSHitSplat)=
## type ERSHitSplat
```pascal
ERSHitSplat = enum(BLUE, RED, MAX);
```
Enum representing the main hitsplat colors.
*)
  ERSHitSplat = enum(BLUE, RED, MAX);

(*
(TRSHitsplat)=
## type TRSHitSplat
Hitsplat record that holds the methods used to find hitsplats.
*)
  TRSHitsplat = record
    Position: TPoint;
    Value: Integer;
    Color: ERSHitSplat;
    const TEXT_WHITE: TColor = $E3E3E3;
    const TEXT_TOLERANCE: Double = 10.981;
  end;

  TRSHitSplatArray = array of TRSHitsplat;


function TRSHitSplat._Find(area: TBox): TRSHitSplat; static;
var
  blue, red, maxhit: TPointArray;
begin
  blue := Target.FindColor(ColorTolerance($E03E33, 0.600, EColorSpace.HSV, [1.435, 1.435, 0.131]), area);
  if blue <> [] then
  begin
    Result.Position := area.TopLeft;
    Result.Value := OCR.RecognizeNumber(area, RSFonts.PLAIN_11, [Self.TEXT_WHITE], Self.TEXT_TOLERANCE);
    Result.Color := ERSHitSplat.BLUE;
    Exit;
  end;

  red := Target.FindColor(ColorTolerance($0000A5, 0.498, EColorSpace.HSV, [1.413, 1.413, 0.176]), area);
  if red <> [] then
  begin
    Result.Position := area.TopLeft;
    Result.Value := OCR.RecognizeNumber(area, RSFonts.PLAIN_11, [Self.TEXT_WHITE], Self.TEXT_TOLERANCE);
    Result.Color := ERSHitSplat.RED;
    Exit;
  end;

  maxhit := Target.FindColor(ColorTolerance($0000D8, 0.488, EColorSpace.HSV, [1.433, 1.433, 0.136]), area);
  if maxhit <> [] then
  begin
    Result.Position := area.TopLeft;
    Result.Value := OCR.RecognizeNumber(area, RSFonts.PLAIN_11, [Self.TEXT_WHITE], Self.TEXT_TOLERANCE);
    Result.Color := ERSHitSplat.MAX;
    Exit;
  end;
end;

(*
## TRSHitSplat.Find
```pascal
function TRSHitSplat.Find(out splats: TRSHitSplatArray; areas: TBoxArray): Boolean; static;
function TRSHitSplat.Find(out splats: TRSHitSplatArray; areas: TPolygonArray): Boolean; static; overload;
function TRSHitSplat.Find(out splats: TRSHitSplatArray; areas: TCuboidArray): Boolean; static; overload;
function TRSHitSplat.Find(out splats: TRSHitSplatArray): Boolean; static; overload;
```
Attempts to find hitsplats on the given `area` a {ref}`TColorFinder`.
If `area` is not specified, {ref}`MainScreen` Bounds are used.
The function returns true if we find at least one hitsplat and found splats are
returned via `splats`.
*)
function TRSHitSplat.Find(out splats: TRSHitSplatArray; areas: TBoxArray): Boolean; static;
var
  area, b: TBox;
  white, black, tpa: TPointArray;
  clusters: T2DPointArray;
  hit: TRSHitSplat;
begin
  splats := [];
  for area in areas do
  begin
    white := Target.FindColor($E3E3E3, 10.981, area);
    black := Target.FindColor($0, 0, area);
    clusters := white.PointsNearby(black, 1,3).Cluster(4);

    if clusters = [] then Exit;

    for tpa in clusters do
    begin
      with tpa.Bounds() do b := [X1-1, Y1-1, X2+2, Y2+3];

      hit := TRSHitsplat._Find(b);
      if hit.Position <> Default(TPoint) then
        splats += hit;
    end;
  end;
  Result := splats <> [];
end;

function TRSHitSplat.Find(out splats: TRSHitSplatArray; areas: TPolygonArray): Boolean; static; overload;
var
  poly: TPolygon;
  area, b: TBox;
  white, black, tpa: TPointArray;
  clusters: T2DPointArray;
  hit: TRSHitSplat;
begin
  splats := [];
  for poly in areas do
  begin
    area := poly.Bounds();
    white := Target.FindColor($E3E3E3, 10.981, area);
    black := Target.FindColor($0, 0, area);
    clusters := white.PointsNearby(black, 1,3).Cluster(4);

    if clusters = [] then Exit;

    for tpa in clusters do
    begin
      with tpa.Bounds() do
      begin
        if not poly.Contains(Center) then Continue;
        b := [X1-1, Y1-1, X2+2, Y2+3];
      end;

      hit := TRSHitsplat._Find(b);
      if hit.Position <> Default(TPoint) then
        splats += hit;
    end;
  end;
  Result := splats <> [];
end;

function TRSHitSplat.Find(out splats: TRSHitSplatArray; areas: TCuboidArray): Boolean; static; overload;
var
  poly: TPolygon;
  area: TCuboid;
  bounds, b: TBox;
  white, black, tpa: TPointArray;
  clusters: T2DPointArray;
  hit: TRSHitSplat;
begin
  splats := [];
  for area in areas do
  begin
    bounds := area.Bounds();
    white := Target.FindColor($E3E3E3, 10.981, bounds);
    black := Target.FindColor($0, 0, bounds);
    clusters := white.PointsNearby(black, 1,3).Cluster(4);

    if clusters = [] then Exit;

    poly := area.Polygon();

    for tpa in clusters do
    begin
      with tpa.Bounds() do
      begin
        if not poly.Contains(Center) then Continue;
        b := [X1-1, Y1-1, X2+2, Y2+3];
      end;

      hit := TRSHitsplat._Find(b);
      if hit.Position <> Default(TPoint) then
        splats += hit;
    end;
  end;
  Result := splats <> [];
end;

function TRSHitSplat.Find(out splats: TRSHitSplatArray): Boolean; static; overload;
begin
  Result := TRSHitSplat.Find(splats, [MainScreen.Bounds]);
end;



procedure TRSHitsplat.Draw(img: TImage);
begin
  case Self.Color of
    ERSHitSplat.BLUE: img.DrawColor := $FF0000;
    ERSHitSplat.RED:  img.DrawColor := $0000FF;
    ERSHitSplat.MAX:  img.DrawColor := $00FFFF;
  end;
  img.DrawCircle(Self.Position, 10);
end;

procedure TRSHitSplatArray.Draw(img: TImage);
var
  splat: TRSHitSplat;
begin
  for splat in Self do splat.Draw(img);
end;

procedure ShowOnClient(splats: TRSHitSplatArray); overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget();

  splats.Draw(img);

  img.Show();
  img.Free();
end;
