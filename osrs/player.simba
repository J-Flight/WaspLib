(*
# Players
Page dedicated to handling player accounts.
*)
{$DEFINE WL_PLAYER_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

var
(*
## PlayerIndex variable
This variable is what tells WaspLib which account you will be using of the ones you have in a {ref}`TRSPlayerArray` you want to
use for this botting session.
*)
  PlayerIndex: Integer;

type
  TRSPlayer = record
    Username, Password, Pin: String;
    Worlds: TIntegerArray;
    Active: Boolean;
  end;

(*
## TRSPlayerArray
Type that holds player account information for {ref}`login`, world hopping and {ref}`bankpin` handling.
*)
  TRSPlayerArray = array of TRSPlayer;

(*
## TRSPlayerArray.Add
```pascal
procedure TRSPlayerArray.Add(user, pass: String; pin: String = ''; worlds: TIntegerArray = []);
```
Adds a TRSPlayer to the TRSPlayerArray.

Example:
```pascal
Players.Add('username', 'password', '0000');
```
*)
procedure TRSPlayerArray.Add(user, pass: String; pin: String = ''; worlds: TIntegerArray = []);
begin
  Self += [user, pass, pin, worlds, true];
end;

procedure TRSPlayerArray.NextPlayer(disableCurrent: Boolean);

  function _Next(): Integer;
  var
    i: Integer;
  begin
    for i := PlayerIndex + 1 to High(Self) do
      if Self[i].Active then
        Exit(i);

    for i := 0 to PlayerIndex - 1 do // wrap around
      if Self[i].Active then
        Exit(i);

    Result := -1;
  end;

begin
  Self[PlayerIndex].Active := not disableCurrent;

  PlayerIndex := _Next();
  if PlayerIndex < 0 then
    raise GetDebugLn('Players', 'No active players to switch to.');
end;

(*
## Players.GetPlayer
```pascal
function TRSPlayerArray.GetPlayer(): TRSPlayer;
```
Returns the currently selected TRSPlayer.
The currently selected TRSPlayer is decided by `PlayerIndex` which
is an index of the TRSPlayerArra.

Example:
```pascal
WriteLn Players.GetPlayer().Username;
```
*)
function TRSPlayerArray.GetPlayer(): TRSPlayer;
begin
  if Self = [] then
    raise GetDebugLn('Players', 'No Players declared: Add an Player if you want scripts to handle login.');
  if not InRange(PlayerIndex, 0, High(Self)) then
    raise GetDebugLn('Players', 'Player is out of range: Player number selected in script does not exist.');

  Result := Self[PlayerIndex];
end;

(*
## Players.GetPin
```pascal
function TRSPlayerArray.GetPin(): String;
```
Get the current Player bank pin.

Example:
```pascal
if BankPin.IsOpen() then
  BankPin.Enter(Players.GetPin());
```
*)
function TRSPlayerArray.GetPin(): String;
begin
  Result := Self.GetPlayer().Pin;
  if (Length(Result) <> 4) or (not Result.IsNumeric) then
    raise GetDebugLn('Players', 'Invalid bank pin.');
end;

(*
## Players.LoadAccounts
```pascal
procedure TRSPlayerArray.LoadAccounts();
```
Loads all account profiles from the accounts JSON files (0.json, 1.json, etc).
*)
procedure TRSPlayerArray.LoadAccounts();
var
  i, j, worldNum: Integer;
  data: TJSONParser;
  profile: TJSONItem;
  path, username, password, pin, worldsStr: String;
  worldStrs: TStringArray;
  worlds: TIntegerArray;
begin
  Self := [];
  path := WLEnv.ConfigsDir + 'accounts' + PATH_SEP;
  i := -1;

  // Load each account file in order
  while FileExists(path + ToStr(Inc(i)) + '.json') do
  begin
    data := new TJSONParser();
    data.Load(path + ToStr(i) + '.json');
    
    if not data.GetObject('profile', profile) then Continue;
    if not profile.GetString('username', username) then Continue;
    if not profile.GetString('password', password) then Continue;
    if not profile.GetString('bankpin', pin) then Continue;
    if not profile.GetString('worlds', worldsStr) then Continue;
    
    //Convert world string to integer array
    worldStrs := worldsStr.Split(',');
    for j := 0 to High(worldStrs) do
      if (worldNum := StrToInt(worldStrs[j].Trim(), -1)) > 0 then
        worlds += worldNum;

    Self.Add(username, password, pin, worlds);
  end;
end;

var
(*
## Players variable
Global {ref}`TRSPlayerArray` variable.
*)
  Players: TRSPlayerArray;
