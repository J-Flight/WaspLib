(*
# Login
The login screen is the first screen you see that you can interact with when you open the game:

```{figure} ../../images/loginscreen.png
The login screen.
```

SRLT's {ref}`TRSLogin` can handle both resizable and fixed mode login screens.
*)
{$DEFINE SRLT_LOGIN_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

type
(*
## TRSLobbyScreen
Simple record that handles the login lobby screen.
The lobby screen is the screen you see after logging in with the large red
button with "CLICK HERE TO PLAY".

```{figure} ../../images/lobby.png
The lobbby screen.
```
*)
  TRSLobbyScreen = record
    Bounds, Button: TBox;
  end;

(*
## Lobby.Setup
```pascal
procedure TRSLobbyScreen.Setup();
```
Internal function that sets up the lobby screen coordinates.
This is automatically called for you on the {ref}`Lobby variable`.
*)
procedure TRSLobbyScreen.Setup();
begin
  Self.Bounds.X1 := Target.Bounds.Width div 2 - 382;
  Self.Bounds.X2 := Target.Bounds.Width div 2 + 382;
  Self.Bounds.Y1 := Target.Bounds.Y1;
  Self.Bounds.Y2 := Self.Bounds.Y1 + 502;

  with Self.Button do
  begin
    X1 := Self.Bounds.X1 + 268;
    Y1 := Self.Bounds.Y1 + 294;
    X2 := X1 + 228;
    Y2 := Y1 + 89;
  end;
end;


(*
## Lobby.IsOpen
```pascal
function TRSLobbyScreen.IsOpen(): Boolean;
```
Returns True/False depending on whether the lobby screen is currently open.

Example:
```pascal
if Lobby.IsOpen() then
  Lobby.EnterGame();
```
*)
function TRSLobbyScreen.IsOpen(): Boolean;
begin
  Result := OCR.Locate(Self.Button, 'CLICK HERE TO PLAY', [$FFFFFF], 0, RSFonts.BOLD_SHADOW) > 0.999;
end;

(*
## Lobby.WaitOpen
```pascal
function TRSLobbyScreen.WaitOpen(time: Integer = 600; interval: Integer = -1): Boolean;
```
Returns True/False if the lobby screen opens within `time` milliseconds.

Example:
```pascal
if Lobby.WaitOpen(2000) then
  Lobby.EnterGame();
```
*)
function TRSLobbyScreen.WaitOpen(time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(), interval, time);
end;

(*
## Lobby.EnterGame
```pascal
function TRSLobbyScreen.EnterGame(): Boolean;
```
Attempts to enter the game from the lobby screen.
This is automatically called for you with {ref}`Login.DoLogin()`.

Example:
```pascal
WriteLn Lobby.EnterGame();
```
*)
function TRSLobbyScreen.EnterGame(): Boolean;
begin
  if RSClient.IsLoggedIn() then Exit(True);
  WriteLn GetDebugLn('Lobby', 'Entering the game.');
  Mouse.Click(Self.Button, EMouseButton.LEFT);
  Result := RSClient.WaitLoggedIn(3000);
end;


procedure TRSLobbyScreen.Draw(img: TImage);
var
  i: Integer;
begin
  if not Self.IsOpen() then Exit;

  img.DrawColor := $00FFFF;
  img.DrawBox(Self.Bounds);

  img.DrawColor := $FFFF00;
  img.DrawBox(Self.Button);
end;

procedure ShowOnClient(lobby: TRSLobbyScreen); overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget();
  lobby.Draw(img);
  img.Show();
  img.Free();
end;

var
(*
## Lobby variable
Global {ref}`TRSLobbyScreen` variable.
*)
  Lobby: TRSLobbyScreen;

type
(*
## TRSLoginWorldSwitcher
Reponsible for handling the login screen world switcher:
```{figure} ../../images/login_worldswitcher.png
The login world switcher.
```
*)
  TRSLoginWorldSwitcher = record
    Bounds: TBox;
    OpenButton, CancelButton, LeftButton, RightButton: TBox;
    CurrentWorld: Integer;
    WorldBoxes: TBoxArray;

    AllowDangerousWorlds: Boolean;
  end;

(*
## TRSLoginWorldSwitcher.Setup
```pascal
procedure TRSLoginWorldSwitcher.Setup();
```
Internal method used to setup the {ref}`TRSLoginWorldSwitcher` coordinates.
This is automatically called for you on the {ref}`LoginWorldSwitcher variable`.
*)
procedure TRSLoginWorldSwitcher.Setup();
begin
  Self.Bounds.X1 := Target.Bounds.Width div 2 - 382;
  Self.Bounds.X2 := Target.Bounds.Width div 2 + 382;
  Self.Bounds.Y1 := Target.Bounds.Y1;
  Self.Bounds.Y2 := Self.Bounds.Y1 + 502;

  Self.CancelButton.X1 := Self.Bounds.X2 - 57;
  Self.CancelButton.Y1 := Self.Bounds.Y1 + 4;
  Self.CancelButton.X2 := Self.Bounds.X2 - 8;
  Self.CancelButton.Y2 := Self.Bounds.Y1 + 19;

  Self.OpenButton.X1 := Self.Bounds.X1 + 10;
  Self.OpenButton.Y1 := Self.Bounds.Y2 - 38;
  Self.OpenButton.X2 := Self.OpenButton.X1 + 89;
  Self.OpenButton.Y2 := Self.OpenButton.Y1 + 32;

  Self.WorldBoxes := TBoxArray.Create(Self.Bounds.TopLeft.Offset(62, 35), 7, 24, 84, 18, [9, 1]);

  Self.LeftButton.X1 := Target.Bounds.X1 + 9;
  Self.LeftButton.Y1 := Target.Bounds.Height div 2 - 10;
  Self.LeftButton.X2 := Self.LeftButton.X1 + 42;
  Self.LeftButton.Y2 := Self.LeftButton.Y1 + 28;

  Self.RightButton.X2 := Target.Bounds.X2 - 7;
  Self.RightButton.Y1 := Target.Bounds.Height div 2 - 10;
  Self.RightButton.X1 := Self.RightButton.X2 - 42;
  Self.RightButton.Y2 := Self.RightButton.Y1 + 28;
end;

(*
## LoginWorldSwitcher.IsOpen
```pascal
function TRSLoginWorldSwitcher.IsOpen(): Boolean;
```
Returns True/False if the login screen world switcher is currently open.

Example:
```pascal
WriteLn LoginWorldSwitcher.IsOpen();
```
*)
function TRSLoginWorldSwitcher.IsOpen(): Boolean;
begin
  Result := Target.HasColor($FFFFFF, 0, 61, Self.CancelButton);
end;

(*
## LoginWorldSwitcher.WaitOpen
```pascal
function TRSLoginWorldSwitcher.WaitOpen(time: Integer = 600; interval: Integer = -1): Boolean;
```
Returns True/False if the login screen world switcher opens within `time` milliseconds.

Example:
```pascal
WriteLn LoginWorldSwitcher.WaitOpen();
```
*)
function TRSLoginWorldSwitcher.WaitOpen(time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(), interval, time);
end;

(*
## LoginWorldSwitcher.Close
```pascal
function TRSLoginWorldSwitcher.Close(): Boolean;
```
Attempts to close the login screen world switcher.

Example:
```pascal
if LoginWorldSwitcher.IsOpen() then
  LoginWorldSwitcher.Close();
```
*)
function TRSLoginWorldSwitcher.Close(): Boolean;
begin
  if not Self.IsOpen() then Exit(True);
  Mouse.Click(Self.CancelButton, EMouseButton.LEFT);
  Result := SleepUntil(not Self.IsOpen(), RandomMode(100, 50, 1500), 600);
end;

(*
## LoginWorldSwitcher.Open
```pascal
function TRSLoginWorldSwitcher.Open(): Boolean;
```
Attempts to open the login screen world switcher.

Example:
```pascal
if not LoginWorldSwitcher.IsOpen() then
  LoginWorldSwitcher.Open();
```
*)
function TRSLoginWorldSwitcher.Open(): Boolean;
begin
  if Self.IsOpen() then Exit(True);
  Mouse.Click(Self.OpenButton, EMouseButton.LEFT);
  Result := Self.WaitOpen();
end;


(*
## LoginWorldSwitcher.Read
```pascal
function TRSLoginWorldSwitcher.Read(index: Integer): Integer;
```
Returns the number of the world box at the `index` you specify.

Example:
```pascal
if LoginWorldSwitcher.IsOpen() then
  WriteLn LoginWorldSwitcher.Read(0);
```
*)
function TRSLoginWorldSwitcher.Read(index: Integer): Integer;
begin
  Result := OCR.RecognizeNumber(Self.WorldBoxes[index], RSFonts.BOLD, [$000000, $0000FF], 0);
end;


(*
## LoginWorldSwitcher Pagination
```pascal
function TRSLoginWorldSwitcher.PreviousPage(): Boolean;
function TRSLoginWorldSwitcher.NextPage(): Boolean;
```
Attempts to switch the current login screen world switcher page using the
{ref}`LoginWorldSwitcher Buttons`.
Returns True if we successfully changed page.

Example:
```pascal
if LoginWorldSwitcher.IsOpen() then
  LoginWorldSwitcher.NextPage();
```
*)
function TRSLoginWorldSwitcher.PreviousPage(): Boolean;
var
  first: Integer;
begin
  first := Self.Read(0);
  Mouse.Click(Self.LeftButton, EMouseButton.LEFT);
  Result := SleepUntil(Self.Read(0) <> first, RandomMode(100, 50, 1500), 600);
  Sleep(400, 1200);
end;

function TRSLoginWorldSwitcher.NextPage(): Boolean;
var
  first: Integer;
begin
  if Target.HasColor($0, 0, 1615, Self.WorldBoxes[High(Self.WorldBoxes)]) then Exit;

  first := Self.Read(0);
  Mouse.Click(Self.RightButton, EMouseButton.LEFT);
  Result := SleepUntil(Self.Read(0) <> first, RandomMode(100, 50, 1500), 600);
  Sleep(400, 1200);
end;


(*
## LoginWorldSwitcher GetCurrent
```pascal
function TRSLoginWorldSwitcher.GetCurrent(): Integer;
```
Attempts to get our currently selected world.
For this, if the login screen world switcher is open, we close it first, as the
current world can only be read from the login screen.

Example:
```pascal
WriteLn LoginWorldSwitcher.GetCurrent();
```
*)
function TRSLoginWorldSwitcher.GetCurrent(): Integer;
begin
  if not Self.Close() then Exit;
  Result := OCR.RecognizeNumber(Self.OpenButton, RSFonts.BOLD_SHADOW, [$FFFFFF], 0);
  if InRange(Self.CurrentWorld, 301, 580) then Self.CurrentWorld := Result;
end;


(*
## LoginWorldSwitcher.Find
```pascal
function TRSLoginWorldSwitcher.Find(world: Integer; out index: Integer): Boolean;
```
Attempts to find the specified `world`.
For this, {ref}`LoginWorldSwitcher Pagination` will be used if required.
If the world we specified is found, the function returns `True` and the index of
of the button is returned through `index`.

Example:
```pascal
WriteLn LoginWorldSwitcher.Find(303, idx);
```
*)
function TRSLoginWorldSwitcher.Find(world: Integer; out index: Integer): Boolean;
begin
  repeat
    for index := 0 to High(Self.WorldBoxes) do
      if OCR.RecognizeNumber(Self.WorldBoxes[index], RSFonts.BOLD, [$000000, $0000FF], 0) = world then
        Exit(True);
  until not Self.NextPage();

  Self.Close();
  index := -1;
end;

(*
## LoginWorldSwitcher.Switch
```pascal
function TRSLoginWorldSwitcher.Switch(world: Integer): Boolean;
```
Attempts to switch to the specified `world`.
For this, {ref}`LoginWorldSwitcher Pagination` will be used if required.
If the world we specified is found and we successfully switch to it the function
returns `True`.

Example:
```pascal
WriteLn LoginWorldSwitcher.Switch(303);
```
*)
function TRSLoginWorldSwitcher.Switch(world: Integer): Boolean;
var
  idx: Integer;
begin
  if Self.CurrentWorld = world then Exit(True);
  if not InRange(Self.CurrentWorld, 301, 580) and not Self.IsOpen() and
    (Self.GetCurrent() = world) then
    Exit(True);

  if not Self.Open() then Exit;
  if not Self.Find(world, idx) then Exit;

  if not Self.AllowDangerousWorlds and
     not Target.HasColor(ColorTolerance($878254, 14.762, EColorSpace.LCH, [1.077, 1.714, 0.211]), 500, Self.WorldBoxes[idx]) then
      raise GetDebugLn('Login.WorldPicker', 'You are trying to login into a dangerous world! If this is intentional, enable dangerous worlds.');

  Mouse.Click(Self.WorldBoxes[idx], EMouseButton.LEFT);

  Result := SleepUntil(not Self.IsOpen(), 50, 600) and (Self.GetCurrent() = world);
end;


procedure TRSLoginWorldSwitcher.Draw(img: TImage);
var
  i: Integer;
begin
  if not Self.IsOpen() then Exit;

  img.DrawColor := $00FFFF;
  img.DrawBox(Self.Bounds);

  img.DrawColor := $00FF00;
  img.DrawBox(Self.CancelButton);

  img.DrawColor := $FFFFFF;
  img.DrawBoxArray(Self.WorldBoxes, False);

  img.DrawColor := $0000FF;
  img.DrawBox(Self.LeftButton);
  img.DrawBox(Self.RightButton);
end;

procedure ShowOnClient(loginWorldSwitcher: TRSLoginWorldSwitcher); overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget();
  loginWorldSwitcher.Draw(img);
  img.Show();
  img.Free();
end;


var
(*
## LoginWorldSwitcher variable
Global {ref}`TRSLoginWorldSwitcher` variable.
*)
  LoginWorldSwitcher: TRSLoginWorldSwitcher;

const
(*
(LOGIN_MESSAGES)=
# const LOGIN_MESSAGES
```pascal
LOGIN_MESSAGES = [
  'Welcome to RuneScape',
  'Connecting to server',
  'Invalid credentials',
  'Incorrect username or password',
  'You need a skill total of',
  'Please enter your username/email',
  'Error connecting to server',
  'Your account has not logged out',
  'Login server offline',
  'Error loading your profile',
  'Connection timed out',
  'You were disconnected',
  'Login limit exceeded',
  'This world is full',
  'Your account has been',
  'You need a members account',
  'You are standing in a members-only area',
  'Authenticator'
];
```
Constant of all the login messages the login screen can handle.
*)
  LOGIN_MESSAGES = [
    'Welcome to RuneScape',
    'Connecting to server',
    'Invalid credentials',
    'Incorrect username or password',
    'You need a skill total of',
    'your username/email',
    'Error connecting to server',
    'Your account has not logged out',
    'Login server offline',
    'Error loading your profile',
    'Connection timed out',
    'You were disconnected',
    'Login limit exceeded',
    'This world is full',
    'Your account has been',
    'You need a members account',
    'You are standing in a members-only area',
    'Authenticator'
  ];

type
(*
## Login Enums
```pascal
ERSLoginMode    = enum(UNKNOWN, LEGACY, LAUNCHER);
  ERSLoginButton  = enum(LAUNCHER, EXISTING_USER, LOGIN, RETRY, OKAY, CONTINUE);
  ERSLoginInput   = enum(USERNAME, PASSWORD);
  ERSLoginMessage = enum(
    UNKNOWN,
    WELCOME, CONNECTING, INVALID, INCORRECT, SKILL_TOTAL, ENTER_CREDENTIALS,
    ERROR_CONNECTING, Player_ONLINE, SERVER_OFFLINE, ERROR_LOADING, TIMED_OUT,
    DISCONNECTED, LIMIT_EXCEEDED, WORLD_FULL, BANNED, NOT_MEMBER, ON_MEMBER_AREA,
    AUTHENTICATOR
  );
```
Enums representing various aspects of the login screen.

`ERSLoginMessage` is a enum representation of {ref}`LOGIN_MESSAGES`.
*)
  ERSLoginMode    = enum(UNKNOWN, LEGACY, LAUNCHER);
  ERSLoginButton  = enum(LAUNCHER, EXISTING_USER, LOGIN, RETRY, OKAY, CONTINUE);
  ERSLoginInput   = enum(USERNAME, PASSWORD);
  ERSLoginMessage = enum(
    UNKNOWN,
    WELCOME, CONNECTING, INVALID, INCORRECT, SKILL_TOTAL, ENTER_CREDENTIALS,
    ERROR_CONNECTING, Player_ONLINE, SERVER_OFFLINE, ERROR_LOADING, TIMED_OUT,
    DISCONNECTED,
    LIMIT_EXCEEDED, WORLD_FULL, BANNED, NOT_MEMBER, ON_MEMBER_AREA,
    AUTHENTICATOR
  );

(*
## TRSLogin
Main record responsible for handling the {ref}`Login` screen.

```{figure} ../../images/trslogin.png
The login screen.
```
*)
  TRSLogin = record
    Bounds: TBox;

    Inputs: array [ERSLoginInput] of TBox;
    Buttons: array [ERSLoginButton] of record
      Text: String;
      Bounds: TBox;
      Bold: Boolean;
    end;

    Mode: ERSLoginMode;
    Attempts: Integer;
    ClearInputs: Boolean;
  end;

(*
## Login.Setup
```pascal
procedure TRSLogin.Setup();
```
Internal method responsible for setting up the {ref}`TRSLogin` coordinates.
This is automatically called for you on the {ref}`Login variable`.
*)
procedure TRSLogin.Setup();
begin
  Self.Bounds.X1 := Target.Bounds.Width div 2 - 176;
  Self.Bounds.Y1 := Target.Bounds.Y1 + 172;
  Self.Bounds.X2 := Target.Bounds.Width div 2 + 176;
  Self.Bounds.Y2 := Self.Bounds.Y1 + 194;

  with Self.Inputs[ERSLoginInput.USERNAME] do
  begin
    X1 := Self.Bounds.X1 + 106;
    Y1 := Self.Bounds.Y1 + 69;
    X2 := X1 + 200;
    Y2 := Y1 + 16;
  end;

  with Self.Inputs[ERSLoginInput.PASSWORD] do
  begin
    X1 := Self.Bounds.X1 + 138;
    Y1 := Self.Bounds.Y1 + 86;
    X2 := X1 + 204;
    Y2 := Y1 + 13;
  end;

  with Self.Buttons[ERSLoginButton.LAUNCHER] do
  begin
    Bounds.X1 := Self.Bounds.X1 + 72;
    Bounds.Y1 := Self.Bounds.Y1 + 62;
    Bounds.X2 := Bounds.X1 + 207;
    Bounds.Y2 := Bounds.Y1 + 57;
    Text := '';
  end;

  with Self.Buttons[ERSLoginButton.EXISTING_USER] do
  begin
    Bold := True;
    Bounds.X1 := Self.Bounds.X1 + 188;
    Bounds.Y1 := Self.Bounds.Y1 + 103;
    Bounds.X2 := Bounds.X1 + 134;
    Bounds.Y2 := Bounds.Y1 + 32;
    Text := 'Existing User';
  end;

  with Self.Buttons[ERSLoginButton.LOGIN] do
  begin
    Bold := True;
    Bounds.X1 := Self.Bounds.X1 + 28;
    Bounds.Y1 := Self.Bounds.Y1 + 133;
    Bounds.X2 := Bounds.X1 + 134;
    Bounds.Y2 := Bounds.Y1 + 32;
    Text := 'Login';
  end;

  with Self.Buttons[ERSLoginButton.RETRY] do
  begin
    Bounds.X1 := Self.Bounds.X1 + 108;
    Bounds.Y1 := Self.Bounds.Y1 + 88;
    Bounds.X2 := Self.Bounds.X2 - 110;
    Bounds.Y2 := Bounds.Y1 + 32;
    Text := 'Try again';
  end;

  with Self.Buttons[ERSLoginButton.OKAY] do
  begin
    Bounds.X1 := Self.Bounds.X1 + 109;
    Bounds.Y1 := Self.Bounds.Y1 + 113;
    Bounds.X2 := Bounds.X1 + 134;
    Bounds.Y2 := Bounds.Y1 + 32;
    Text := 'Ok';
  end;
end;


(*
## Login.FindButton
```pascal
function TRSLogin.FindButton(button: ERSLoginButton): Boolean;
```
Attempts to find the specified `ERSLoginButton`, returns `True` if we find it.
*)
function TRSLogin.FindButton(button: ERSLoginButton): Boolean;
begin
  if button = ERSLoginButton.LAUNCHER then
  begin
    if not Target.HasColor($00FFFF, 0, 1, Self.Buttons[ERSLoginButton.LAUNCHER].Bounds) then
      Exit;
    if not InRange(Target.CountColor($FFFFFF, 0, Self.Buttons[ERSLoginButton.LAUNCHER].Bounds), 500, 550) then
      Exit;

    Exit(True);
  end;

  if Self.Buttons[button].Bold then
    Exit(Self.Buttons[button].Text = OCR.Recognize(Self.Buttons[button].Bounds, RSFonts.BOLD_SHADOW, [$FFFFFF], 0));

  Result := Self.Buttons[button].Text = OCR.Recognize(Self.Buttons[button].Bounds, RSFonts.PLAIN_12, [$FFFFFF], 0);
end;

(*
## Login.ClickButton
```pascal
function TRSLogin.ClickButton(button: ERSLoginButton): Boolean;
```
Attempts to click the specified `ERSLoginButton`, returns `True` if we succeed.

Example:
```pascal
WriteLn Login.ClickButton(ERSLoginButton.LOGIN);
```
*)
function TRSLogin.ClickButton(button: ERSLoginButton): Boolean;
begin
  if not Self.FindButton(button) then Exit;
  Result := True;
  Mouse.Click(Self.Buttons[button].Bounds, EMouseButton.LEFT);
end;


(*
## Login.SelectInput
```pascal
function TRSLogin.SelectInput(field: ERSLoginInput): Boolean;
```
Attempts to select the specified `ERSLoginInput`, returns `True` if we succeed.
This waits a few milliseconds for the flashing yellow cursor for confirmation.

Example:
```pascal
WriteLn Login.SelectInput(ERSLoginInput.USERNAME);
```
*)
function TRSLogin.SelectInput(field: ERSLoginInput): Boolean;
begin
  if SleepUntil(Target.HasColor($00FFFF, 0, 8, Self.Inputs[field]), 30, 100) then
    Exit(True);

  if RandomBoolean(0.5) then
    Keyboard.PressKey(EKeyCode.TAB)
  else
    with Self.Inputs[field] do
      Mouse.Click([X1, Y1, X2, Y2-3], EMouseButton.LEFT);

  Result := SleepUntil(Target.HasColor($00FFFF, 0, 8, Self.Inputs[field]), 30, 600);
end;

(*
## Login.InputIsFilled
```pascal
function TRSLogin.InputIsFilled(field: ERSLoginInput): Boolean;
```
Returns True/False if the specified `field` is filled.

Example:
```pascal
WriteLn Login.InputIsFilled(ERSLoginInput.USERNAME);
```
*)
function TRSLogin.InputIsFilled(field: ERSLoginInput): Boolean;
begin
  Result := Target.HasColor($FFFFFF, 0, 1, Self.Inputs[field]);
end;

(*
## Login.ClearInput
```pascal
function TRSLogin.ClearInput(field: ERSLoginInput): Boolean;
```
Attempts to clear the  specified `field`.

Example:
```pascal
WriteLn Login.ClearInput(ERSLoginInput.USERNAME);
```
*)
function TRSLogin.ClearInput(field: ERSLoginInput): Boolean;
begin
  if not Self.InputIsFilled(field) then Exit(True);
  if not Self.SelectInput(field) then Exit;

  Keyboard.KeyDown(EKeyCode.BACK);
  Result := SleepUntil(not Self.InputIsFilled(field), RandomMode(100, 50, 1500),  6000);
  Keyboard.KeyUp(EKeyCode.BACK);
end;

(*
## Login.FillInput
```pascal
function TRSLogin.FillInput(field: ERSLoginInput; details: String): Boolean;
```
Attempts to fill the  specified `field` with `details`.

Example:
```pascal
WriteLn Login.FillInput(ERSLoginInput.USERNAME, 'myPlayer@email.com');
```
*)
function TRSLogin.FillInput(field: ERSLoginInput; details: String): Boolean;
begin
  if Self.InputIsFilled(field) then Exit;
  if not Self.SelectInput(field) then Exit;

  Result := True;
  Keyboard.Send(details, EKeyCode.RETURN);
end;


(*
## Login.GetMessage
```pascal
function TRSLogin.GetMessage(): ERSLoginMessage;
```
Returns the currently visible login message as a `ERSLoginMessage`.
Check {ref}`Login Enums` for more information on `ERSLoginMessage`.

Example:
```pascal
WriteLn Login.GetMessage();
```
*)
function TRSLogin.GetMessage(): ERSLoginMessage;
var
  dialog: String;
  msg: ERSLoginMessage;
begin
  dialog := OCR.RecognizeLines(Self.Bounds, RSFonts.BOLD_SHADOW, [$00FFFF], 0).Join(' ');
  if dialog = '' then
    dialog := OCR.RecognizeLines(Self.Bounds, RSFonts.BOLD_SHADOW, [$FFFFFF], 0).Join(' ');
  if dialog = '' then Exit;

  for msg := ERSLoginMessage.WELCOME to High(ERSLoginMessage)-1 do
    if dialog.Contains(LOGIN_MESSAGES[msg-1]) then
      Exit(msg);
end;


(*
## Login.GetMode
```pascal
function TRSLogin.GetMode(): ERSLoginMode;
```
Returns the current login mode as a `ERSLoginMode`.
The login mode can only be known from the "Welcome to RuneScape" screen.

Check {ref}`Login Enums` for more information on `ERSLoginMode`.

Example:
```pascal
WriteLn Login.GetMode();
```
*)
function TRSLogin.GetMode(): ERSLoginMode;
begin
  if Self.GetMessage() = ERSLoginMessage.WELCOME then
  begin
    if Self.FindButton(ERSLoginButton.EXISTING_USER) then
    begin
      WriteLn GetDebugLn('Login', 'Legacy client mode detected.', EErrorLevel.SUCCESS);
      Exit(ERSLoginMode.LEGACY);
    end;

    if Self.FindButton(ERSLoginButton.LAUNCHER) then
    begin
      WriteLn GetDebugLn('Login', 'Launcher client mode detected.', EErrorLevel.SUCCESS);
      Exit(ERSLoginMode.LAUNCHER);
    end;
  end;

  WriteLn GetDebugLn('Login', 'Failed to detect login mode.', EErrorLevel.WARN);
end;


(*
## Login.HandleWelcome
```pascal
function TRSLogin.HandleWelcome(): Boolean;
```
Attempts to handle the "Welcome to RuneScape" screen regardless of the
`ERSLoginMode` the client is on.

Check {ref}`Login Enums` for more information on `ERSLoginMode`.

Example:
```pascal
WriteLn Login.HandleWelcome();
```
*)
function TRSLogin.HandleWelcome(): Boolean;
begin
  if Self.Mode = ERSLoginMode.UNKNOWN then
    Self.Mode := Self.GetMode();

  case Self.Mode of
    ERSLoginMode.LEGACY:   if not Self.ClickButton(ERSLoginButton.EXISTING_USER) then Exit;
    ERSLoginMode.LAUNCHER: if not Self.ClickButton(ERSLoginButton.LAUNCHER) then Exit;
  end;

  Result := SleepUntil(Self.GetMessage() <> ERSLoginMessage.WELCOME, RandomMode(100, 50, 1500), 600);
end;

(*
## Login.Back2Welcome
```pascal
function TRSLogin.Back2Welcome(): Boolean;
```
Attempts to return to the "Welcome to RuneScape" screen.
This is used to handle any screen that has an "Ok" button.
Returns True if we succeed.

Example:
```pascal
WriteLn Login.Back2Welcome();
```
*)
function TRSLogin.Back2Welcome(): Boolean;
begin
  if not Self.ClickButton(ERSLoginButton.OKAY) then Exit;
  Result := SleepUntil(Self.GetMessage() = ERSLoginMessage.WELCOME, RandomMode(100, 50, 1500), 600);
end;


(*
## Login.EnterCredentials
```pascal
function TRSLogin.EnterCredentials(username, password: String): Boolean;
```
Attempts to enter a user credentials.

Example:
```pascal
WriteLn Login.EnterCredentials('username', 'password');
```
*)
function TRSLogin.EnterCredentials(username, password: String): Boolean;
var
  field: ERSLoginInput;
begin
  if Self.ClearInputs then
  begin
    if not Self.ClearInput(ERSLoginInput.USERNAME) then Exit;
    if not Self.ClearInput(ERSLoginInput.PASSWORD) then Exit;
  end;

  if not Self.FillInput(ERSLoginInput.USERNAME, username) then Exit;
  if not Self.FillInput(ERSLoginInput.PASSWORD, password) then Exit;
  Result := SleepUntil(Self.GetMessage() <> ERSLoginMessage.ENTER_CREDENTIALS, RandomMode(100, 50, 1500), 600);
end;


(*
## Login.Retry
```pascal
function TRSLogin.Retry(msg: ERSLoginMessage): Boolean;
```
Attempts to handle any screen that has a "Retry" button.
Returns True if we succeed.

The current `ERSLoginMessage` message has to be passed as `msg` so we know
when we successfully handled the button.
*)
function TRSLogin.Retry(msg: ERSLoginMessage): Boolean;
begin
  if not Self.ClickButton(ERSLoginButton.RETRY) then Exit;
  Self.ClearInputs := True;
  Result := SleepUntil(Self.GetMessage() <> msg, RandomMode(100, 50, 1500), 600);
end;

(*
## Login.HandleError
```pascal
function TRSLogin.HandleError(msg: ERSLoginMessage): Boolean;
```
Attempts to handle any screen that has an error message.
Returns True if we succeed.

The current `ERSLoginMessage` message has to be passed as `msg` so we know
when we successfully handled the current error.

Everytime this function is called, the internal `Login.Attempts` variable is
increased.
After 10 times of this being called without `Login.Attempts` being reset, this
will raise an exception **IF** the reason we can't login is not the world being
full. **IF** the reason is the world being full, this can be called forever.
*)
function TRSLogin.HandleError(msg: ERSLoginMessage): Boolean;
var
  time: Integer;
begin
  time := Random(10000, 20000) * Inc(Self.Attempts);

  if (msg = ERSLoginMessage.WORLD_FULL) or (Self.Attempts < 4) then
  begin
    WriteLn GetDebugLn('Login', 'Failed to login ' + ToStr(Self.Attempts) + ' times.', EErrorLevel.WARN);
    WriteLn GetDebugLn('Login', 'Waiting ' + ToStr(time) + ' seconds before trying again.', EErrorLevel.WARN);
    Sleep(time);
    Exit(True);
  end;

  if Self.Attempts = 4 then
  begin
    WriteLn GetDebugLn('Login', 'Failed to login ' + ToStr(Self.Attempts) + ' times.', EErrorLevel.ERROR);
    WriteLn GetDebugLn('Login', 'Script will shutdown if we fail one more time.', EErrorLevel.ERROR);
    WriteLn GetDebugLn('Login', 'Waiting ' + ToStr(time) + ' seconds before trying again.', EErrorLevel.ERROR);
    Sleep(time);
    Exit(True);
  end;

  raise GetDebugLn('Login', 'Failed to login 10 times. Last login state: ' + ToStr(msg));
end;

(*
## Login.HandleMessage
```pascal
function TRSLogin.HandleMessage(msg: ERSLoginMessage; username, password: String): Boolean;
```
Attempts to handle whatever screen the login screen is currently at.
Returns True if we succeed.

The current `ERSLoginMessage` message has to be passed as `msg` so we know
when we successfully handled the current error.

The Player `username` and `password` we want to use also have to be passed in.
This can be empty value if we are using the Jagex Launcher, e.g.: `'', ''`.

On certain `ERSLoginMessages` that cannot be handled this will raise an
exception to shutdown your script. For example, if the Player you are trying to
use has been banned.
*)
function TRSLogin.HandleMessage(msg: ERSLoginMessage; username, password: String): Boolean;
begin
  case msg of
    ERSLoginMessage.WELCOME:           Result := Self.HandleWelcome();
    ERSLoginMessage.CONNECTING:        Result := SleepUntil(msg <> Self.GetMessage(), RandomMode(100, 50, 1500), 50000); //50 secs
    ERSLoginMessage.DISCONNECTED:      Result := Self.Back2Welcome();
    ERSLoginMessage.ENTER_CREDENTIALS: Result := Self.EnterCredentials(username, password);
    ERSLoginMessage.INVALID, ERSLoginMessage.INCORRECT:  Result := Self.Retry(msg);

    ERSLoginMessage.ERROR_CONNECTING,ERSLoginMessage.LIMIT_EXCEEDED,
    ERSLoginMessage.Player_ONLINE, ERSLoginMessage.WORLD_FULL,
    ERSLoginMessage.TIMED_OUT: Result := Self.HandleError(msg);

    ERSLoginMessage.SKILL_TOTAL:      raise GetDebugLn('Login', 'We are trying to login into a total level world you can''t login to.');
    ERSLoginMessage.SERVER_OFFLINE:   raise GetDebugLn('Login', 'Login server offline. The game is/was probably updated.');
    ERSLoginMessage.ERROR_LOADING:    raise GetDebugLn('Login', 'Game loading error. It was probably updated.');
    ERSLoginMessage.BANNED:           raise GetDebugLn('Login', 'Player seems to be banned or disabled.');
    ERSLoginMessage.NOT_MEMBER:       raise GetDebugLn('Login', 'Player is not members and we are trying to login into a P2P world.');
    ERSLoginMessage.ON_MEMBER_AREA:   raise GetDebugLn('Login', 'Player is on a P2P area and we are trying to login into a F2P world.');
    ERSLoginMessage.AUTHENTICATOR:    raise GetDebugLn('Login', 'Player needs authenticator to login.');
    ERSLoginMessage.UNKNOWN:          if RSClient.IsLoggedIn() or Lobby.IsOpen() then Exit(True) else raise GetDebugLn('Login', 'Unknown login state.');
  end;
end;


(*
## Login.DoLogin
```pascal
function TRSLogin.DoLogin(player: TRSPlayer): Boolean;
```
Attempts to login into `player`.
If we login, the {ref}`Lobby` screen is handled for you.
Returns true if we succeed.

Example:
```pascal
WriteLn Login.DoLogin(player);
```
*)
function TRSLogin.DoLogin(player: TRSPlayer): Boolean;
var
  timeout: UInt64;
begin
  timeout := GetTickCount() + 40000;

  while not RSClient.IsLoggedIn() or not Lobby.IsOpen() do
  begin
    if GetTickCount() > timeout then
    begin
      WriteLn GetDebugLn('Login', 'Timed out trying to login.', EErrorLevel.ERROR);
      Exit;
    end;

    if not Self.HandleMessage(Self.GetMessage(), player.Username, player.Password) then Exit;
    Sleep(600, 1200);
  end;

  Self.Attempts := 0;

  timeout := GetTickCount() + 15000;
  while Lobby.IsOpen() do
  begin
    if GetTickCount() > timeout then
    begin
      WriteLn GetDebugLn('Login', 'Timed out trying to handle the lobbyscreen.', EErrorLevel.ERROR);
      Exit;
    end;

    if Lobby.EnterGame() then Exit(True);
  end;

  Result := RSClient.IsLoggedIn();
end;


procedure TRSLogin.Draw(img: TImage);
var
  i: Integer;
begin
  if RSClient.IsLoggedIn() then Exit;
  if LoginWorldSwitcher.IsOpen() then Exit;
  if Lobby.IsOpen() then Exit;

  img.DrawColor := $00FFFF;
  img.DrawBox(Self.Bounds);

  img.DrawColor := $FFFFFF;
  img.DrawBox(Self.Buttons[ERSLoginButton.LOGIN].Bounds);

  img.DrawColor := $00FF00;
  img.DrawBox(Self.Inputs[ERSLoginInput.USERNAME]);
  img.DrawBox(Self.Inputs[ERSLoginInput.PASSWORD]);

  img.DrawColor := $FF00FF;
  img.DrawBox(LoginWorldSwitcher.OpenButton);
end;

procedure ShowOnClient(login: TRSLogin); overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget();
  login.Draw(img);
  img.Show();
  img.Free();
end;


var
(*
## Login variable
Global {ref}`TRSLogin` variable.
*)
  Login: TRSLogin;
