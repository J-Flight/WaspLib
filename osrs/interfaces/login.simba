{$DEFINE SRLT_LOGIN_INCLUDED}
{$IFNDEF SRLT_OSRS}
  {$I SRLT/osrs.simba}
{$ENDIF}

type
  TRSLoginLobby = record
    Bounds, Button: TBox;
    OCRFilter: TOCRColorFilter;
  end;

procedure TRSLoginLobby.Setup();
begin
  Self.OCRFilter := TOCRColorFilter.Create([$FFFFFF]);

  Self.Bounds.X1 := Target.Bounds.Width div 2 - 382;
  Self.Bounds.X2 := Target.Bounds.Width div 2 + 382;
  Self.Bounds.Y1 := Target.Bounds.Y1;
  Self.Bounds.Y2 := Self.Bounds.Y1 + 502;

  with Self.Button do
  begin
    X1 := Self.Bounds.X1 + 268;
    Y1 := Self.Bounds.Y1 + 294;
    X2 := X1 + 228;
    Y2 := Y1 + 89;
  end;
end;


function TRSLoginLobby.IsOpen(): Boolean;
begin
  Result := 1 = OCR.Locate(Self.Button, 'CLICK HERE TO PLAY', RSFonts.BOLD_12_SHADOW,Self.OCRFilter);
end;

function TRSLoginLobby.WaitOpen(const time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(), interval, time);
end;

(*
## Lobby.EnterGame
```pascal
function TRSLoginLobby.EnterGame(): Boolean;
```
Attempts to enter the game from the lobby.
This is automatically called for you with `Login.DoLogin()`.

Example:
```pascal
WriteLn Lobby.EnterGame();
```
*)
function TRSLoginLobby.EnterGame(): Boolean;
begin
  if RSClient.IsLoggedIn() then Exit(True);
  WriteLn GetDebugLn('Lobby', 'Entering the game.');
  Mouse.Click(Self.Button, EMouseButton.LEFT);
  Result := RSClient.WaitLoggedIn(3000);
end;

var
  Lobby: TRSLoginLobby;

type
  TRSLoginWorldSwitcher = record
    Bounds: TBox;
    OpenButton, CancelButton: TBox;
    CurrentOCRFilter, WorldOCRFilter: TOCRColorFilter;
    CurrentWorld: Integer;
    WorldBoxes: TBoxArray;

    AllowDangerousWorlds: Boolean;
  end;

procedure TRSLoginWorldSwitcher.Setup();
begin
  Self.CurrentOCRFilter := TOCRColorFilter.Create([$FFFFFF]);
  Self.WorldOCRFilter := TOCRColorFilter.Create([$000000, $0000FF]);

  Self.Bounds.X1 := Target.Bounds.Width div 2 - 382;
  Self.Bounds.X2 := Target.Bounds.Width div 2 + 382;
  Self.Bounds.Y1 := Target.Bounds.Y1;
  Self.Bounds.Y2 := Self.Bounds.Y1 + 502;

  Self.CancelButton.X1 := Self.Bounds.X2 - 57;
  Self.CancelButton.Y1 := Self.Bounds.Y1 + 4;
  Self.CancelButton.X2 := Self.Bounds.X2 - 8;
  Self.CancelButton.Y2 := Self.Bounds.Y1 + 19;

  Self.OpenButton.X1 := Self.Bounds.X1 + 14;
  Self.OpenButton.Y1 := Self.Bounds.Y2 - 34;
  Self.OpenButton.X2 := Self.OpenButton.X1 + 79;
  Self.OpenButton.Y2 := Self.OpenButton.Y1 + 23;

  Self.WorldBoxes := TBoxArray.Create(Self.Bounds.TopLeft.Offset(62, 35), 7, 24, 84, 18, [9, 1]);
end;

function TRSLoginWorldSwitcher.IsOpen(): Boolean;
begin
  Result := Target.HasColor($FFFFFF, 0, 61, Self.CancelButton);
end;

function TRSLoginWorldSwitcher.WaitOpen(const time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(), interval, time);
end;

function TRSLoginWorldSwitcher.Close(): Boolean;
begin
  if not Self.IsOpen() then Exit(True);
  Mouse.Click(Self.CancelButton, EMouseButton.LEFT);
  Result := SleepUntil(not Self.IsOpen(), RandomMode(100, 50, 1500), 600);
end;

function TRSLoginWorldSwitcher.Open(): Boolean;
begin
  if Self.IsOpen() then Exit(True);
  Mouse.Click(Self.OpenButton, EMouseButton.LEFT);
  Result := Self.WaitOpen();
end;


function TRSLoginWorldSwitcher.LeftButton(): TBox;
begin
  Result.X1 := Target.Bounds.X1 + 9;
  Result.Y1 := Target.Bounds.Height div 2 - 10;
  Result.X2 := Result.X1 + 42;
  Result.Y2 := Result.Y1 + 28;
end;

function TRSLoginWorldSwitcher.RightButton(): TBox;
begin
  Result.X2 := Target.Bounds.X2 - 7;
  Result.Y1 := Target.Bounds.Height div 2 - 10;
  Result.X1 := Result.X2 - 42;
  Result.Y2 := Result.Y1 + 28;
end;


function TRSLoginWorldSwitcher.Read(index: Integer): Integer;
begin
  Result := OCR.RecognizeNumber(Self.WorldBoxes[index], Self.WorldOCRFilter, RSFonts.BOLD_12);
end;


function TRSLoginWorldSwitcher.PreviousPage(): Boolean;
var
  first: Integer;
begin
  first := Self.Read(0);
  Mouse.Click(Self.LeftButton(), EMouseButton.LEFT);
  Result := SleepUntil(Self.Read(0) <> first, RandomMode(100, 50, 1500), 600);
  Sleep(400, 1200);
end;

function TRSLoginWorldSwitcher.NextPage(): Boolean;
var
  first: Integer;
begin
  if Target.HasColor($0, 0, 1615, Self.WorldBoxes[High(Self.WorldBoxes)]) then Exit;

  first := Self.Read(0);
  Mouse.Click(Self.RightButton(), EMouseButton.LEFT);
  Result := SleepUntil(Self.Read(0) <> first, RandomMode(100, 50, 1500), 600);
  Sleep(400, 1200);
end;


function TRSLoginWorldSwitcher.GetCurrent(): Integer;
begin
  if not Self.Close() then Exit;
  Result := OCR.RecognizeNumber(Self.OpenButton, Self.CurrentOCRFilter, RSFonts.BOLD_12_SHADOW);
  if InRange(Self.CurrentWorld, 301, 580) then Self.CurrentWorld := Result;
end;


function TRSLoginWorldSwitcher.Find(world: Integer; out index: Integer): Boolean;
begin
  repeat
    for index := 0 to High(Self.WorldBoxes) do
      if OCR.RecognizeNumber(Self.WorldBoxes[index], Self.WorldOCRFilter, RSFonts.BOLD_12) = world then
        Exit(True);
  until not Self.NextPage();

  Self.Close();
  index := -1;
end;

function TRSLoginWorldSwitcher.Switch(world: Integer): Boolean;
var
  idx: Integer;
begin
  if Self.CurrentWorld = world then Exit(True);
  if not InRange(Self.CurrentWorld, 301, 580) and not Self.IsOpen() and
    (Self.GetCurrent() = world) then
    Exit(True);

  if not Self.Open() then Exit;
  if not Self.Find(world, idx) then Exit;

  if not Self.AllowDangerousWorlds and
     not Target.HasColor(ColorTolerance($878254, 14.762, EColorSpace.LCH, [1.077, 1.714, 0.211]), 500, Self.WorldBoxes[idx]) then
      raise GetDebugLn('Login.WorldPicker', 'You are trying to login into a dangerous world! If this is intentional, enable dangerous worlds.');

  Mouse.Click(Self.WorldBoxes[idx], EMouseButton.LEFT);

  Result := SleepUntil(not Self.IsOpen(), 50, 600) and (Self.GetCurrent() = world);
end;


const
  LOGIN_MESSAGES = [
    'Welcome to RuneScape'
    'Connecting to server',
    'Invalid credentials',
    'Incorrect username or password',
    'You need a skill total of',
    'Please enter your username/email',
    'Error connecting to server',
    'Your account has not logged out',
    'Login server offline',
    'Error loading your profile',
    'Connection timed out',
    'Login limit exceeded',
    'This world is full',
    'Your account has been',
    'You need a members account',
    'You are standing in a members-only area',
    'Authenticator'
  ];

type
  ERSLoginMode    = enum(UNKNOWN, LEGACY, LAUNCHER);
  ERSLoginButton  = enum(LAUNCHER, EXISTING_USER, LOGIN, RETRY, OKAY);
  ERSLoginInput   = enum(USERNAME, PASSWORD);
  ERSLoginMessage = enum(
    UNKNOWN,
    WELCOME, CONNECTING, INVALID, INCORRECT, SKILL_TOTAL, ENTER_CREDENTIALS,
    ERROR_CONNECTING, ACCOUNT_ONLINE, SERVER_OFFLINE, ERROR_LOADING, TIMED_OUT,
    LIMIT_EXCEEDED, WORLD_FULL, BANNED, NOT_MEMBER, ON_MEMBER_AREA,
    AUTHENTICATOR
  );

  TRSLogin = record
    Lobby: TRSLoginLobby;
    WorldSwitcher: TRSLoginWorldSwitcher;

    Bounds: TBox;
    WhiteOCR, YellowOCR: TOCRColorFilter;

    Inputs: array [ERSLoginInput] of TBox;
    Buttons: array [ERSLoginButton] of record
      Text: String;
      Bounds: TBox;
      Bold: Boolean;
    end;

    Mode: ERSLoginMode;
    Attempts: Integer;
    ClearInputs: Boolean;
  end;

procedure TRSLogin.Setup();
begin
  Self.WorldSwitcher.Setup();
  Self.Lobby.Setup();

  Self.WhiteOCR := TOCRColorFilter.Create([$FFFFFF]);
  Self.YellowOCR := TOCRColorFilter.Create([$00FFFF]);

  Self.Bounds.X1 := Target.Bounds.Width div 2 - 176;
  Self.Bounds.Y1 := Target.Bounds.Y1 + 172;
  Self.Bounds.X2 := Target.Bounds.Width div 2 + 176;
  Self.Bounds.Y2 := Self.Bounds.Y1 + 194;

  with Self.Inputs[ERSLoginInput.USERNAME] do
  begin
    X1 := Self.Bounds.X1 + 106;
    Y1 := Self.Bounds.Y1 + 69;
    X2 := X1 + 200;
    Y2 := Y1 + 16;
  end;

  with Self.Inputs[ERSLoginInput.PASSWORD] do
  begin
    X1 := Self.Bounds.X1 + 138;
    Y1 := Self.Bounds.Y1 + 86;
    X2 := X1 + 204;
    Y2 := Y1 + 13;
  end;

  with Self.Buttons[ERSLoginButton.LAUNCHER] do
  begin
    Bounds.X1 := Self.Bounds.X1 + 72;
    Bounds.Y1 := Self.Bounds.Y1 + 62;
    Bounds.X2 := Bounds.X1 + 207;
    Bounds.Y2 := Bounds.Y1 + 57;
    Text := '';
  end;

  with Self.Buttons[ERSLoginButton.EXISTING_USER] do
  begin
    Bounds.X1 := Self.Bounds.X1 + 188;
    Bounds.Y1 := Self.Bounds.Y1 + 103;
    Bounds.X2 := Bounds.X1 + 134;
    Bounds.Y2 := Bounds.Y1 + 32;
    Text := 'Existing User';
  end;

  with Self.Buttons[ERSLoginButton.LOGIN] do
  begin
    Bounds.X1 := Self.Bounds.X1 + 28;
    Bounds.Y1 := Self.Bounds.Y1 + 133;
    Bounds.X2 := Bounds.X1 + 134;
    Bounds.Y2 := Bounds.Y1 + 32;
    Text := 'Login';
  end;

  with Self.Buttons[ERSLoginButton.RETRY] do
  begin
    Bounds.X1 := Self.Bounds.X1 + 108;
    Bounds.Y1 := Self.Bounds.Y1 + 88;
    Bounds.X2 := Self.Bounds.X2 - 110;
    Bounds.Y2 := Bounds.Y1 + 32;
    Text := 'Try again';
  end;

  with Self.Buttons[ERSLoginButton.OKAY] do
  begin
    Bounds.X1 := Self.Bounds.X1 + 109;
    Bounds.Y1 := Self.Bounds.Y1 + 113;
    Bounds.X2 := Bounds.X1 + 134;
    Bounds.Y2 := Bounds.Y1 + 32;
    Text := 'Ok';
  end;
end;


function TRSLogin.FindButton(button: ERSLoginButton): Boolean;
begin
  if button = ERSLoginButton.LAUNCHER then
  begin
    if not Target.HasColor($00FFFF, 0, 1, Self.Buttons[ERSLoginButton.LAUNCHER].Bounds) then
      Exit;
    if not InRange(Target.CountColor($FFFFFF, 0, Self.Buttons[ERSLoginButton.LAUNCHER].Bounds), 500, 550) then
      Exit;

    Exit(True);
  end;

  if Self.Buttons[button].Bold then
    Result := Self.Buttons[button].Text = OCR.Recognize(Self.Buttons[button].Bounds, Self.WhiteOCR, RSFonts.BOLD_12_SHADOW)
  else
    Result := Self.Buttons[button].Text = OCR.Recognize(Self.Buttons[button].Bounds, Self.WhiteOCR, RSFonts.PLAIN_12);
end;

function TRSLogin.ClickButton(button: ERSLoginButton): Boolean;
begin
  if not Self.FindButton(button) then Exit;
  Result := True;
  Mouse.Click(Self.Buttons[button].Bounds, EMouseButton.LEFT);
end;


function TRSLogin.SelectInput(field: ERSLoginInput): Boolean;
begin
  if SleepUntil(Target.HasColor($00FFFF, 0, 8, Self.Inputs[field]), 30, 100) then
    Exit(True);

  if RandomBoolean(0.5) then
    Keyboard.PressKey(EKeyCode.TAB)
  else
    with Self.Inputs[field] do
      Mouse.Click([X1, Y1, X2, Y2-3], EMouseButton.LEFT);

  Result := SleepUntil(Target.HasColor($00FFFF, 0, 8, Self.Inputs[field]), 30, 600);
end;

function TRSLogin.InputIsFilled(field: ERSLoginInput): Boolean;
begin
  Result := Target.HasColor($FFFFFF, 0, 1, Self.Inputs[field]);
end;

function TRSLogin.ClearInput(field: ERSLoginInput): Boolean;
begin
  if not Self.InputIsFilled(field) then Exit(True);
  if not Self.SelectInput(field) then Exit;

  Keyboard.KeyDown(EKeyCode.BACK);
  Result := SleepUntil(not Self.InputIsFilled(field), RandomMode(100, 50, 1500),  6000);
  Keyboard.KeyUp(EKeyCode.BACK);
end;

function TRSLogin.FillInput(field: ERSLoginInput; details: String): Boolean;
begin
  if Self.InputIsFilled(field) then Exit;
  if not Self.SelectInput(field) then Exit;

  Result := True;
  Keyboard.Send(details, EKeyCode.RETURN);
end;


function TRSLogin.GetMessage(): ERSLoginMessage;
var
  dialog: String;
begin
  dialog := OCR.RecognizeLines(Self.Bounds, Self.YellowOCR, RSFonts.BOLD_12_SHADOW).Join(' ');

  for Result := Low(ERSLoginMessage) to High(ERSLoginMessage) do
    if dialog.Contains(LOGIN_MESSAGES[Result]) then
      Exit;
end;


function TRSLogin.GetMode(): ERSLoginMode;
begin
  if Self.GetMessage() = ERSLoginMessage.WELCOME then
  begin
    if Self.FindButton(ERSLoginButton.EXISTING_USER) then
    begin
      WriteLn GetDebugLn('Login', 'Legacy client mode detected.', EErrorLevel.SUCCESS);
      Exit(ERSLoginMode.LEGACY);
    end;

    if Self.FindButton(ERSLoginButton.LAUNCHER) then
    begin
      WriteLn GetDebugLn('Login', 'Launcher client mode detected.', EErrorLevel.SUCCESS);
      Exit(ERSLoginMode.LAUNCHER);
    end;
  end;

  WriteLn GetDebugLn('Login', 'Failed to detect login mode.', EErrorLevel.WARN);
end;


function TRSLogin.HandleWelcome(): Boolean;
begin
  if Self.Mode = ERSLoginMode.UNKNOWN then
    Self.Mode := Self.GetMode();

  case Self.Mode of
    ERSLoginMode.LEGACY:
      if Self.ClickButton(ERSLoginButton.EXISTING_USER) then
        Exit(SleepUntil(Self.GetMessage() <> ERSLoginMessage.WELCOME, RandomMode(100, 50, 1500), 600));

    ERSLoginMode.LAUNCHER:
      if Self.ClickButton(ERSLoginButton.LAUNCHER) then
        Exit(SleepUntil(Self.GetMessage() <> ERSLoginMessage.WELCOME, RandomMode(100, 50, 1500), 600));
  end;
end;

function TRSLogin.BackToWelcome(): Boolean;
begin
  if not Self.ClickButton(ERSLoginButton.OKAY) then Exit;
  Result := SleepUntil(Self.GetMessage() = ERSLoginMessage.WELCOME, RandomMode(100, 50, 1500), 600);
end;


function TRSLogin.EnterCredentials(username, password: String): Boolean;
var
  field: ERSLoginInput;
begin
  if Self.ClearInputs then
  begin
    if not Self.ClearInput(ERSLoginInput.USERNAME) then Exit;
    if not Self.ClearInput(ERSLoginInput.PASSWORD) then Exit;
  end;

  if not Self.FillInput(ERSLoginInput.USERNAME, username) then Exit;
  if not Self.FillInput(ERSLoginInput.PASSWORD, password) then Exit;
  Result := SleepUntil(Self.GetMessage() <> ERSLoginMessage.ENTER_CREDENTIALS, RandomMode(100, 50, 1500), 600);
end;



function TRSLogin.Retry(msg: ERSLoginMessage): Boolean;
begin
  if not Self.ClickButton(ERSLoginButton.RETRY) then Exit;
  Self.ClearInputs := True;
  Result := SleepUntil(Self.GetMessage() <> msg, RandomMode(100, 50, 1500), 600);
end;

function TRSLogin.HandleError(msg: ERSLoginMessage): Boolean;
var
  time: Integer;
begin
  time := Random(10000, 20000) * Inc(Self.Attempts);

  if (msg = ERSLoginMessage.WORLD_FULL) or (Self.Attempts < 4) then
  begin
    WriteLn GetDebugLn('Login', 'Failed to login ' + ToStr(Self.Attempts) + ' times.', EErrorLevel.WARN);
    WriteLn GetDebugLn('Login', 'Waiting ' + ToStr(time) + ' seconds before trying again.', EErrorLevel.WARN);
    Sleep(time);
    Exit(True);
  end;

  if Self.Attempts = 4 then
  begin
    WriteLn GetDebugLn('Login', 'Failed to login ' + ToStr(Self.Attempts) + ' times.', EErrorLevel.ERROR);
    WriteLn GetDebugLn('Login', 'Script will shutdown if we fail one more time.', EErrorLevel.ERROR);
    WriteLn GetDebugLn('Login', 'Waiting ' + ToStr(time) + ' seconds before trying again.', EErrorLevel.ERROR);
    Sleep(time);
    Exit(True);
  end;

  raise GetDebugLn('Login', 'Failed to login 10 times. Last login state: ' + ToStr(msg));
end;

function TRSLogin.HandleMessage(msg: ERSLoginMessage; username, password: String): Boolean;
begin
  case msg of
    ERSLoginMessage.WELCOME:    Result := Self.HandleWelcome();
    ERSLoginMessage.CONNECTING: Result := SleepUntil(msg <> Self.GetMessage(), RandomMode(100, 50, 1500), 50000); //50 secs
    ERSLoginMessage.INVALID, ERSLoginMessage.INCORRECT:  Result := Self.Retry(msg);
    ERSLoginMessage.ENTER_CREDENTIALS: Result := Self.EnterCredentials(username, password);

    ERSLoginMessage.ERROR_CONNECTING,ERSLoginMessage.LIMIT_EXCEEDED,
    ERSLoginMessage.ACCOUNT_ONLINE, ERSLoginMessage.WORLD_FULL,
    ERSLoginMessage.TIMED_OUT: Result := Self.HandleError(msg);

    ERSLoginMessage.SKILL_TOTAL:      raise GetDebugLn('Login', 'We are trying to login into a total level world you can''t login to.');
    ERSLoginMessage.SERVER_OFFLINE:   raise GetDebugLn('Login', 'Login server offline. The game is/was probably updated.');
    ERSLoginMessage.ERROR_LOADING:    raise GetDebugLn('Login', 'Game loading error. It was probably updated.');
    ERSLoginMessage.BANNED:           raise GetDebugLn('Login', 'Account seems to be banned or disabled.');
    ERSLoginMessage.NOT_MEMBER:       raise GetDebugLn('Login', 'Account is not members and we are trying to login into a P2P world.');
    ERSLoginMessage.ON_MEMBER_AREA:   raise GetDebugLn('Login', 'Account is on a P2P area and we are trying to login into a F2P world.');
    ERSLoginMessage.AUTHENTICATOR:    raise GetDebugLn('Login', 'Account needs authenticator to login.');
    ERSLoginMessage.UNKNOWN:          if RSClient.IsLoggedIn() or Lobby.IsOpen() then Exit(True) else raise GetDebugLn('Login', 'Unknown login state.');
  end;
end;


function TRSLogin.DoLogin(account: TRSAccount): Boolean;
begin
  while not RSClient.IsLoggedIn() or not Lobby.IsOpen() do
  begin
    if not Self.HandleMessage(Self.GetMessage(), account.Username, account.Password) then Exit;
    Sleep(600, 1200);
  end;

  Self.Attempts := 0;

  if Lobby.IsOpen() then
    Lobby.EnterGame();

  Result := RSClient.IsLoggedIn();
end;

var
  Login: TRSLogin;
begin
  Login.Setup();
  WriteLn Login.Lobby.IsOpen();
end;
