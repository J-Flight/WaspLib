(*
# Achievements
This page is dedicated to the achievements game tab and methods to interact with it.
```{figure} ../../images/achievements.png
```
*)
{$DEFINE WL_ACHIEVEMENTS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## ERSAchievementTab
```pascal
ERSAchievementTab = enum(SUMMARY, QUESTS, DIARIES);
```
An enum representing each of the {ref}`Achievements` gametab tabs.
*)
  ERSAchievementTab = enum(SUMMARY, QUESTS, DIARIES, ADVENTURE_PATHS);

(*
## ERSAchievementDiary
```pascal
ERSAchievementDiary = enum(
  ARDOUGNE,
  DESERT,
  FALADOR,
  FREMENNIK,
  KANDARIN,
  KARAMJA,
  KOUREND_AND_KEBOS,
  LUMBRIDGE_AND_DRAYNOR,
  MORYTANIA,
  VARROCK,
  WESTERN_PROVINCES,
  WILDERNESS
);
```
An enum representing each of the achievement diaries available.
*)
  ERSAchievementDiary = enum(
    ARDOUGNE,
    DESERT,
    FALADOR,
    FREMENNIK,
    KANDARIN,
    KARAMJA,
    KOUREND_AND_KEBOS,
    LUMBRIDGE_AND_DRAYNOR,
    MORYTANIA,
    VARROCK,
    WESTERN_PROVINCES,
    WILDERNESS
  );

(*
## TRSAchievementsSummary
Helper record used to interact with the {ref]`Achievements` gametab "Summary" tab:
```{figure} ../../images/achievements.png
```
*)
  TRSAchievementsSummary = record
    Username, CombatLevel, TotalLevel, TotalXP, Quests, Diaries, CombatTasks,
    CollectionLog, TimePlayed: TBox;
  end;

(*
## TRSAchievementsSummary.SetupGameTab
```pascal
procedure TRSAchievementsSummary.SetupGameTab();
```
Internal method used to setup {ref]`TRSAchievementsSummary` coordinates.

This is automatically called for you on the `Achievements.Summary variable`.
*)
procedure TRSAchievementsSummary.SetupGameTab();
var
  boxes: TBoxArray;
begin
  with GameTab.Bounds do
  begin
    Self.Username := [X1+4, Y1+26, X2-4, Y1+44];
    boxes := TBoxArray.Create([X1, Y1+45], 2, 1, 90, 41, [3,0]);
    Self.CombatLevel := boxes[0];
    Self.TotalLevel := boxes[1];
    Self.TotalXP := [X1, Y1+89, X2, Y1+116];
    boxes := TBoxArray.Create([X1, Y1+119], 2, 2, 90, 53, [3,3]);
    Self.Quests := boxes[0];
    Self.Diaries := boxes[1];
    Self.CombatTasks := boxes[2];
    Self.CollectionLog := boxes[3];
    Self.TimePlayed := [X1, Y2 - 30, X2, Y2-5];
  end;
end;

type
(*
## TRSQuestList
Helper record used to interact with the {ref]`Achievements` gametab "Quests" tab:
```{figure} ../../images/achievements_quests.png
```
*)
  TRSQuestList = record
    Scroll: TRSScrollBar;
  end;

(*
## TRSQuestList.SetupGameTab
```pascal
procedure TRSQuestList.SetupGameTab();
```
Internal method used to setup {ref]`TRSQuestList` coordinates.

This is automatically called for you on the `Achievements.Quests variable`.
*)
procedure TRSQuestList.SetupGameTab();
begin
  with GameTab.Bounds do
    Self.Scroll.Area := [X1+6, Y1+51, X2-21, Y2-45];
  Self.Scroll.Setup();
end;

type
(*
## TRSDiarySlot
Helper record used to interact with a {ref}`TRSDiaryList` slot.
*)
  TRSDiarySlot = record
    Name, Number, Bounds: TBox;
    Levels: TBoxArray;
  end;

(*
## TRSDiaryList
Helper record used to interact with the {ref]`Achievements` gametab "Diaries" tab:
```{figure} ../../images/achievements_diaries.png
```
*)
  TRSDiaryList = record
    Names: TStringArray;
    Scroll: TRSScrollBar;
  end;

(*
## TRSDiaryList.SetupGameTab
```pascal
procedure TRSDiaryList.SetupGameTab();
```
Internal method used to setup {ref]`TRSDiaryList` coordinates.

This is automatically called for you on the `Achievements.Diaries variable`.
*)
procedure TRSDiaryList.SetupGameTab();
var
  diary: ERSAchievementDiary;
begin
  for diary := Low(ERSAchievementDiary) to High(ERSAchievementDiary) do
    Self.Names += ToString(diary).After('ERSAchievementDiary.').Replace('_', ' ').Replace(' AND ', ' & ').CapitalizeWords();

  with GameTab.Bounds do
    Self.Scroll.Area := [X1, Y1+45, X2-16, Y2-4];
  Self.Scroll.Setup();
end;

(*
## TRSDiaryList.GetSlots
```pascal
function TRSDiaryList.GetSlots(): array of TRSDiarySlot;
```
Returns the slots available in the diary tab as an array of {ref}`TRSDiarySlot`.

Example:
```pascal
img := Target.GetImage();
for slot in Achievements.Diaries.GetSlots() do
begin
  img.DrawColor := $FFFFFF;
  img.DrawBox(slot.Bounds);

  img.DrawColor := $00FFFF;
  img.DrawBox(slot.Name);

  img.DrawColor := $FF00FF;
  img.DrawBox(slot.Number);

  img.DrawColor := $FFFF00;
  img.DrawBoxArray(slot.Levels, False);
end;

img.Show();
img.Free();
```

```{figure} ../../images/diary_slots.png
```
*)
function TRSDiaryList.GetSlots(): array of TRSDiarySlot;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  slot: TRSDiarySlot;
begin
  tpa := Target.FindColor($0, 0, Self.Scroll.Area);
  atpa := tpa.Cluster(1.5).ExcludeSize(200, EComparator.__LT__);

  for tpa in atpa do
  begin
    with tpa.Bounds() do
    begin
      slot.Bounds := [X1-4, Y1-17, X2+3, Y2+3];
      if (Self.Scroll.Area.Y1 > slot.Bounds.Y1) or
         (Self.Scroll.Area.Y2 < slot.Bounds.Y2) then
         Continue;
      slot.Name   := [X1-1, Y1 - 15, X1 + 105, Y1 - 1];
      slot.Number := [X2-28, Y1-15, X2+1, Y1-3];
      slot.Levels := TBoxArray.Create(TopLeft, 4, 1, 36, 6, [0,0]);
    end;
    Result += slot;
  end;
end;

(*
## TRSDiaryList.GetSlot
```pascal
function TRSDiaryList.GetSlot(diary: ERSAchievementDiary): TRSDiarySlot;
```
Returns the slot of the specified `diary` as a {ref}`TRSDiarySlot`.

Example:
```pascal
img := Target.GetImage();
slot := Achievements.Diaries.GetSlot(ERSAchievementDiary.FREMENNIK);

img.DrawColor := $FFFFFF;
img.DrawBox(slot.Bounds);

img.DrawColor := $00FFFF;
img.DrawBox(slot.Name);

img.DrawColor := $FF00FF;
img.DrawBox(slot.Number);

img.DrawColor := $FFFF00;
img.DrawBoxArray(slot.Levels, False);

img.Show();
img.Free();
```

```{figure} ../../images/diary_slot.png
```
*)
function TRSDiaryList.GetSlot(diary: ERSAchievementDiary): TRSDiarySlot;
var
  slot: TRSDiarySlot;
begin
  for slot in Self.GetSlots() do
    if OCR.Locate(slot.Name, Self.Names[diary], [RSColors.TEXT_RED, RSColors.TEXT_YELLOW, RSColors.TEXT_GREEN, RSColors.TEXT_WHITE], 0, RSFonts.PLAIN_11) > 0.9 then
      Exit(slot);
end;


(*
## TRSDiaryList.ScrollTo
```pascal
procedure TRSDiaryList.ScrollTo(diary : ERSAchievementDiary);
```
Scrolls to the specified `diary`.

Example:
```pascal
Achievements.Diaries.ScrollTo(ERSAchievementDiary.MORYTANIA);
```
*)
procedure TRSDiaryList.ScrollTo(diary : ERSAchievementDiary);
var
  lo, hi: Integer;
begin
  lo := Max(0, Ord(diary) - 6) * 20;
  hi := Min(100, Ord(diary) * 20);

  if not InRange(Self.Scroll.GetLevel(), lo, hi) then
    Self.Scroll.SetLevel(Random(lo, hi));
end;

type
(*
## TRSAchievements
Main record used to interact with the {ref]`Achievements` gametab.

Each tab has it's own specific variable:
- `TRSAchievements.Summary: TRSAchievementsSummary`
- `TRSAchievements.Quests: TRSQuestList`
- `TRSAchievements.Diaries: TRSDiaryList`

So if you want to use {ref}`TRSDiaryList.GetLevel` for example you would do this:
```pascal
WriteLn Achievements.Diaries.GetLevel(ERSAchievementDiary.ARDOUGNE);
```
*)
  TRSAchievements = record
    TabsArea: TBox;
    Tabs: TBoxArray;

    Summary: TRSAchievementsSummary;
    Quests: TRSQuestList;
    Diaries: TRSDiaryList;
  end;

(*
## Achievements.SetupGameTab();
```pascal
procedure TRSAchievements.SetupGameTab();
```
Internal method used to setup the {ref}`TRSAchievements` coordinates.

This is automatically called for you on the {ref}`Achievements variable`.
*)
procedure TRSAchievements.SetupGameTab();
begin
  with GameTab.Bounds do
  begin
    Self.TabsArea := [X1, Y1 + 5, X2, Y1 + 22];

    Self.Summary.SetupGameTab();
    Self.Quests.SetupGameTab();
    Self.Diaries.SetupGameTab();
  end;
end;

(*
## Achievements.IsOpen
```pascal
function TRSAchievements.IsOpen(): Boolean;
```
Returns true/false if the inventory is open.

Example:
```pascal
WriteLn Achievements.IsOpen();
```
*)
function TRSAchievements.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.ACHIEVEMENTS);
end;

(*
## Achievements.Open
```pascal
function TRSAchievements.Open(): Boolean;
```
Attempts to open the inventory gametab.

Example:
```pascal
WriteLn Achievements.Open();
```
*)
function TRSAchievements.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.ACHIEVEMENTS);
end;

(*
## Achievements Tabs
The {ref}`Achievements` tabs are dynamic as one of them can be hidden away on certain types of accounts:
![3 tabs](../../images/achievements_tabs3.png) ![4 tabs](../../images/achievements_tabs4.png)
To handle this, you have the 2 following methods, they are used automatically for you on the
{ref}`Achievements variable`.
*)

(*
### Achievements.CountTabs
```pascal
function TRSAchievements.CountTabs(): Integer;
```
Internal method used to count the available tabs on the {ref}`Achievements` gametab.
*)
function TRSAchievements.CountTabs(): Integer;
begin
  Result := Length(Target.FindColor(TRSItem.Border, 0, Self.TabsArea).Cluster(1.5));
end;

(*
### Achievements.SetupTabs
```pascal
procedure TRSAchievements.SetupTabs();
```
Internal method used to update the coordinates of the tabs on the {ref}`Achievements` gametab.

This is automatically used for you.
*)
procedure TRSAchievements.SetupTabs();
begin
  case Self.CountTabs() of
    3: Self.Tabs := TBoxArray.Create(GameTab.TopLeft.Offset(1,4), 3, 1, 57, 20, [5, 2]);
    4: Self.Tabs := TBoxArray.Create(GameTab.TopLeft.Offset(1,4), 4, 1, 43, 20, [3, 2]);
    else Exit;
  end;
end;

(*
## Achievements.GetTab
```pascal
function TRSAchievements.GetTab():  ERSAchievementTab;
```
Returns the currently active {ref}`ERSAchievementTab`.

Example:
```pascal
WriteLn Achievements.GetTab();
```
*)
function TRSAchievements.GetTab(): ERSAchievementTab;
var
  i: Integer;
begin
  if Self.Tabs = [] then
  begin
    if not Self.Open() then Exit;
    Self.SetupTabs();
  end;

  for i := 0 to High(Self.Tabs) do
    if not Target.HasColor($48585D, 0, 100, Self.Tabs[i]) and
      not Target.HasColor($1E2528, 0, 100, Self.Tabs[i]) then
      Exit(ERSAchievementTab(i));
end;

(*
## Achievements.OpenTab
```pascal
function TRSAchievements.OpenTab(tab:  ERSAchievementTab): Boolean;
```
Attempts to open the specified `tab` {ref}`ERSAchievementTab`.

Example:
```pascal
WriteLn Achievements.OpenTab( ERSAchievementTab.DIARIES);
```
*)
function TRSAchievements.OpenTab(tab: ERSAchievementTab): Boolean;
var
  b: TBox;
begin
  if not Self.Open() then Exit;
  if Self.Tabs = [] then Self.SetupTabs();

  b := Self.Tabs[tab];
  case Self.GetTab() of
    tab: Exit(True);
    ERSAchievementTab.SUMMARY:
    if (tab <> ERSAchievementTab.ADVENTURE_PATHS) and Biometrics.RandomBoolean() then
    begin
      if tab = ERSAchievementTab.QUESTS then b := Self.Summary.Quests
      else b := Self.Summary.Diaries;
    end;
  end;

  Mouse.Click(b, EMouseButton.LEFT);
  Result := SleepUntil(Self.GetTab() = tab, RandomMode(100, 50, 1500), 2000);
end;


var
(*
## Achievements variable
Global {ref}`TRSAchievements` variable.
*)
  Achievements: TRSAchievements;

(*
## TRSDiaryList.GetLevel
```pascal
function TRSDiaryList.GetLevel(diary: ERSAchievementDiary): Integer;
```
Returns the current completion level of the specified `diary`.
The level will be between -1 and 4. -1 is returned if we fail.

Example:
```pascal
WriteLn Achievements.Diaries.GetLevel(ERSAchievementDiary.MORYTANIA);
```
*)
function TRSDiaryList.GetLevel(diary: ERSAchievementDiary): Integer;
var
  i: Integer;
  slot: TRSDiarySlot;
begin
  if not Achievements.OpenTab(ERSAChievementTab.DIARIES) then Exit(-1);
  Self.ScrollTo(diary);
  slot := Self.GetSlot(diary);

  for i := 0 to 3 do
  begin
    if not Target.HasColor($14B537, 0, 1, slot.Levels[i]) then Break;
    Result += 1;
  end;
end;
