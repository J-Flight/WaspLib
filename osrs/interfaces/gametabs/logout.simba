(*
# Logout
Methods to interact with the logout tab.
*)
{$DEFINE SRLT_LOGOUT_INCLUDED}
{$IFNDEF SRLT_OSR}
  {$I SRLT/osrs.simba}
{$ENDIF}

type
(*
## Logout Enums
```pascal
ERSRating = (ONE, TWO, THREE, FOUR, FIVE);
ERSLogoutButton = (WORLD_SWITCHER, CLICK_HERE);
```
Enums representing the buttons available in the logout gametab.
*)
  ERSRating = (ONE, TWO, THREE, FOUR, FIVE);
  ERSLogoutButton = (WORLD_SWITCHER, CLICK_HERE);

(*
(TRSLogout)=
## type TRSLogout
Main record that holds and the methods to interact with the logout gametab.
*)
  TRSLogout = record
    Buttons: array [ERSLoginButton] of TRSButton;
    Ratings: array [ERSRating] of TRSButton;
  end;

(*
## Logout.SetupInterface
```pascal
procedure TRSLogout.SetupInterface();
```
Internal method used to setup {ref}`TRSLogout` coordinates.
This is called automatically for you on the {ref}`Logout` variable.
*)
procedure TRSLogout.SetupInterface();
var
  btns: TBoxArray;
  i: Integer;
begin
  btns := TBoxArray.Create(GameTab.TopLeft.Offset(2,61), 5, 1, 31, 35, [6, 0]);
  for i := 0 to High(btns) do
  begin
    Self.Ratings[i].EnabledColors := [[$0F1043, 0], [$23269F, 0.227]];
    Self.Ratings[i].Bounds := btns[i];
  end;

  Self.Buttons[ERSLogoutButton.WORLD_SWITCHER].EnabledColors := [[$0F1043, 0], [$23269F, 0.227]];
  Self.Buttons[ERSLogoutButton.CLICK_HERE].EnabledColors := [[$0F1043, 0], [$23269F, 0.227]];

  with GameTab.Bounds do
  begin
    Self.Buttons[ERSLogoutButton.WORLD_SWITCHER].Bounds := TBox.Create(X1+22, Y2-97, X2-22, Y2-66);
    Self.Buttons[ERSLogoutButton.CLICK_HERE].Bounds := TBox.Create(X1+22, Y2-49, X2-22, Y2-18);
  end;
end;

(*
## Logout.IsOpen
```pascal
function TRSLogout.IsOpen(): Boolean;
```
Returns true if the logout gametab is open, false if it's not.

Example:
```pascal
WriteLn Logout.IsOpen();
```
*)
function TRSLogout.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.LOGOUT);
end;

(*
## Logout.Open
```pascal
function TRSLogout.Open(): Boolean;
```
Attempts to open the logout tab, returns true if it succeeds.

Example:
```pascal
WriteLn Logout.Open();
```
*)
function TRSLogout.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.LOGOUT);
  if Result and WorldSwitcher._IsOpen() then
    Result := WorldSwitcher.Close();
end;


(*
## Logout.IsRated
```pascal
function TRSLogout.IsRated(): Boolean;
```
Returns true if a star button was clicked.

Example:
```pascal
WriteLn Logout.IsRated();
```
*)
function TRSLogout.IsRated(): Boolean;
begin
  Result := Self.Ratings[ERSRating.ONE].Enabled();
end;

(*
## Logout.Rate
```pascal
function TRSLogout.Rate(star: ERSRating): Boolean;
```
Click a star button to rate the game.

Example:
```pascal
WriteLn Logout.Rate(ERSRating.FOUR);
```
*)
function TRSLogout.Rate(star: ERSRating): Boolean;
begin
   if Self.Ratings[star].Enabled() and
      ((star = ERSRating.FIVE) or not Self.Ratings[star+1].Enabled()) then
       Exit(True);

   Self.Ratings[star].Click(EMouseButton.LEFT);
   Result := Self.Ratings[star].WaitEnabled();
end;

(*
## Logout.Logout
```pascal
function TRSLogout.Logout(attempts: UInt32 = 5; time: UInt32 = 20000): Boolean;
```
Attempts to logout of the game. Returns true if we succesfully logout of the game.
If the {ref}`WorldSwitcher` is open, we will use {ref}`WorldSwitcher.Logout` instead.

Example:
```pascal
WriteLn Logout.Logout();
```
*)
function TRSLogout.Logout(attempts: UInt32 = 5; time: UInt32 = 20000): Boolean;
var
  i: Integer;
  interval: UInt32;
  stars: ERSRating;
begin
  if not Self.Open() then Exit;
  if WorldSwitcher.Logout() then Exit(True);

  interval := time div attempts;

  if Biometrics.RandomBoolean(EBiometric.RATING) then
  begin
    if Biometrics.RandomBoolean(EBiometric.LIKES) then
      i := RandomLeft(4, 0)
    else
      i := RandomLeft(0, 4);

    stars := ERSRating(i);
    WriteLn GetDebugLn('Logout', 'Rating the game with ' + ToStr(stars) + ' stars before logging out.');
    Self.Rate(stars);
  end;

  if Keyboard.LastKey = EKeyCode.RETURN then
    Keyboard.RandomKey();  //unlock enter if using remote input

  for i := 1 to attempts do
  begin
    Self.Buttons[ERSLogoutButton.CLICK_HERE].Click();
    if SleepUntil(not RSClient.IsLoggedIn(), 500, interval + Random(-2000, 2000)) then
      Exit(True);
  end;
end;

var
  Logout: TRSLogout;

function TRSWorldSwitcher.Open(waitLoad: Boolean = True): Boolean; override;
begin
  if not Logout.Open() then Exit;
  if WorldSwitcher._IsOpen() then Exit(True);
  Logout.Buttons[ERSLogoutButton.WORLD_SWITCHER].Click();
  Result := inherited;
end;
