(*
# Prayer
Methods to interact with the prayer gametab.
*)

{$DEFINE SRLT_PRAYER_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

(*
(TRSPrayerSet)=
## type TRSPrayerSet
```pascal
type TRSPrayerSet = set of ERSPrayer;
```
A set of prayers represented by the `ERSPrayer` enumeration.
*)
type
  TRSPrayerSet = set of ERSPrayer;

(*
(TRSPrayer)=
## type TRSPrayer
A record type representing the RuneScape Prayer game tab, which allows interaction with prayer options in the game.
This type is intended to be used through the variable `Prayer`.
*)
  TRSPrayer = record
    Slots: TBoxArray;
  end;

(*
## Prayer.SetupAlignment
```pascal
procedure TRSPrayer.SetupInterface(); overload;
```
Setups up the interface alignment for the current client mode.

```{note}
This is automatically called on the **TRSClient.ClientModeChanged** function.
```
*)
procedure TRSPrayer.SetupInterface();
begin
  Self.Slots := TBoxArray.Create(GameTab.Bounds.TopLeft.Offset(1,10), 5, 6, 33, 33, [4, 4]);
end;

(*
## TRSPrayer.IsOpen
```pascal
function TRSPrayer.IsOpen(): Boolean;
```
Checks whether the Prayer tab is currently open.

### Parameters:
- None

### Returns:
- True if the Prayer tab is open.
- False if the Prayer tab is closed.

### Example:
```pascal
if Prayer.IsOpen() then
  WriteLn('Prayer tab is open')
else
  WriteLn('Prayer tab is closed');
```
*)
function TRSPrayer.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.PRAYER);
end;

(*
## Prayer.Open
```pascal
function TRSPrayer.Open(): Boolean;
```
Attempts to open the Prayer tab.

### Parameters:
- None

### Returns:
- True if the Prayer tab is open or successfully opened.
- False if the Prayer tab remains closed.

### Example:
```pascal
if Prayer.Open() then
  WriteLn('Prayer tab is open')
else
  WriteLn('Failed to open Prayer tab');
```
*)
function TRSPrayer.Open(): boolean;
begin
  Result := GameTabs.Open(ERSGameTab.PRAYER);
end;

(*
## Prayer.GetInfoBox
```pascal
function TRSPrayer.GetInfoBox(): TBox;
```
Attempts to locate and return the bounding box of the yellow prayer info box.

### Parameters:
- None

### Returns:
- A TBox representing the bounds of the yellow prayer info box if found.
- An empty TBox if the prayer info box is not found or the prayer tab is closed.

### Example:
```pascal
WriteLn Prayer.GetInfoBox();
```
*)
function TRSPrayer.GetInfoBox(): TBox;
var
  tpa: TPointArray;
begin
  if not Self.IsOpen then
    Exit;

  tpa := Target.FindColor($A0FFFF, 4, GameTab.Bounds);
  tpa := tpa.Cluster(1).Largest;
  if tpa.Length > 1000 then
    Result := tpa.Bounds;
end;

(*
## Prayer.InfoIsOpen
```pascal
function TRSPrayer.InfoIsOpen(): Boolean;
```
Checks if the yellow prayer info box is currently open.

### Parameters:
- None

### Returns:
- True if the prayer info box is open.
- False if the prayer info box is closed.

### Example:
```pascal
WriteLn Prayer.InfoIsOpen();
```
*)
function TRSPrayer.InfoIsOpen(): Boolean;
begin
  Result := Self.GetInfoBox <> [];
end;

(*
## Prayer.CloseInfo
```pascal
function TRSPrayer.CloseInfo(): Boolean;
```
Attempts to close the prayer info box if it is open.

### Parameters:
- None

### Returns:
- True if the prayer info box is successfully closed or was not open.
- False if the info box remains open after attempting to close it.

### Example:
```pascal
WriteLn Prayer.CloseInfo();
```
*)
function TRSPrayer.CloseInfo(): Boolean;
var
  destination: TPoint;
  timeout: UInt64;
begin
  if not Self.InfoIsOpen then
    Exit(True);

  destination := GameTab.Bounds.Expand(10).NearestEdge(Target.MouseXY);
  Async.MouseMove(destination);

  timeout := GetTickCount() + 3000;

  while Self.InfoIsOpen() or (GetTickCount() > timeout) do
    Sleep(20, 100, ERandomDir.LEFT);

  Async.MouseStop();

  Result := not Self.InfoIsOpen();
end;

(*
## Prayer.Find
```pascal
function TRSPrayer.Find(prayer: ERSPrayer; out b: TBox; attempts: Int32 = 2): Boolean;
```
Searches for the specified prayer.

### Parameters:
- `prayer`: The prayer to find, specified as an `ERSPrayer` value.
- `b`: An output parameter that will contain the bounding box of the found prayer.
- `attempts`: Number of attempts to find the prayer (default is 2).

### Returns:
- True if the prayer is found.
- False if the prayer is not found or the prayer tab is not open.

### Example:
```pascal
WriteLn Prayer.Find(ERSPrayer.Smite, b);
```
*)
function TRSPrayer.Find(prayer: ERSPrayer; out b: TBox; attempts: Int32 = 2): Boolean;
var
  match: TImageMatch;
begin
  if not Self.IsOpen() then
    Exit;

  Result := PrayerFinder.Find([prayer], Self.Slots, match);

  if Result then
  begin
    b := match.Box.Expand(-1);
    Exit;
  end;

  if attempts = 0 then
    Exit;

  if Self.InfoIsOpen then
    Result := Self.CloseInfo and Self.Find(prayer, b, attempts-1);
end;

(*
## Prayer.Hover
```pascal
function TRSPrayer.Hover(prayer: ERSPrayer; checkUpText: Boolean = False): Boolean;
```
Moves the mouse over the specified prayer.

### Parameters:
- `prayer`: The prayer to hover over, specified as an `ERSPrayer` value.
- `checkUpText`: A boolean flag indicating whether to verify the uptext (default is `False`).

### Returns:
- True if the mouse was successfully moved over the prayer and the optional uptext check passes.
- False if the prayer was not found or the mouse could not be moved over the prayer.

### Example:
```pascal
Prayer.Hover(ERSPrayer.PIETY);
```
*)
function TRSPrayer.Hover(prayer: ERSPrayer; checkUpText: Boolean = False): Boolean;
var
  b: TBox;
begin
  if not (Self.IsOpen and Self.Find(prayer, b)) then
    Exit;

  Mouse.Move(b);
  Result := True;

  if checkUpText then
    Result := MainScreen.GetUpText.After('ctivate').Trim
      = ToStr(prayer).ToLower.Replace('_', ' ').CapitalizeWords;
end;

(*
## Prayer.Click
```pascal
function TRSPrayer.Click(prayer: ERSPrayer; button: EMouseButton = EMouseButton.LEFT; checkUpText: Boolean = False): Boolean;
```
Clicks on the specified prayer.

### Parameters:
- `prayer`: The prayer to click, specified as an `ERSPrayer` value.
- `button`: The mouse button to use for clicking (default is left button).
- `checkUpText`: A boolean flag indicating whether to verify the uptext (default is `False`).

### Returns:
- True if the prayer was successfully clicked.
- False if the prayer was not found or could not be clicked.

### Example:
```pascal
Prayer.Click(ERSPrayer.PIETY);
```
*)
function TRSPrayer.Click(prayer: ERSPrayer; button: EMouseButton = EMouseButton.LEFT; checkUpText: Boolean = False): Boolean;
begin
  Result := Self.Hover(prayer, checkUpText);
  if Result then
    Target.MouseClick(button);
end;

(*
## Prayer.CanActivate
```pascal
function TRSPrayer.CanActivate(prayer: ERSPrayer): Boolean;
```
Checks if the specified prayer can be activated.

### Parameters:
- `prayer`: The prayer to check for activation, specified as an `ERSPrayer` value.

### Returns:
- True if the prayer can be activated.
- False if the prayer cannot be activated.

### Example:
```pascal
Prayer.CanActivate(ERSPrayer.PIETY);
```
*)
function TRSPrayer.CanActivate(prayer: ERSPrayer): Boolean;
var
  b: TBox;
begin
  Result := Self.Find(prayer, b);
end;

(*
## Prayer.IsActive
```pascal
function TRSPrayer.IsActive(prayers: TRSPrayerSet): Boolean; overload;
```
Checks if all specified prayers are currently active.

### Parameters:
- `prayers`: A set of prayers to check for activation.

### Returns:
- True if all specified prayers are active.
- False if any of the specified prayers are not active.

### Example:
```pascal
if Prayer.IsActive([ERSPrayer.PIETY, ERSPrayer.PROTECT_FROM_MELEE]) then
  WriteLn('Both prayers are active')
else
  WriteLn('One or more prayers are not active');
```
*)
function TRSPrayer.IsActive(prayers: TRSPrayerSet): Boolean; overload;
var
  prayer: ERSPrayer;
  b: TBox;
begin
  for prayer in prayers do
    if not (Self.Find(prayer, b) and Target.HasColor(7315120, 27, 10, b)) then
      Exit;

  Result := True;
end;

(*
## Prayer.GetActivePrayers
```pascal
function TRSPrayer.GetActivePrayers(): TRSPrayerSet;
```
Returns a set of all currently active prayers.

### Parameters:
- None

### Returns:
- A `TRSPrayerSet` containing all active prayers.

### Example:
```pascal
WriteLn(Prayer.GetActivePrayers());
```
*)
function TRSPrayer.GetActivePrayers(): TRSPrayerSet;
var
  prayer: ERSPrayer;
begin
  for prayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.IsActive([prayer]) then
      Result += prayer;
end;

(*
## Prayer.Activate
```pascal
function TRSPrayer.Activate(prayers: TRSPrayerSet): Boolean;
```
Attempts to activate the specified prayers.

### Parameters:
- `prayers`: A set of prayers to activate.

### Returns:
- True if all specified prayers were successfully activated.
- False if any prayer could not be activated.

### Example:
```pascal
if Prayer.Activate([ERSPrayer.PIETY, ERSPrayer.PROTECT_FROM_MELEE]) then
  WriteLn('Prayers activated successfully')
else
  WriteLn('Failed to activate prayers');
```
*)
function TRSPrayer.Activate(prayers: TRSPrayerSet): Boolean;
var
  prayer: ERSPrayer;
  activatedPrayers: TRSPrayerSet;
begin
  Result := True;
  if not Self.IsOpen then
    Exit(False);

  for prayer in prayers do
  begin
    if Self.IsActive([prayer]) then
      Continue;

    if Self.CanActivate(prayer) and Self.Click(prayer) then
      activatedPrayers += prayer
    else
      Result := False;
  end;

  Result := Result and SleepUntil(Self.IsActive(activatedPrayers), 100, 2000);
end;

(*
## Prayer.Deactivate
```pascal
function TRSPrayer.Deactivate(prayers: TRSPrayerSet): Boolean;
```
Attempts to deactivate the specified prayers.

### Parameters:
- `prayers`: A set of prayers to deactivate.

### Returns:
- True if all specified prayers were successfully deactivated.
- False if any prayer could not be deactivated.

### Example:
```pascal
if Prayer.Deactivate([ERSPrayer.PIETY, ERSPrayer.PROTECT_FROM_MELEE]) then
  WriteLn('Prayers deactivated successfully')
else
  WriteLn('Failed to deactivate prayers');
```
*)
function TRSPrayer.Deactivate(prayers: TRSPrayerSet): Boolean;
var
  prayer: ERSPrayer;
  emptyPrayerSet: TRSPrayerSet;
begin
  Result := True;
  if not Self.IsOpen() then
    Exit;

  for prayer in prayers do
  begin
    if not Self.IsActive([prayer]) then
      Continue;
    Result := Result and Self.Click(prayer);
  end;

  Result := Result and SleepUntil(((Self.GetActivePrayers() * prayers) = emptyPrayerSet), 100, 2000);
end;

var
  Prayer: TRSPrayer;
