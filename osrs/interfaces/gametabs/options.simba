(*
# Options
Methods to interact with the options gametab.
*)

{$DEFINE SRLT_OPTIONS_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

type
(*
## Options Enums
```pascal
ERSOptionsTab = (CONTROLS, AUDIO, DISPLAY);
ERSOptionsSlider = (BRIGHTNESS, ZOOM);
ERSOptionsButton = (AID, RUN, HOUSE, BOND);
ERSHouseOptionsButton = (CLOSE, VIEWER, EXPEL, SERVANT, LEAVE);
```
It should be self explanatory what they represent.
*)
  ERSOptionsTab = (CONTROLS, AUDIO, DISPLAY);
  ERSOptionsSlider = (BRIGHTNESS, ZOOM);
  ERSOptionsButton = (AID, RUN, HOUSE, BOND);
  ERSHouseOptionsButton = (CLOSE, VIEWER, EXPEL, SERVANT, LEAVE);

(*
(TRSOptions)=
## type TRSOptions
Main record responsible with interacting with the options gametab.
*)
  TRSOptions = record
    Tabs: TBoxArray;
    Sliders: array [ERSOptionsSlider] of TRSSlider;
    Buttons, HouseButtons: TRSButtonArray;
    ZoomLevel: Integer;
  end;

(*
## Options.SetupInterface
```pascal
procedure TRSOptions.SetupInterface();
```
Internal method used to setup the gametab coordinates.
*)
procedure TRSOptions.SetupInterface();
begin
  Self.Tabs := TBoxArray.Create(GameTab.TopLeft.Offset(0, 5), 3, 1, 55, 24, [9,0]);

  with Self.Sliders[ERSOptionsSlider.BRIGHTNESS] do
  begin
    Bounds.X1 := GameTab.Bounds.X1 + 57;
    Bounds.Y1 := GameTab.Bounds.Y1 + 72;
    Bounds.X2 := Bounds.X1 + 96;
    Bounds.Y2 := Bounds.Y1 + 9;
    Color := 2040359;
    Width := Bounds.Width - 1;
  end;

  with Self.Sliders[ERSOptionsSlider.ZOOM] do
  begin
    Bounds.X1 := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Bounds.X1;
    Bounds.Y1 := GameTab.Bounds.Y1 + 109;
    Bounds.X2 := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Bounds.X2;
    Bounds.Y2 := Bounds.Y1 + 9;
    Color := 2106152;
    Width := Bounds.Width - 1;
  end;
end;


(*
## Options.IsOpen
```pascal
function TRSOptions.IsOpen(): Boolean;
```
Returns true/false if the options gametab is open or not.

Example:
```pascal
WriteLn Options.IsOpen();
```
*)
function TRSOptions.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.OPTIONS);
end;

(*
## Options.Open
```pascal
function TRSOptions.Open(): Boolean;
```
Attempts to open the options gametab.

Example:
```pascal
WriteLn Options.Open();
```
*)
function TRSOptions.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.OPTIONS);
end;


(*
## Options.IsHouseOptionsOpen
```pascal
function TRSOptions.IsHouseOptionsOpen(): Boolean;
```
Returns True/False on whether the house options are open on the gametab.

Example:
```pascal
WriteLn Options.IsHouseOptionsOpen();
```
*)
function TRSOptions.IsHouseOptionsOpen(): Boolean;
begin
  //TODO:
  //Result := SRL.CountColor(CTS2(4630611, 23, 0.04, 0.79), Self.Bounds) = 148;
end;

(*
## Options.OpenHouseOptions
```pascal
function TRSOptions.OpenHouseOptions(): Boolean;
```
Attempts to open the house options.

Example:
```pascal
WriteLn Options.OpenHouseOptions();
```
*)
function TRSOptions.OpenHouseOptions(): Boolean;
begin
  if Self.IsHouseOptionsOpen() then Exit(True);
  if not Self.Open() or not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;

  Self.Buttons[ERSOptionsButton.HOUSE].Click();
  Result := SleepUntil(Self.IsHouseOptionsOpen(), RandomMode(100, 50, 1500), 600);
end;

(*
## Options.CloseHouseOptions
```pascal
function TRSOptions.CloseHouseOptions(): Boolean;
```
Attempts to close the house options.

Example:
```pascal
WriteLn Options.CloseHouseOptions();
```
*)
function TRSOptions.CloseHouseOptions(): Boolean;
begin
  if not Self.IsHouseOptionsOpen() then Exit(True);
  Self.HouseButtons[ERSHouseOptionsButton.CLOSE].Click();
  Result := SleepUntil(not Self.IsHouseOptionsOpen(), RandomMode(100, 50, 1500), 600);
end;


(*
## Options.GetTab
```pascal
function TRSOptions.GetTab(): ERSOptionsTab;
```
Returns the currently active `ERSOptionsTab`.

Example:
```pascal
WriteLn Options.GetTab();
```
*)
function TRSOptions.GetTab(): ERSOptionsTab;
var
  tab: ERSOptionsTab;
begin
  for tab := Low(ERSOptionsTab) to High(ERSOptionsTab) do
    if not Target.HasColor($48585D, 0, 50, Self.Tabs[tab]) and
       not Target.HasColor($1E2528, 0, 50, Self.Tabs[tab]) then //transparent bg
      Exit(tab);
end;

(*
## Options.OpenTab
```pascal
function TRSOptions.OpenTab(tab: ERSOptionsTab): Boolean;
```
Attempts to open the specified `tab` `ERSOptionsTab`.

Example:
```pascal
WriteLn Options.OpenTab(ERSOptionsTab.DISPLAY);
```
*)
function TRSOptions.OpenTab(tab: ERSOptionsTab): Boolean;
begin
  if not Self.Open() then Exit;
  if not Self.CloseHouseOptions() then Exit;
  if Self.GetTab() = tab then Exit(True);

  Mouse.Click(Self.Tabs[tab], EMouseButton.LEFT);
  Result := SleepUntil(Self.GetTab() = tab, RandomMode(100, 50, 1500), 600);
end;


(*
## Options.GetZoomLevel
```pascal
function TRSOptions.GetZoomLevel(useCache: Boolean = True): Integer;
```
Retrieves the current zoom level.
By default it uses the value cached in `TRSOptions.ZoomLevel` if it is already set.
If it's not set or if you decide to use this with `useCache` set to `False`,
`TRSOptions.ZoomLevel` will be updated with the value this returns.

Example:
```pascal
WriteLn Options.GetZoomLevel();
```
*)
function TRSOptions.GetZoomLevel(useCache: Boolean = True): Integer;
begin
  if useCache and (Self.ZoomLevel > -1) then
    Exit(Self.ZoomLevel);

  WriteLn GetDebugLn('Options', 'Unknown zoom level, reading from the gametab...');
  if Self.OpenTab(ERSOptionsTab.DISPLAY) then
    Self.ZoomLevel := Self.Sliders[ERSOptionsSlider.ZOOM].GetLevel();
  if Self.ZoomLevel = -1 then
    WriteLn GetDebugLn('Options', 'Failed to read zoom!', EErrorLevel.ERROR)
  else
    WriteLn GetDebugLn('Options', 'Current zoom level: ' + ToString(Self.ZoomLevel), EErrorLevel.SUCCESS);

  Result := Self.ZoomLevel;
end;

(*
## Options.SetZoomLevel
```pascal
function TRSOptions.SetZoomLevel(level: Integer): Boolean;
```
Sets a new zoom level through the options gametab.
If we successfully update the zoom level we update the cached
`TRSOptions.ZoomLevel`, if we don't, we reset it to `-1`.

Example:
```pascal
Options.SetZoomLevel(30);
```
*)
function TRSOptions.SetZoomLevel(level: Integer): Boolean;
begin
  Result := Self.Sliders[ERSOptionsSlider.ZOOM].SetLevel(level);

  if Result then
    Self.ZoomLevel := level
  else
    Self.ZoomLevel := -1;
end;

var
(*
(Options)=
## var Options
Global TRSOptions variable.
*)
  Options: TRSOptions;

begin
  Options.ZoomLevel := -1;
end;
