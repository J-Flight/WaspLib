(*
# Options
Methods to interact with the options gametab.
```{figure} ../../images/options.png
```
*)

{$DEFINE WL_OPTIONS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## ERSOptionsTab
```pascal
ERSOptionsTab = enum(CONTROLS, AUDIO, DISPLAY);
```
Enum representing each of the options tabs.
*)
  ERSOptionsTab = enum(CONTROLS, AUDIO, DISPLAY);

(*
## ERSOptionsSlider
```pascal
ERSOptionsSlider = enum(BRIGHTNESS, ZOOM);
```
Enum representing the 2 important sliders the options gametab has available.
Could be expanded in the future to include the sound sliders but for now only has this 2.
*)
  ERSOptionsSlider = enum(BRIGHTNESS, ZOOM);

(*
## ERSOptionsDropDown
```pascal
ERSOptionsDropDown = enum(PLAYER_ATTACK, NPC_ATTACK, CLIENT_MODE);
```
Enum representing each of the options gametab dropdowns.
*)
  ERSOptionsDropDown = enum(PLAYER_ATTACK, NPC_ATTACK, CLIENT_MODE);

(*
## ERSOptionsButton
```pascal
ERSOptionsButton = enum(AID, RUN, HOUSE, BOND, ALL_SETTINGS);
```
Enum representing each of the options gametab buttons.
*)
  ERSOptionsButton = enum(AID, RUN, HOUSE, BOND, ALL_SETTINGS);

(*
## TRSOptions
Main record responsible with interacting with the {ref}`Options` gametab.
*)
  TRSOptions = record
    Tabs: TBoxArray;
    Sliders: array [ERSOptionsSlider] of TRSSlider;
    DropDowns: array [ERSOptionsDropDown] of TRSDropDown;
    Buttons: array [ERSOptionsButton] of TRSButton;
    ZoomLevel: Integer;
    MaxBrightness, RoofsHidden: Boolean;
  end;

(*
## Options.SetupGameTab
```pascal
procedure TRSOptions.SetupGameTab();
```
Internal method used to setup the {ref}`TRSOptions` coordinates.

This is automatically called for you on the {ref}`Options variable`.
*)
procedure TRSOptions.SetupGameTab();
var
  boxes: TBoxArray;
  i: Integer;
begin
  Self.Tabs := TBoxArray.Create(GameTab.TopLeft.Offset(0, 5), 3, 1, 55, 24, [9,0]);

  with Self.Sliders[ERSOptionsSlider.BRIGHTNESS] do
  begin
    Bounds.X1 := GameTab.Bounds.X1 + 57;
    Bounds.Y1 := GameTab.Bounds.Y1 + 72;
    Bounds.X2 := Bounds.X1 + 96;
    Bounds.Y2 := Bounds.Y1 + 9;
    Color := 2040359;
    Width := Bounds.Width - 1;
  end;

  with Self.Sliders[ERSOptionsSlider.ZOOM] do
  begin
    Bounds.X1 := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Bounds.X1;
    Bounds.Y1 := GameTab.Bounds.Y1 + 109;
    Bounds.X2 := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Bounds.X2;
    Bounds.Y2 := Bounds.Y1 + 9;
    Color := 2106152;
    Width := Bounds.Width - 1;
  end;

  boxes := TBoxArray.Create(GameTab.BottomLeft.Offset(9, -85), 4, 1, 39, 39, [3,0]);

  for i := 0 to High(boxes) do
    Self.Buttons[i].Bounds := boxes[i];

  with GameTab.Bounds do
  begin
    Self.Buttons[4].Bounds := TBox.Create(X1 + 22, Y2 - 32, X2 - 22, Y2 - 3);

    Self.DropDowns[0].Bounds := [X1 + 11, Y1 + 111, X2 - 11, Y1 + 130];
    Self.DropDowns[0].Setup(['Depends on combat levels', 'Always right-click', 'Left-click where available', 'Hidden', 'Right-click for clanmates']);

    Self.DropDowns[1].Bounds := [X1 + 11, Y1 + 150, X2 - 11, Y1 + 169];
    Self.DropDowns[1].Setup(['Depends on combat levels', 'Always right-click', 'Left-click where available', 'Hidden']);

    Self.DropDowns[2].Bounds := [X1 + 11, Y2 - 109, X2 - 11, Y2 - 90];
    Self.DropDowns[2].Setup(['Fixed - Classic layout', 'Resizable - Classic layout', 'Resizable - Modern layout']);
  end;
end;

(*
## TRSOptions.Buttons
```pascal
Buttons: array [ERSOptionsButton] of TRSButton;
```
`TRSButton` for each of the {ref}`Options` buttons.

Example:
```pascal
ShowOnTarget(Options.Buttons);
```
```{figure} ../../images/options_buttons.png
```

You can also access each button with an index or, more conveniently, with a
{ref}`ERSHouseOptionsButton`.

Example:
```pascal
ShowOnTarget(Options.Buttons[ERSOptionsButton.HOUSE]);
```
```{figure} ../../images/options_button.png
```
*)

(*
## Options.IsOpen
```pascal
function TRSOptions.IsOpen(): Boolean;
```
Returns true/false if the options gametab is open or not.

Example:
```pascal
WriteLn Options.IsOpen();
```
*)
function TRSOptions.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.OPTIONS);
end;

(*
## Options.Open
```pascal
function TRSOptions.Open(): Boolean;
```
Attempts to open the options gametab.

Example:
```pascal
WriteLn Options.Open();
```
*)
function TRSOptions.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.OPTIONS);
end;


(*
## Options.GetTab
```pascal
function TRSOptions.GetTab(): ERSOptionsTab;
```
Returns the currently active {ref}`ERSOptionsTab`.

Example:
```pascal
WriteLn Options.GetTab();
```
*)
function TRSOptions.GetTab(): ERSOptionsTab;
var
  tab: ERSOptionsTab;
begin
  for tab := Low(ERSOptionsTab) to High(ERSOptionsTab) do
    if not Target.HasColor($48585D, 0, 50, Self.Tabs[tab]) and
       not Target.HasColor($1E2528, 0, 50, Self.Tabs[tab]) then //transparent bg
      Exit(tab);
end;

(*
## Options.OpenTab
```pascal
function TRSOptions.OpenTab(tab: ERSOptionsTab): Boolean;
```
Attempts to open the specified `tab` {ref}`ERSOptionsTab`.

Example:
```pascal
WriteLn Options.OpenTab(ERSOptionsTab.DISPLAY);
```
*)
function TRSOptions.OpenTab(tab: ERSOptionsTab): Boolean;
begin
  if not Self.Open() then Exit;
  if not HouseOptions.Close() then Exit;
  if Self.GetTab() = tab then Exit(True);

  Mouse.Click(Self.Tabs[tab], EMouseButton.LEFT);
  Result := SleepUntil(Self.GetTab() = tab, RandomMode(100, 50, 1500), 2000);
end;


(*
## Options.GetZoomLevel
```pascal
function TRSOptions.GetZoomLevel(useCache: Boolean = True): Integer;
```
Retrieves the current zoom level.
By default it uses the value cached in `TRSOptions.ZoomLevel` if it is already set.
If it's not set or if you decide to use this with `useCache` set to `False`,
`TRSOptions.ZoomLevel` will be updated with the value this returns.

Example:
```pascal
WriteLn Options.GetZoomLevel();
```
*)
function TRSOptions.GetZoomLevel(useCache: Boolean = True): Integer;
begin
  if useCache and (Self.ZoomLevel > -1) then
    Exit(Self.ZoomLevel);

  WriteLn GetDebugLn('Options', 'Unknown zoom level, reading from the gametab...');
  if Self.OpenTab(ERSOptionsTab.DISPLAY) then
    Self.ZoomLevel := Self.Sliders[ERSOptionsSlider.ZOOM].GetLevel();
  if Self.ZoomLevel = -1 then
    WriteLn GetDebugLn('Options', 'Failed to read zoom!', ELogLevel.ERROR)
  else
    WriteLn GetDebugLn('Options', 'Current zoom level: ' + ToString(Self.ZoomLevel), ELogLevel.SUCCESS);

  Result := Self.ZoomLevel;
end;

(*
## Options.SetZoomLevel
```pascal
function TRSOptions.SetZoomLevel(level: Integer): Boolean;
```
Sets a new zoom level through the options gametab.
If we successfully update the zoom level we update the cached
`TRSOptions.ZoomLevel`, if we don't, we reset it to `-1`.

Example:
```pascal
Options.SetZoomLevel(30);
```
*)
function TRSOptions.SetZoomLevel(level: Integer): Boolean;
begin
  if not Self.OpenTab(ERSOptionsTab.DISPLAY) then Exit;
  Result := Self.Sliders[ERSOptionsSlider.ZOOM].SetLevel(level);

  if Result then
    Self.ZoomLevel := level
  else
    Self.ZoomLevel := -1;
end;


(*
## Options.SetPlayerAttack
```pascal
function TRSOptions.SetPlayerAttack(index: Integer): Boolean;
function TRSOptions.SetPlayerAttack(option: String): Boolean; overload;
```
Attempts to set the specified attack option for players.

Example:
```pascal
WriteLn Options.SetPlayerAttack('Depends on combat levels');
WriteLn Options.SetPlayerAttack(2);
```
*)
function TRSOptions.SetPlayerAttack(index: Integer): Boolean;
begin
  if not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;
  Result := Self.DropDowns[ERSOptionsDropDown.PLAYER_ATTACK].Select(index);
end;

function TRSOptions.SetPlayerAttack(option: String): Boolean; overload;
begin
  if not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;
  Result := Self.DropDowns[ERSOptionsDropDown.PLAYER_ATTACK].Select(option);
end;


(*
## Options.SetNPCAttack
```pascal
function TRSOptions.SetNPCAttack(index: Integer): Boolean;
function TRSOptions.SetNPCAttack(option: String): Boolean; overload;
```
Attempts to set the specified attack option for NPCs.

Example:
```pascal
WriteLn Options.SetNPCAttack('Depends on combat levels');
WriteLn Options.SetNPCAttack(2);
```
*)
function TRSOptions.SetNPCAttack(index: Integer): Boolean;
begin
  if not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;
  Result := Self.DropDowns[ERSOptionsDropDown.NPC_ATTACK].Select(index);
end;

function TRSOptions.SetNPCAttack(option: String): Boolean; overload;
begin
  if not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;
  Result := Self.DropDowns[ERSOptionsDropDown.NPC_ATTACK].Select(option);
end;


(*
## Options.SetClientMode
```pascal
function TRSOptions.SetClientMode(mode: ERSMode): Boolean;
```
Attempts to set the specified `mode` client mode.

Example:
```pascal
WriteLn Options.SetClientMode('Fixed');
```
*)
function TRSOptions.SetClientMode(mode: ERSMode): Boolean;
begin
  if not Self.OpenTab(ERSOptionsTab.DISPLAY) then Exit;

  Result := Self.DropDowns[ERSOptionsDropDown.CLIENT_MODE].Select(Ord(mode)-1);
  if Result and RSClient.WaitModeChange(4000) then
    RSClient.IsLoggedIn(); //force trigger SetupInterfaces
end;


(*
## Options.RenderSelf
```pascal
TRSOptions.RenderSelf();
```
Writes "::renderself" on the chat and presses enter.

This toggles your character being rendered.

Example:
```pascal
Options.RenderSelf();
```
*)
procedure TRSOptions.RenderSelf();
begin
  if Chat.InputHasText() then Keyboard.PressKey(EKeyCode.RETURN);
  Keyboard.Send('::renderself', EKeyCode.RETURN);
end;


(*
## Options.GetRoofsState
```pascal
function TRSOptions.GetRoofsState(): Boolean;
```
Returns the roofs state.

Example:
```pascal
Options.GetRoofsState();
```
*)
function TRSOptions.GetRoofsState(): Boolean;
begin
  Result := RSCacheParser.RoofsHidden();
end;

(*
## Options.HideRoofs
```pascal
function TRSOptions.HideRoofs(): Boolean;
```
Attempts to hide roofs.

Example:
```pascal
Options.HideRoofs();
```
*)
function TRSOptions.HideRoofs(): Boolean;
begin
  if RSCacheParser.Disabled then Exit(True);

  if Self.GetRoofsState() then Exit(True);

  WriteLn GetDebugLn('Options', 'TODO: Finish HideRoofs with All Settings menu...', ELogLevel.ERROR);

  Result := SleepUntil(Self.GetRoofsState(), 100, 1200);

  if Result then Self.RoofsHidden := True
  else RSCacheParser.Disabled := True;
end;

(*
## Options.ShowRoofs
```pascal
function TRSOptions.ShowRoofs(): Boolean;
```
Attempts to show roofs.

Example:
```pascal
Options.ShowRoofs();
```
*)
function TRSOptions.ShowRoofs(): Boolean;
begin
  if RSCacheParser.Disabled then Exit(True);

  if not Self.GetRoofsState() then Exit(True);

  WriteLn GetDebugLn('Options', 'TODO: Finish ShowRoofs with All Settings menu...', ELogLevel.ERROR);

  Result := SleepUntil(not Self.GetRoofsState(), 100, 1200);

  if Result then Self.RoofsHidden := False
  else RSCacheParser.Disabled := True;
end;


(*
## Options.GetBrightness
```pascal
function TRSOptions.GetBrightness(): Integer;
```
Returns the current brightness level. By default it uses {ref}`RSCacheParser` for
this so it doesn't need to open the options tab.

Example:
```pascal
WriteLn Options.GetBrightness();
```
*)
function TRSOptions.GetBrightness(): Integer;
var
  tmp: Integer;
begin
  if RSCacheParser.Disabled then
  begin
    Result := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].GetLevel();
    Self.MaxBrightness := Result = 100;
    Exit;
  end;

  Result := RSCacheParser.Brightness();

  if Self.IsOpen() and (Self.GetTab() = ERSOptionsTab.DISPLAY) then
  begin
    tmp := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].GetLevel();
    if tmp <> Result then //parser is reading wrong file?
    begin
      RSCacheParser.Disabled := True;
      Result := tmp;
    end;
  end;

  Self.MaxBrightness := Result = 100;
end;

(*
## Options.SetMaxBrightness
```pascal
function TRSOptions.SetMaxBrightness(): Boolean;
```
Attempts to set your brightness to 100, which is the only value supported by WaspLib.

Example:
```pascal
WriteLn Options.SetMaxBrightness();
```
*)
function TRSOptions.SetMaxBrightness(): Boolean;
begin
  if Self.GetBrightness() = 100 then Exit(True);
  if not Self.OpenTab(ERSOptionsTab.DISPLAY) then Exit;

  with Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Bounds do
    Mouse.Click(Point(X2 + Random(3, 5), Random(Y1, Y2)), EMouseButton.LEFT);

  Result := Self.GetBrightness() = 100;
end;



var
(*
## Options variable
Global {ref}`TRSOptions` variable.
*)
  Options: TRSOptions;
