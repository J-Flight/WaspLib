

{$DEFINE WL_OPTIONS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type

  ERSOptionsTab = enum(CONTROLS, AUDIO, DISPLAY);


  ERSOptionsSlider = enum(BRIGHTNESS, ZOOM);


  ERSOptionsDropDown = enum(PLAYER_ATTACK, NPC_ATTACK, CLIENT_MODE);


  ERSOptionsButton = enum(AID, RUN, HOUSE, BOND, ALL_SETTINGS);


  TRSOptions = record
    Tabs: TBoxArray;
    Sliders: array [ERSOptionsSlider] of TRSSlider;
    DropDowns: array [ERSOptionsDropDown] of TRSDropDown;
    Buttons: array [ERSOptionsButton] of TRSButton;
    ZoomLevel: Integer;
    MaxBrightness, RoofsHidden: Boolean;
  end;


procedure TRSOptions.SetupGameTab();
var
  boxes: TBoxArray;
  i: Integer;
begin
  Self.Tabs := TBoxArray.Create(GameTab.TopLeft.Offset(0, 5), 3, 1, 55, 24, [9,0]);

  with Self.Sliders[ERSOptionsSlider.BRIGHTNESS] do
  begin
    Bounds.X1 := GameTab.Bounds.X1 + 57;
    Bounds.Y1 := GameTab.Bounds.Y1 + 72;
    Bounds.X2 := Bounds.X1 + 96;
    Bounds.Y2 := Bounds.Y1 + 9;
    Color := 2040359;
    Width := Bounds.Width - 1;
  end;

  with Self.Sliders[ERSOptionsSlider.ZOOM] do
  begin
    Bounds.X1 := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Bounds.X1;
    Bounds.Y1 := GameTab.Bounds.Y1 + 109;
    Bounds.X2 := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Bounds.X2;
    Bounds.Y2 := Bounds.Y1 + 9;
    Color := 2106152;
    Width := Bounds.Width - 1;
  end;

  boxes := TBoxArray.Create(GameTab.BottomLeft.Offset(9, -85), 4, 1, 39, 39, [3,0]);

  for i := 0 to High(boxes) do
    Self.Buttons[i].Bounds := boxes[i];

  with GameTab.Bounds do
  begin
    Self.Buttons[4].Bounds := TBox.Create(X1 + 22, Y2 - 32, X2 - 22, Y2 - 3);

    Self.DropDowns[0].Bounds := [X1 + 11, Y1 + 111, X2 - 11, Y1 + 130];
    Self.DropDowns[0].Setup(['Depends on combat levels', 'Always right-click', 'Left-click where available', 'Hidden', 'Right-click for clanmates']);

    Self.DropDowns[1].Bounds := [X1 + 11, Y1 + 150, X2 - 11, Y1 + 169];
    Self.DropDowns[1].Setup(['Depends on combat levels', 'Always right-click', 'Left-click where available', 'Hidden']);

    Self.DropDowns[2].Bounds := [X1 + 11, Y2 - 109, X2 - 11, Y2 - 90];
    Self.DropDowns[2].Setup(['Fixed - Classic layout', 'Resizable - Classic layout', 'Resizable - Modern layout']);
  end;
end;




function TRSOptions.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.OPTIONS);
end;


function TRSOptions.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.OPTIONS);
end;



function TRSOptions.GetTab(): ERSOptionsTab;
var
  tab: ERSOptionsTab;
begin
  for tab := Low(ERSOptionsTab) to High(ERSOptionsTab) do
    if not Target.HasColor($48585D, 0, 50, Self.Tabs[tab]) and
       not Target.HasColor($1E2528, 0, 50, Self.Tabs[tab]) then //transparent bg
      Exit(tab);
end;


function TRSOptions.OpenTab(tab: ERSOptionsTab): Boolean;
begin
  if not Self.Open() then Exit;
  if not HouseOptions.Close() then Exit;
  if Self.GetTab() = tab then Exit(True);

  Mouse.Click(Self.Tabs[tab], EMouseButton.LEFT);
  Result := SleepUntil(Self.GetTab() = tab, RandomMode(100, 50, 1500), 2000);
end;



function TRSOptions.GetZoomLevel(useCache: Boolean = True): Integer;
begin
  if useCache and (Self.ZoomLevel > -1) then
    Exit(Self.ZoomLevel);

  WriteLn GetDebugLn('Options', 'Unknown zoom level, reading from the gametab...');
  if Self.OpenTab(ERSOptionsTab.DISPLAY) then
    Self.ZoomLevel := Self.Sliders[ERSOptionsSlider.ZOOM].GetLevel();
  if Self.ZoomLevel = -1 then
    WriteLn GetDebugLn('Options', 'Failed to read zoom!', ELogLevel.ERROR)
  else
    WriteLn GetDebugLn('Options', 'Current zoom level: ' + ToString(Self.ZoomLevel), ELogLevel.SUCCESS);

  Result := Self.ZoomLevel;
end;


function TRSOptions.SetZoomLevel(level: Integer): Boolean;
begin
  if not Self.OpenTab(ERSOptionsTab.DISPLAY) then Exit;
  Result := Self.Sliders[ERSOptionsSlider.ZOOM].SetLevel(level);

  if Result then
    Self.ZoomLevel := level
  else
    Self.ZoomLevel := -1;
end;



function TRSOptions.SetPlayerAttack(index: Integer): Boolean;
begin
  if not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;
  Result := Self.DropDowns[ERSOptionsDropDown.PLAYER_ATTACK].Select(index);
end;

function TRSOptions.SetPlayerAttack(option: String): Boolean; overload;
begin
  if not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;
  Result := Self.DropDowns[ERSOptionsDropDown.PLAYER_ATTACK].Select(option);
end;



function TRSOptions.SetNPCAttack(index: Integer): Boolean;
begin
  if not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;
  Result := Self.DropDowns[ERSOptionsDropDown.NPC_ATTACK].Select(index);
end;

function TRSOptions.SetNPCAttack(option: String): Boolean; overload;
begin
  if not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;
  Result := Self.DropDowns[ERSOptionsDropDown.NPC_ATTACK].Select(option);
end;



function TRSOptions.SetClientMode(mode: ERSMode): Boolean;
begin
  if not Self.OpenTab(ERSOptionsTab.DISPLAY) then Exit;

  Result := Self.DropDowns[ERSOptionsDropDown.CLIENT_MODE].Select(Ord(mode)-1);
  if Result and RSClient.WaitModeChange(4000) then
    RSClient.IsLoggedIn(); //force trigger SetupInterfaces
end;



procedure TRSOptions.RenderSelf();
begin
  if Chat.InputHasText() then Keyboard.KeyPress(EKeyCode.RETURN);
  Keyboard.Send('::renderself', EKeyCode.RETURN);
end;



function TRSOptions.GetRoofsState(): Boolean;
begin
  Result := RSCacheParser.RoofsHidden();
end;


function TRSOptions.HideRoofs(): Boolean;
begin
  if RSCacheParser.Disabled then Exit(True);

  if Self.GetRoofsState() then Exit(True);

  WriteLn GetDebugLn('Options', 'TODO: Finish HideRoofs with All Settings menu...', ELogLevel.ERROR);

  Result := SleepUntil(Self.GetRoofsState(), 100, 1200);

  if Result then Self.RoofsHidden := True
  else RSCacheParser.Disabled := True;
end;


function TRSOptions.ShowRoofs(): Boolean;
begin
  if RSCacheParser.Disabled then Exit(True);

  if not Self.GetRoofsState() then Exit(True);

  WriteLn GetDebugLn('Options', 'TODO: Finish ShowRoofs with All Settings menu...', ELogLevel.ERROR);

  Result := SleepUntil(not Self.GetRoofsState(), 100, 1200);

  if Result then Self.RoofsHidden := False
  else RSCacheParser.Disabled := True;
end;



function TRSOptions.GetBrightness(): Integer;
var
  tmp: Integer;
begin
  if RSCacheParser.Disabled then
  begin
    Result := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].GetLevel();
    Self.MaxBrightness := Result = 100;
    Exit;
  end;

  Result := RSCacheParser.Brightness();

  if Self.IsOpen() and (Self.GetTab() = ERSOptionsTab.DISPLAY) then
  begin
    tmp := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].GetLevel();
    if tmp <> Result then //parser is reading wrong file?
    begin
      RSCacheParser.Disabled := True;
      Result := tmp;
    end;
  end;

  Self.MaxBrightness := Result = 100;
end;


function TRSOptions.SetMaxBrightness(): Boolean;
begin
  if Self.GetBrightness() = 100 then Exit(True);
  if not Self.OpenTab(ERSOptionsTab.DISPLAY) then Exit;

  with Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Bounds do
    Mouse.Click(Point(X2 + Random(3, 5), Random(Y1, Y2)), EMouseButton.LEFT);

  Result := Self.GetBrightness() = 100;
end;

var

  Options: TRSOptions;
