(*
# Equipment
Methods to interact with the Equipment gametab.
```{figure} ../../images/equipment.png
```
*)
{$DEFINE WL_EQUIPMENT_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}


type
(*
## ERSEquipment
```pascal
ERSEquipment = enum(HEAD, CAPE, NECK, AMMO, WEAPON, BODY, SHIELD, LEGS, HANDS, FEET, RING, SECONDARY_AMMO);
```
Enumerator of the equipment slots.
*)
  ERSEquipment = enum(
    HEAD, CAPE, NECK, AMMO, WEAPON, BODY, SHIELD, LEGS, HANDS, FEET, RING,
    SECONDARY_AMMO
  );

type
(*
## ERSEquipmentButton
```pascal
ERSEquipmentButton = (STATS, PRICES, DEATH, FOLLOWER);
```
Enumerator of the equipment buttons.
*)
  ERSEquipmentButton = enum(STATS, PRICES, DEATH, FOLLOWER);

(*
## TRSEquipment
Main record reponsible for handling the equipment gametab.
*)
  TRSEquipment = record
    Slots: TRSSlotInterface;
    Items: TRSItemInterface;
    SlotBoxes: TBoxArray;
    Buttons: array [ERSEquipmentButton] of TRSButton;
  end;

(*
## Equipment.SetupGameTab
```pascal
procedure TRSEquipment.SetupGameTab();
```
Internal method used to setup the {ref}`TRSEquipment` coordinates.

This is automatically called for you on the {ref}`Equipment variable`.
*)

function TRSEquipment.Open(): Boolean; forward;

{%codetools off}
function TRSEquipment.GetSlots(topLeft: TPoint): TBoxArray;
var
  tmp: TBox;
  i: Integer;
begin
  Result := TBoxArray.Create(topLeft.Offset(33, 5), 3,2, 35, 35, [6, 4]) +
            TBoxArray.Create(topLeft.Offset(18, 83), 3, 3, 35, 35, [21, 5]);

  Delete(Result, 0, 1);
  Delete(Result, 8, 1);
  Delete(Result, 9, 1);

  //moving the boxes around so they match ERSGear order.
  tmp := Result[1];
  for i := 1 to High(Result) - 1 do
    Result[i] := Result[i + 1];
  Result[High(Result)] := tmp;
end;
{%codetools on}


procedure TRSEquipment.SetupGameTab();
var
  btns: TBoxArray;
  i: Integer;
begin
  Self.SlotBoxes := Self.GetSlots(GameTab.TopLeft);

  Self.Slots.Setup('Equipment.Slots', Self.SlotBoxes);
  Self.Items.Setup('Equipment.Items', @Self.Slots, [2, 2], @Self.Open);

  btns := TBoxArray.Create(GameTab.BottomLeft.Offset(4, -52), 4, 1, 39, 39, [6,0]);

  for i := 0 to 3 do
  begin
    Self.Buttons[i].EnabledColors := [];
    Self.Buttons[i].Bounds := btns[i];
  end;
end;

(*
## Equipment.IsOpen
```pascal
function TRSEquipment.IsOpen(): Boolean;
```
Returns True/False whether the equipment tab is open or not.

Example:
```pascal
WriteLn Equipment.IsOpen();
```
*)
function TRSEquipment.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.EQUIPMENT);
end;

(*
## Equipment.Open
```pascal
function TRSEquipment.Open(): Boolean;
```
Attempts to open the equipment tab.
Returns true if we succeed.

Example:
```pascal
WriteLn Equipment.Open();
```
*)
function TRSEquipment.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.EQUIPMENT);
end;

var
(*
## Equipment variable
Global {ref}`TRSEquipment` variable.
*)
  Equipment: TRSEquipment;
