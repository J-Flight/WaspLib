(*
# Prayer
Methods to interact with the prayer gametab.
*)

{$DEFINE SRLT_PRAYER2_INCLUDED}
{$IFNDEF SRLT_OSRS}
  {$I SRLT/osrs.simba}
{$ENDIF}


type
  TRSPrayer2 = record
    Slots: TBoxArray;
    Prayers: array [ERSPrayer2] of TBox;
  end;

(*
## Prayer.SetupAlignment
```pascal
procedure TRSPrayer.SetupAlignment(); overload;
```
Setups up the interface aligment for the current client mode.

```{note}
This is automatically called on the **TRSClient.ClientModeChanged** function.
```
*)
procedure TRSPrayer2.SetupInterface();
begin
  Self.Slots := TBoxArray.Create(GameTab.Bounds.TopLeft.Offset(1,10), 5, 6, 33, 33, [4, 4]);
end;


(*
## Prayer.IsOpen
```pascal
function TRSPrayerTab.IsOpen(): Boolean;
```
Returns true if the Prayer tab is open.

Example:
```pascal
WriteLn Prayer.IsOpen();
```
*)
function TRSPrayer2.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.PRAYER);
end;

function TRSPrayer2.Open(): boolean;
begin
  Result := GameTabs.Open(ERSGameTab.PRAYER);
end;


(*
## Magic.FindSpell
```pascal
function TRSMagic.FindSpell(spell: ERSSpell; out box: TBox): Boolean;
```
Return true or false wether we found a spell or not and return it's bounds if found.
*)
function TRSPrayer2.FindPrayer(pray: ERSPrayer2; out b: TBox): Boolean;
var
  match: TImageMatch;
begin
  if not Self.IsOpen() then Exit;

  Result := PrayerFinder2.Find([pray], Self.Slots, match);
  if Result then
  begin
    b := match.Box.Expand(-1);
    Self.Prayers[pray] := b;
    Exit;
  end;
end;

(*
## Prayer.CanActivate
```pascal
function TRSMagic.ContainsSpell(spell: ERSSpell): Boolean;
```
Return true or false wether we found a spell or not.
*)
function TRSPrayer2.CanActivate(pray: ERSPrayer2): Boolean;
var
  b: TBox;
begin
  Result := Self.FindPrayer(pray, b);
end;




var
  Prayer2: TRSPrayer2;
