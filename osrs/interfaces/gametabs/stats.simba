
{$DEFINE WL_STATS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type

  ERSSkill = enum(
    ATTACK, HITPOINTS, MINING,
    STRENGTH, AGILITY, SMITHING,
    DEFENCE, HERBLORE, FISHING,
    RANGED, THIEVING, COOKING,
    PRAYER, CRAFTING, FIREMAKING,
    MAGIC, FLETCHING, WOODCUTTING,
    RUNECRAFTING, SLAYER, FARMING,
    CONSTRUCTION, HUNTER, TOTAL
  );


  TRSSkillInfo = record
    Level:     Integer;
    XP:        Integer;
    Next:      Integer;
    Remainder: Integer;
  end;


  TRSStats = record
    Levels: array [ERSSkill] of Integer;
    Skills: TBoxArray;
  end;


procedure TRSStats.SetupGameTab();
begin
  Self.Skills := TBoxArray.Create(GameTab.TopLeft.Offset(2, 6), 3, 8, 53, 23, [10, 9]);
end;




function TRSStats.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.STATS);
end;


function TRSStats.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.STATS);
end;


function TRSStats.Hover(skill: ERSSkill): Boolean;
begin
  Result := Self.Open();
  if Result then
    Mouse.Move(Self.Skills[skill]);
end;



function TRSStats.FindSkillInfo(skill: ERSSkill; out skillInfo: TRSSkillInfo): Boolean;
var
  tpa: TPointArray;
  lines: TStringArray;
  b: TBox;
  i: Integer;
begin
  tpa := Target.FindColor($A0FFFF, 0, GameTab.Bounds);
  if tpa = [] then Exit;

  b := tpa.Bounds();
  SetLength(lines, b.Height div 12);
  if lines = [] then Exit;

  for i := 0 to High(lines) do
    lines[i] := OCR.Recognize([b.X1, b.Y1 + (i * 12), b.X2, b.Y1 + ((i+1) * 12) + 3], RSFonts.PLAIN_12, [0], 0);

  if not (ToStr(skill).Capitalize() in lines[0]) then Exit;

  skillInfo.XP := lines[0].ExtractInteger(0);
  skillInfo.Level := XP2Level(skillInfo.XP);

  if Length(lines) = 3 then
  begin
    skillInfo.Next := lines[1].ExtractInteger(0);
    skillInfo.Remainder := lines[2].ExtractInteger(0);
  end;

  Result := True;
end;


function TRSStats.GetSkillInfo(skill: ERSSkill; time: Integer = 1000): TRSSkillInfo;
begin
  if not Self.Hover(skill) then Exit;
  SleepUntil(Self.FindSkillInfo(skill, Result), RandomMode(100, 50, 1500) , time);
end;



function TRSStats.GetLevel(skill: ERSSkill; useCache: Boolean = True): Integer;
begin
  if useCache then
  begin
    Result := Self.Levels[skill];
    if Result > 0 then Exit;
  end;

  if not Self.Open() then Exit(-1);

  with Self.Skills[skill] do
    Result := OCR.RecognizeNumber([X1, Y2 - (Height div 2), X2, Y2], RSFonts.PLAIN_11, [RSColors.STACK_YELLOW], 0);

  if Result > 0 then
    Self.Levels[skill] := Result;
end;


procedure TRSStats.CacheStats();
var
  i: Integer;
begin
  for i := 0 to Ord(High(ERSSkill)) do
    Self.GetLevel(ERSSkill(i), False);
end;


procedure TRSStats.IncrementCachedLevel(skill: ERSSkill);
begin
  if Self.Levels[skill] > 0 then Self.Levels[skill] += 1;
end;

var

  Stats: TRSStats;
