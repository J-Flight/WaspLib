
{$DEFINE WL_WORLDSWITCHER_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type

  ERSWorldSwitcherButton = enum(CONFIGURE, CLOSE, LOGOUT);


  TRSWorld = record
    Number: Integer;
    Bounds: TBox;
  end;

  TRSWorldArray = array of TRSWorld;

procedure ShowOnTarget(worlds: TRSWorldArray); overload;
var
  img: TImage;
  i: Integer;
begin
  img := Target.GetImage();

  img.DrawColor := $FFFFFF;
  for i := 0 to High(worlds) do
  begin
    WriteLn worlds[i].Number;
    img.DrawBox(worlds[i].Bounds);
  end;

  img.Show();
end;

type

  TRSWorldSwitcher = record
    Scroll: TRSScrollBar;
    Cooldown: TCountDown;
    CurrentWorldBounds, SortArrow: TBox;
    Buttons: array [ERSWorldSwitcherButton] of TRSButton;
    const SILVER: TColor = $E0E0E0;
    const YELLOW: TColor = $00F0F0;
  end;


procedure TRSWorldSwitcher.SetupGameTab();
begin
  with GameTab.Bounds do
  begin
    Self.CurrentWorldBounds.X1 := X2 - 52;
    Self.CurrentWorldBounds.Y1 := Y1 + 4;
    Self.CurrentWorldBounds.X2 := X2 - 25;
    Self.CurrentWorldBounds.Y2 := Y1 + 17;

    Self.Buttons[ERSWorldSwitcherButton.CONFIGURE].Bounds.X1 := X1;
    Self.Buttons[ERSWorldSwitcherButton.CONFIGURE].Bounds.Y1 := Y1 + 4;
    Self.Buttons[ERSWorldSwitcherButton.CONFIGURE].Bounds.X2 := X1 + 15;
    Self.Buttons[ERSWorldSwitcherButton.CONFIGURE].Bounds.Y2 := Y1 + 19;

    Self.Buttons[ERSWorldSwitcherButton.CLOSE].Bounds.X1 := X2 - 17;
    Self.Buttons[ERSWorldSwitcherButton.CLOSE].Bounds.Y1 := Y1 + 2;
    Self.Buttons[ERSWorldSwitcherButton.CLOSE].Bounds.X2 := X2 + 3;
    Self.Buttons[ERSWorldSwitcherButton.CLOSE].Bounds.Y2 := Y1 + 22;

    Self.Buttons[ERSWorldSwitcherButton.LOGOUT].Bounds.X1 := X2 - 19;
    Self.Buttons[ERSWorldSwitcherButton.LOGOUT].Bounds.Y1 := Y2 - 30;
    Self.Buttons[ERSWorldSwitcherButton.LOGOUT].Bounds.X2 := X2 + 1;
    Self.Buttons[ERSWorldSwitcherButton.LOGOUT].Bounds.Y2 := Y2 - 1;

    Self.SortArrow.X1 := X1 + 18;
    Self.SortArrow.Y1 := Y1 + 25;
    Self.SortArrow.X2 := X1 + 34;
    Self.SortArrow.Y2 := Y1 + 35;

    Self.Scroll.Area.X1 := X1 - 3;
    Self.Scroll.Area.Y1 := Y1 + 36;
    Self.Scroll.Area.X2 := X2 - 13;
    Self.Scroll.Area.Y2 := Y2 - 33;
  end;

  Self.Scroll.Setup();
end;


{%codetools off}
function TRSWorldSwitcher._IsOpen(): Boolean;
begin
  Result := Target.HasColor($0C0E10, 3, 134, Self.Buttons[ERSWorldSwitcherButton.CLOSE].Bounds);
end;
{%codetools on}


function TRSWorldSwitcher.IsOpen(): Boolean;
begin
  Result := GameTabs.IsOpen(ERSGameTab.LOGOUT) and Self._IsOpen();
end;



function TRSWorldSwitcher.IsLoading(): Boolean;
begin
  Result := not Target.HasColor(RSColors.TEXT_ORANGE, 0, 1, Self.CurrentWorldBounds);
end;


function TRSWorldSwitcher.WaitLoading(time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(not Self.IsLoading(), interval, time);
end;


function TRSWorldSwitcher.Open(waitLoad: Boolean = True): Boolean;
begin
  //overriden in TRSLogout.
  Result := SleepUntil(not Self._IsOpen(), RandomMode(100, 50, 1500), 600);
  if Result and waitLoad then
    Self.WaitLoading();
end;




function TRSWorldSwitcher.Close(): Boolean;
begin
  if not Self.IsOpen() then Exit(True);
  Self.Buttons[ERSWorldSwitcherButton.CLOSE].Click();
  Result := SleepUntil(not Self._IsOpen(), RandomMode(100, 50, 1500), 600);
end;


function TRSWorldSwitcher.Logout(attempts: UInt32 = 5; time: UInt32 = 20000): Boolean;
var
  i: Integer;
  interval: UInt32;
begin
  if not Self.IsOpen() then Exit;
  interval := time div attempts;

  if Keyboard.LastKey = EKeyCode.RETURN then
    Keyboard.RandomKey();  //unlock enter if using remote input

  for i := 1 to attempts do
  begin
    Self.Buttons[ERSWorldSwitcherButton.LOGOUT].Click();
    if SleepUntil(not RSClient.IsLoggedIn(), 500, interval + Random(-2000, 2000)) then
      Exit(True);
  end;
end;



function TRSWorldSwitcher.GetCurrentWorld(): Integer;
begin
  Result := OCR.RecognizeNumber(Self.CurrentWorldBounds, RSFonts.BOLD, [RSColors.TEXT_ORANGE], 0);
end;


function TRSWorldSwitcher.GetWorlds(): TRSWorldArray;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  weights: TIntegerArray;
  world: TRSWorld;
begin
  tpa := Target.FindColor(Self.SILVER, 0, Self.Scroll.Area) +
         Target.FindColor(Self.YELLOW, 0, Self.Scroll.Area);

  atpa := tpa.Cluster(5, 1.5);
  for tpa in atpa do
    with tpa.Bounds() do
    begin
      if Height <> 10 then Continue;

      world.Number := OCR.RecognizeNumber([X1-3, Y1-2, X2+3, Y2+2], RSFonts.PLAIN_12, [Self.SILVER, Self.YELLOW], 0);
      if world.Number = -1 then Continue;

      world.Bounds := [Self.Scroll.Area.X1, Y1-2, Self.Scroll.Area.X2, Y2+3];

      weights += Y1;
      Result += World;
    end;

  Result.Sort(weights, True);
end;


function TRSWorldSwitcher.FindWorld(number: Integer; out world: TRSWorld): Boolean;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
begin
  tpa := Target.FindColor(Self.SILVER, 0, Self.Scroll.Area) +
         Target.FindColor(Self.YELLOW, 0, Self.Scroll.Area);

  atpa := tpa.Cluster(5, 1.5);
  for tpa in atpa do
    with tpa.Bounds() do
    begin
      if Height <> 10 then Continue;

      world.Number := OCR.RecognizeNumber([X1-3, Y1-2, X2+3, Y2+2], RSFonts.PLAIN_12, [Self.SILVER, Self.YELLOW], 0);
      if world.Number <> number then Continue;

      world.Bounds := [Self.Scroll.Area.X1, Y1-2, Self.Scroll.Area.X2, Y2+3];
      Exit(True);
    end;
end;


function TRSWorldSwitcher.IsSorted(): Boolean;
var
  arrow : TPointArray;
begin
  arrow := Target.FindColor(
           ColorTolerance($0A5DA3, 0.781, EColorSpace.HSV, [2.366, 0.472, 0.164]),
           Self.SortArrow
         );
  Result := Self.SortArrow.Center = arrow.Mean();
end;


function TRSWorldSwitcher.Sort(): Boolean;
begin
  if not Self.IsOpen() then Exit;
  if Self.IsSorted() then Exit(True);
  Mouse.Click(Self.SortArrow, EMouseButton.LEFT);
  Result := SleepUntil(Self.IsSorted(), 50, 600);
end;


function TRSWorldSwitcher.WaitSwitch(world: Integer; failCooldown: Boolean = True): Boolean;
begin
  if not SleepUntil(MainScreen.IsServerMessage('Please wait'), 50, 600) then
  begin
    if failCooldown then Self.Cooldown.Restart(0, 7000);
    Exit;
  end;

  Result := SleepUntil(Self.GetCurrentWorld() = world, 200, 10000);
end;


function TRSWorldSwitcher.Hop(worlds: TIntegerArray): Boolean;
var
  current, next: Integer;
  available: TRSWorldArray;
  world: TRSWorld;
begin
  if worlds = [] then
    raise GetDebugLn('WorldSwitcher', 'worlds is empty.');
  if not Self.Cooldown.IsFinished then Exit;
  if not Self.Open() then Exit;

  current := Self.GetCurrentWorld();
  if worlds = [current] then Exit(True);
  if not Self.IsSorted() and not Self.Sort() then Exit;

  next := worlds.IndexOf(current) + 1;
  if next > High(worlds) then next := 0;

  repeat
    available := Self.GetWorlds();
    if available = [] then Exit;

    for world in available do
      if world.Number = next then
      begin
        Mouse.Click(world.Bounds, EMouseButton.LEFT);
        if Self.WaitSwitch(next) then
          Exit(True);
      end;

    Self.Scroll.Scroll(Biometrics.RandomModeInteger(2,1,3), next > available[0].Number);
  until not InRange(Self.Scroll.GetLevel(), 1, 99);
end;

var

  WorldSwitcher: TRSWorldSwitcher;
