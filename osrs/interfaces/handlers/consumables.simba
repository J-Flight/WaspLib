(*
# ConsumeHandler
Manages consumable items like food and potions. It handles loading, inventory scanning, and consumption logic with cooldowns and effects.
*)
{$DEFINE WL_CONSUMABLES_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

(*
## type ERSConsumable
```pascal
type
  ERSConsumable = (
    FOOD, PRAYER, ENERGY, POISON, ANTI_FIRE, STRENGTH_BOOST, ATTACK_BOOST,
    DEFENCE_BOOST, RANGING_BOOST, MAGIC_BOOST
  );
```
Defines the categories of consumables available.
*)
type
  ERSConsumable = (
    FOOD, PRAYER, ENERGY, POISON, ANTI_FIRE, STRENGTH_BOOST, ATTACK_BOOST,
    DEFENCE_BOOST, RANGING_BOOST, MAGIC_BOOST
  );

(*
## type TRSConsumableItem
```pascal
  TRSConsumableItem = record
    Name: String;
    Category: ERSConsumable;
    CooldownMs: Int64;
    DurationMs: Int64;
    IsComboFood: Boolean;
    Points: Int64;
  end;
```
Represents a single consumable item with its properties.
*)
  TRSConsumableItem = record
    Name: String;
    Category: ERSConsumable;
    CooldownMs: Int64;
    DurationMs: Int64;
    IsComboFood: Boolean;
    Points: Int64;
  end;
  TRSConsumableItemArray = array of TRSConsumableItem;

(*
## type TRSConsumables
```pascal
  TRSConsumables = record
    Name: String;
    Consumables: TRSConsumableItemArray;
    IsSetup: Boolean;
    MinInvPoints: Int64;
    ActiveConsumables: TRSConsumableItemArray;
    Timers: array of TCountDown;
    CooldownTimers: array [ERSConsumable] of TCountDown;
  end;
```
Manages all aspects of item consumption.
*)
  TRSConsumables = record
    Name: String;
    Consumables: TRSConsumableItemArray;
    IsSetup: Boolean;
    MinInvPoints: Int64;
    ActiveConsumables: TRSConsumableItemArray;
    Timers: array of TCountDown;
    CooldownTimers: array [ERSConsumable] of TCountDown;
  end;
{%codetools off}
function TRSConsumables.CalculatePoints(itemJSON: TJSONItem; category: ERSConsumable): Int64;
var
  i: Integer;
  reqItem: TJSONItem;
  baseAmount: Int64;
  multiplier: Double;
  playerLevel: Int32;
  skill: ERSSkill;
  categoryStr, skillStr: String;
  found: Boolean;
begin
  Result := 0;

  if itemJSON.Has('level_requirements') and (itemJSON.Item['level_requirements'].Count > 0) then
  begin
    playerLevel := Stats.GetLevel(ERSSkill.HITPOINTS);

    if playerLevel <= 0 then
    begin
      if itemJSON.Has('base_amounts') then
        Result := itemJSON.Item['base_amounts'].AsInt;
      Exit;
    end;

    for i := 0 to itemJSON.Item['level_requirements'].Count - 1 do
    begin
      reqItem := itemJSON.Item['level_requirements'].Item[i];
      if playerLevel >= reqItem.Item['min_level'].AsInt then
      begin
        Result := Floor(playerLevel * reqItem.Item['multiplier'].AsFloat) + reqItem.Item['base_amount'].AsInt;
        Exit;
      end;
    end;
  end;

  if itemJSON.Has('base_amounts') then
  begin
    if itemJSON.Item['base_amounts'].Typ = EJSONType.ARR then
      baseAmount := itemJSON.Item['base_amounts'].Item[0].AsInt
    else
      baseAmount := itemJSON.Item['base_amounts'].AsInt;
    Result := baseAmount;

    if itemJSON.Has('multipliers') then
    begin
      if itemJSON.Item['multipliers'].Typ = EJSONType.ARR then
        multiplier := itemJSON.Item['multipliers'].Item[0].AsFloat
      else
        multiplier := itemJSON.Item['multipliers'].AsFloat;

      if (multiplier > 0) then
      begin
        categoryStr := ToStr(category).After('ERSConsumable.');
        if categoryStr = 'FOOD' then
          skillStr := 'HITPOINTS'
        else
          skillStr := categoryStr.Replace('_BOOST', '').Replace('RANGING', 'RANGED');

        for skill := Low(ERSSkill) to High(ERSSkill) do
          if ToStr(skill).After('ERSSkill.') = skillStr then
          begin
            playerLevel := Stats.GetLevel(skill);
            found := True;
            Break;
          end;

        if found and (playerLevel > 0) then
          Result := Floor(playerLevel * multiplier) + baseAmount;
      end;
    end;
  end;
end;

function TRSConsumables.LoadFromJSON(jsonData: TJSONItem): TRSConsumableItemArray;
var
  i: Integer;
  consumable: TRSConsumableItem;
  itemJSON: TJSONItem;
  categoryStr: String;
  enumCategory: ERSConsumable;
begin
  if (jsonData = nil) or (jsonData.Typ <> EJSONType.ARR) then
    Exit;
  Self.Name := 'Consumehandler';
  Stats.CacheStats();

  for i := 0 to jsonData.Count - 1 do
  begin
    itemJSON := jsonData.Item[i];
    consumable.Category := ERSConsumable(-1);

    if itemJSON.Has('category') then
    begin
      categoryStr := itemJSON.Item['category'].AsString.ToUpper();
      for enumCategory := Low(ERSConsumable) to High(ERSConsumable) do
        if ToStr(enumCategory).After('ERSConsumable.') = categoryStr then
        begin
          consumable.Category := enumCategory;
          Break;
        end;
    end;

    if consumable.Category = ERSConsumable(-1) then
      Continue;

    itemJSON.GetString('name', consumable.Name);
    itemJSON.GetInt('cooldown_ms', consumable.CooldownMs);
    itemJSON.GetInt('duration_ms', consumable.DurationMs);
    itemJSON.GetBool('combo_food', consumable.IsComboFood);
    consumable.Points := Self.CalculatePoints(itemJSON, consumable.Category);
    Result += consumable;
  end;
end;

function TRSConsumables._ScanInventory(consumableType: ERSConsumable; filterByType: Boolean): TRSConsumableItemArray;
var
  i, j: Integer;
  inventoryItems: TRSItemArray;
  consumableName, inventoryItemName: String;
  matchedConsumable: TRSConsumableItem;
  addedNames: TStringArray;
begin
  Self.Setup();

  if not Inventory.Open() then
    Logger.Warn('Cannot access inventory');

  try
    inventoryItems := Inventory.Items.DiscoverAll();
  except
    Logger.Warn('Could not discover inventory items');
    Exit;
  end;

  for j := 0 to High(inventoryItems) do
  begin
    inventoryItemName := inventoryItems[j].ToLower().Trim();
    if inventoryItemName.Contains('(') then
      inventoryItemName := inventoryItemName.Before('(').Trim();

    if addedNames.Contains(inventoryItemName) then
      Continue;

    for i := 0 to High(Self.Consumables) do
    begin
      if filterByType and (Self.Consumables[i].Category <> consumableType) then
        Continue;

      consumableName := Self.Consumables[i].Name.ToLower().Trim();
      if consumableName.Contains('(') then
        consumableName := consumableName.Before('(').Trim();

      if consumableName = inventoryItemName then
      begin
        matchedConsumable := Self.Consumables[i];
        matchedConsumable.Name := inventoryItems[j];
        Result += matchedConsumable;
        addedNames += inventoryItemName;
        Break;
      end;
    end;
  end;
end;

procedure TRSConsumables._ClearExpiredConsumables();
var
  i: Integer;
begin
  for i := High(Self.Timers) downto 0 do
    if Self.Timers[i].IsFinished then
    begin
      Delete(Self.ActiveConsumables, i, 1);
      Delete(Self.Timers, i, 1);
    end;
end;

{%codetools on}
(*
## TRSConsumables.Setup
```pascal
procedure TRSConsumables.Setup();
```
Initializes the consume handler by loading data from `consumables.json`.
Must be called before other operations.
*)
procedure TRSConsumables.Setup();
var
  json: TJSONParser;
  consumableType: ERSConsumable;
begin
  if Self.IsSetup then Exit;

  for consumableType := Low(ERSConsumable) to High(ERSConsumable) do
    Self.CooldownTimers[consumableType].Start(0);

  json := new TJSONParser();
  json.Load(WLAssets.Consumables.Path);

  Self.Consumables := Self.LoadFromJSON(json);
  if Length(Self.Consumables) = 0 then
  begin
    FileDelete(WLEnv.AssetsDir + 'consumables' + PATH_SEP + 'consumables.json');
    Logger.Exception('Failed to parse consumables configuration');
  end;

  Self.IsSetup := True;
end;

(*
## TRSConsumables.Find
```pascal
function TRSConsumables.Find(consumableType: ERSConsumable): TRSConsumableItemArray;
```
Scans inventory for all consumables of a specific category.
*)
function TRSConsumables.Find(consumableType: ERSConsumable): TRSConsumableItemArray;
begin
  Result := Self._ScanInventory(consumableType, True);
end;

(*
## TRSConsumables.FindAll
```pascal
function TRSConsumables.FindAll(): TRSConsumableItemArray;
```
Scans inventory for all available consumables of any category.
*)
function TRSConsumables.FindAll(): TRSConsumableItemArray;
begin
  Result := Self._ScanInventory(ERSConsumable.FOOD, False);
end;

(*
## TRSConsumables.Count
```pascal
function TRSConsumables.Count(consumableType: ERSConsumable): Int32;
```
Counts the number of items of a specific consumable category in inventory.
*)
function TRSConsumables.Count(consumableType: ERSConsumable): Integer;
var
  i, j: Integer;
  inventoryItems: TRSItemArray;
  consumableName, inventoryItemName: String;
begin
  Self.Setup();

  if not Inventory.Open() then
    Exit;

  inventoryItems := Inventory.Items.DiscoverAll();

  for j := 0 to High(inventoryItems) do
  begin
    inventoryItemName := inventoryItems[j].ToLower().Trim();
    if inventoryItemName.Contains('(') then
      inventoryItemName := inventoryItemName.Before('(').Trim();

    for i := 0 to High(Self.Consumables) do
    begin
      if Self.Consumables[i].Category <> consumableType then
        Continue;

      consumableName := Self.Consumables[i].Name.ToLower().Trim();
      if consumableName.Contains('(') then
        consumableName := consumableName.Before('(').Trim();

      if consumableName = inventoryItemName then
      begin
        Inc(Result);
        Break;
      end;
    end;
  end;
end;

(*
## TRSConsumables.Has
```pascal
function TRSConsumables.Has(consumableType: ERSConsumable): Boolean;
```
Checks if the inventory has at least one item of a specific category.
*)
function TRSConsumables.Has(consumableType: ERSConsumable): Boolean;
begin
  Result := Self.Count(consumableType) > 0;
end;

(*
## TRSConsumables.GetBest
```pascal
function TRSConsumables.GetBest(consumableType: ERSConsumable): TRSConsumableItem;
```
Finds the best consumable of a category from inventory based on `Points`.
*)
function TRSConsumables.GetBest(consumableType: ERSConsumable): TRSConsumableItem;
var
  availableConsumables: TRSConsumableItemArray;
  i: Integer;
begin
  availableConsumables := Self.Find(consumableType);

  if Length(availableConsumables) = 0 then
  begin
    Logger.Warn('No %s consumables found in inventory', [ToStr(consumableType)]);
    Exit;
  end;

  Result := availableConsumables[0];

  for i := 1 to High(availableConsumables) do
    if availableConsumables[i].Points > Result.Points then
      Result := availableConsumables[i];
end;

(*
## TRSConsumables.CanConsume
```pascal
function TRSConsumables.CanConsume(consumableType: ERSConsumable): Boolean;
```
Checks if a consumable can be used, considering active effects.
*)
function TRSConsumables.CanConsume(consumableType: ERSConsumable): Boolean;
var
  c: TRSConsumableItem;
begin
  Self._ClearExpiredConsumables();
  for c in Self.ActiveConsumables do
    if c.Category = consumableType then
      Exit(False);
  Result := True;
end;

(*
## TRSConsumables.HasEnoughPoints
```pascal
function TRSConsumables.HasEnoughPoints(consumableType: ERSConsumable): Boolean;
```
Checks if total points of a consumable type meet the `MinInvPoints` threshold.
*)
function TRSConsumables.HasEnoughPoints(consumableType: ERSConsumable): Boolean;
var
  consumables: TRSConsumableItemArray;
  c: TRSConsumableItem;
  totalPoints: Integer;
begin
  if Self.MinInvPoints <= 0 then Exit(True);

  consumables := Self.Find(consumableType);
  for c in consumables do
    totalPoints += c.Points * Inventory.Items.Count(c.Name);

  Result := totalPoints >= Self.MinInvPoints;
end;

(*
## TRSConsumables.Consume
```pascal
function TRSConsumables.Consume(consumableType: ERSConsumable; fastMouse: TMouse = Mouse; useFast: Boolean = False): Boolean;
```
Consumes the best item of a specified category from inventory.
*)
function TRSConsumables.Consume(consumableType: ERSConsumable; fast: Boolean = False): Boolean;
var
  consumable: TRSConsumableItem;
  slot: Integer;
  bounds: TBox;
  totalPixels: Integer;
begin
  if not Self.CooldownTimers[consumableType].IsFinished then Exit;
  if not Inventory.Open() then
    Exit;
    
  consumable := Self.GetBest(consumableType);
  if consumable.Name = '' then Exit;
  if not Inventory.Items.Find(consumable.Name, slot) then Exit;

  bounds := Inventory.Slots.Box(slot);
  totalPixels := bounds.Area;

  if fast then
  begin
    Target.Options.MouseSpeed   := Target.Options.MouseSpeed + 14;
    Target.Options.MouseGravity := Target.Options.MouseSpeed - 3;
    Target.Options.MouseWind    := Target.Options.MouseSpeed - 3;

    Inventory.Slots.Click(slot);
    Result := Round((Length(Target.GetPixelDifference(250, bounds)) / totalPixels) * 100) > 0;

    Target.Options.MouseSpeed   := Target.Options.MouseSpeed - 14;
    Target.Options.MouseGravity := Target.Options.MouseSpeed + 3;
    Target.Options.MouseWind    := Target.Options.MouseSpeed + 3;
  end
  else
  begin
    Inventory.Slots.Click(slot);
    Result := SleepUntil(Round((Length(Target.GetPixelDifference(250, bounds)) / totalPixels) * 100) > 0, 100, 1800);
  end;

  if not Result then Exit;

  Self.CooldownTimers[consumableType].Start(consumable.CooldownMs);
  if consumable.DurationMs > 0 then
  begin
    Self._ClearExpiredConsumables();
    Self.ActiveConsumables += consumable;
    Self.Timers.SetLength(Length(Self.Timers) + 1);
    Self.Timers[High(Self.Timers)].Start(consumable.DurationMs);
  end;
end;

var
  Consumables: TRSConsumables;
