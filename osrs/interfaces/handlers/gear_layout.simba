(*
# Gear Layouts
The `Gear Layouts` is a handler for OSRS gear.
"Gear" refers to as any equippable item in the game.

You can configure gear manually but the recommended way is to use {ref}`Gear Form`.
*)

{$DEFINE WL_GEAR_LAYOUTS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TRSGearItem
Alias type for a {ref}`TRSItem` that is equippable.
This doesn't have much use other than {ref}`GearItem.Interact` that comes next
which can be very handy.
*)
  TRSGearItem = type TRSItem;

(*
## GearItem.Interact
```pascal
function TRSGearItem.Interact(option: String = ''; attempts: Int32 = 2): Boolean;
```
Interact with the `TRSGearItem` regardless of it being on the {ref}`Inventory`
or {ref}`Equipment` with the least amount of gametab switches possible.

Example:
```pascal
ring.Interact('Rub');
```

Because {ref}`TRSGearItem` have few use cases, you are probably using
{ref}`TRSItem` instead.
You can still easily use this by casting:
```pascal
TRSGearItem(ring).Interact('Rub');
```
*)
function TRSGearItem.Interact(option: String = ''; attempts: Int32 = 2): Boolean;
var
  slot, i: Int32;
  slotsAPtr, slotsBPtr: ^TRSSlotInterface;
  itemsAPtr, itemsBPtr: ^TRSItemInterface;
  tabA, tabB: ERSGameTab;
begin
  tabA := GameTabs.GetCurrent();

  case tabA of
    ERSGameTab.INVENTORY:
      begin
        itemsAPtr := @Inventory.Items;
        itemsBPtr := @Equipment.Items;
        slotsAPtr := @Inventory.Slots;
        slotsBPtr := @Equipment.Slots;
        tabB := ERSGameTab.EQUIPMENT;
      end;
    ERSGameTab.EQUIPMENT:
      begin
        itemsAPtr := @Equipment.Items;
        itemsBPtr := @Inventory.Items;
        slotsAPtr := @Equipment.Slots;
        slotsBPtr := @Inventory.Slots;
        tabB := ERSGameTab.INVENTORY;
      end;
    else
      begin
        if not Inventory.Open() then Exit;
        Exit(Self.Interact(option));
      end;
  end;

  for i := 0 to 1 do
  begin
    slot := itemsAPtr^.IndexOf([Self]);
    if slot > -1 then
      Exit(slotsAPtr^.Interact(slot, option));

    Swap(slotsAPtr, slotsBPtr);
    Swap(itemsAPtr, itemsBPtr);
    Swap(tabA, tabB);
    if not GameTabs.Open(tabA) then Exit;
  end;

  if attempts > 0 then
    Result := Self.Interact(option, Dec(attempts));
end;

type
(*
## TRSGear
Type that represents a gear layout.
*)
  TRSGear = record
    Name: String;
    Items: array [ERSEquipment] of TRSItem;
  end;

(*
## Gear.ToJSON
```pascal
function TRSGear.ToJSON(): TJSONItem;
```
Convert the `TRSGear` into a `TJSONItem`.
*)
function TRSGear.ToJSON(): TJSONItem;
var
  slot: ERSEquipment;
begin
  Result := new TJSONObject();

  for slot := Low(ERSEquipment) to High(ERSEquipment) do
    Result.AddString(ToStr(slot).After('ERSEquipment.').ToLower(), Self.Items[slot]);
end;

type
(*
## TRSGearLayout
Main type for the {ref}`Gear Layouts`.
*)
  TRSGearLayout = record
    Gear: TRSGear;
    Equipped: array [ERSEquipment] of TRSItem;
  end;

(*
## GearLayout.Equip
```pascal
function TRSGearLayout.Equip(): Boolean;
```
Attempts to equip a `GearLayout`.
*)
function TRSGearLayout.Equip(): Boolean;
var
  slot: ERSEquipment;
  i: Integer;
  slots: TIntegerArray;
  items: TRSItemArray;
  nothing: array of ERSEquipment;
  slotMap: array [0..27] of ERSEquipment;
begin
  if Self.Equipped.Equals(Self.Gear.Items) then Exit(True);
  if not Inventory.Open() then Exit;

  for slot := Low(ERSEquipment) to High(ERSEquipment) do
  begin
    if Self.Equipped[slot] = Self.Gear.Items[slot] then
      Continue;
    if not Inventory.Items.Find(Self.Gear.Items[slot], i) then
      Exit;

    slots += i;
    case Self.Gear.Items[slot] of
      'Nothing': nothing += slot;
      'Anything': ;
      else
      begin
        items += Self.Gear.Items[slot];
        slotMap[i] := slot;
      end;
    end;
  end;

  slots := Inventory.RandomPattern().Intersection(slots);

  for i in slots do
  begin
    Inventory.Slots.Click(i, EMouseButton.LEFT);
    Self.Equipped[slotMap[i]] := Self.Gear.Items[slotMap[i]];
  end;

  Result := SleepUntil(not Inventory.Items.ContainsAny(items), 300, 2000);

  if not Equipment.Open() then Exit;

  for slot in nothing do
    if Equipment.Slots.IsUsed(Ord(slot)) then
      Equipment.Slots.Click(Ord(slot), EMouseButton.LEFT);
end;

(*
## GearLayout.Withdraw
```pascal
function TRSGearLayout.Withdraw(): Boolean;
```
Attempts to withdraw a `GearLayout` from the {ref}`Bank`.
*)
function TRSGearLayout.Withdraw(): Boolean;
var
  slot: ERSEquipment;
begin
  if Self.Equipped.Equals(Self.Gear.Items) then Exit(True);
  if not Bank.IsOpen() then Exit;

  for slot := Low(ERSEquipment) to High(ERSEquipment) do
  begin
    if Self.Equipped[slot] = Self.Gear.Items[slot] then
      Continue;
    if Inventory.Items.Contains(Self.Gear.Items[slot]) then
      Continue;

    if not Bank.Withdraw(Self.Gear.Items[slot], False, True) then
      Exit;
  end;

  Result := True;
end;
