{$DEFINE WL_PRAYER_FORM_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
  TRSPrayerForm = record
    OpenFormButton: TLazButton;
    Selected: TRSPrayerSet;
    Form: TLazForm;
    PrayerImages: array of TLazImage;
    const BACKGROUND_IMAGE = 'IMG:';
    const BACKGROUND_COLOR = $333C45;
    const HIGHLIGHT_COLOR = $6DB3CE;
  end;

function TRSPrayerForm._GetInterferingPrayers(prayer: ERSPrayer): TRSPrayerSet;
const
  GROUP_NONE     = 0; GROUP_ATTACK   = 1; GROUP_STRENGTH = 2; GROUP_DEFENCE  = 3;
  GROUP_RANGED   = 4; GROUP_MAGIC    = 5; GROUP_COMBO    = 6; GROUP_OVERHEAD = 7;

  PRAYER_GROUPS: array[GROUP_NONE..GROUP_OVERHEAD] of TRSPrayerSet = [
    [ERSPrayer.RAPID_HEAL, ERSPrayer.RAPID_RESTORE],
    [ERSPrayer.CLARITY_OF_THOUGHT, ERSPrayer.IMPROVED_REFLEXES, ERSPrayer.INCREDIBLE_REFLEXES],
    [ERSPrayer.BURST_OF_STRENGTH, ERSPrayer.SUPERHUMAN_STRENGTH, ERSPrayer.ULTIMATE_STRENGTH],
    [ERSPrayer.THICK_SKIN, ERSPrayer.ROCK_SKIN, ERSPrayer.STEEL_SKIN],
    [ERSPrayer.SHARP_EYE, ERSPrayer.HAWK_EYE, ERSPrayer.EAGLE_EYE],
    [ERSPrayer.MYSTIC_WILL, ERSPrayer.MYSTIC_LORE, ERSPrayer.MYSTIC_MIGHT],
    [ERSPrayer.CHIVALRY, ERSPrayer.PIETY, ERSPrayer.RIGOUR, ERSPrayer.AUGURY],
    [ERSPrayer.PROTECT_FROM_MAGIC, ERSPrayer.PROTECT_FROM_MISSILES, ERSPrayer.PROTECT_FROM_MELEE, ERSPrayer.REDEMPTION, ERSPrayer.SMITE, ERSPrayer.RETRIBUTION]
  ];
var
  group: Integer;
begin
  if prayer in PRAYER_GROUPS[GROUP_NONE] then
    Exit;

  for group := GROUP_ATTACK to GROUP_OVERHEAD do
    if prayer in PRAYER_GROUPS[group] then
      Break;

  if group > GROUP_OVERHEAD then
    Exit;

  case group of
    GROUP_ATTACK:   Result += PRAYER_GROUPS[GROUP_RANGED]
                           +  PRAYER_GROUPS[GROUP_MAGIC]
                           +  PRAYER_GROUPS[GROUP_COMBO];
    GROUP_STRENGTH: Result += PRAYER_GROUPS[GROUP_RANGED]
                           +  PRAYER_GROUPS[GROUP_MAGIC]
                           +  PRAYER_GROUPS[GROUP_COMBO];
    GROUP_DEFENCE:  Result += PRAYER_GROUPS[GROUP_COMBO];
    GROUP_RANGED:   Result += PRAYER_GROUPS[GROUP_ATTACK]
                           +  PRAYER_GROUPS[GROUP_STRENGTH]
                           +  PRAYER_GROUPS[GROUP_MAGIC]
                           +  PRAYER_GROUPS[GROUP_COMBO];
    GROUP_MAGIC:    Result += PRAYER_GROUPS[GROUP_ATTACK]
                           +  PRAYER_GROUPS[GROUP_STRENGTH]
                           +  PRAYER_GROUPS[GROUP_RANGED]
                           +  PRAYER_GROUPS[GROUP_COMBO];
    GROUP_COMBO:    Result += PRAYER_GROUPS[GROUP_ATTACK]
                           +  PRAYER_GROUPS[GROUP_STRENGTH]
                           +  PRAYER_GROUPS[GROUP_DEFENCE]
                           +  PRAYER_GROUPS[GROUP_RANGED]
                           +  PRAYER_GROUPS[GROUP_MAGIC];
  end;

  Result += PRAYER_GROUPS[group];
end;

procedure TRSPrayerForm._DrawPrayerCircle(p: ERSPrayer; color: TColor);
var
  img: TImage;
  sprite: TPointArray;
  highlight: TPointArray;
begin
  img := new TImage();
  img.FromLazBitmap(Self.PrayerImages[p].Picture.Bitmap);
  sprite := img.FindColor(TRSPrayerForm.BACKGROUND_COLOR, 0)
    + img.FindColor(TRSPrayerForm.HIGHLIGHT_COLOR, 0);
  sprite := sprite.Invert([0,0,img.Width-1, img.Height-1]);

  highlight := TPointArray.CreateFromCircle([img.Width div 2, img.Height div 2], img.Width div 2, True);
  highlight := highlight.Difference(sprite);

  img.DrawColor := color;
  img.DrawTPA(highlight);

  Self.PrayerImages[p].Picture.Bitmap := img.ToLazBitmap;
end;

procedure TRSPrayerForm._UpdateHint();
var
  hint: String;
  prayer: ERSPrayer;
begin
  for prayer in Self.Selected do
    hint += ToString(prayer).After('.').ToLower().Capitalize().Replace('_', ' ') + ', ';

  if hint.Length > 2 then
    SetLength(hint, hint.Length - 2);
  Self.OpenFormButton.Hint := hint;
end;

procedure TRSPrayerForm._Select(prayer: ERSPrayer);
begin
  Self._DrawPrayerCircle(prayer, TRSPrayerForm.HIGHLIGHT_COLOR);
  Self.Selected += prayer;
  Self._UpdateHint();
end;

procedure TRSPrayerForm._Deselect(prayer: ERSPrayer);
begin
  Self._DrawPrayerCircle(prayer, TRSPrayerForm.BACKGROUND_COLOR);
  Self.Selected := Self.Selected - [prayer];
  Self._UpdateHint();
end;

procedure TRSPrayerForm._OnPrayerClick(sender: TLazObject);
var
  prayerClicked, prayer: ERSPrayer;
begin
  prayerClicked :=  ERSPrayer(Self.PrayerImages.IndexOf(TLazImage(sender)));

  if prayerClicked in Self.Selected then
    Self._Deselect(prayerClicked)
  else
  begin
    for prayer in Self._GetInterferingPrayers(prayerClicked) do
      Self._Deselect(prayer);
    Self._Select(prayerClicked);
  end;
end;

{$H-}
procedure TRSPrayerForm._OnOpenFormButtonClick(sender: TLazObject);
begin
  Self.Form.Show();
end;

procedure TRSPrayerForm._OnSaveButtonClick(sender: TLazObject);
begin
  Self.Form.Hide();
end;
{$H+}

procedure TRSPrayerForm.SetSelected(prayers: TRSPrayerSet);
var
  prayer: ERSPrayer;
begin
  for prayer in ERSPrayer do
    Self._Deselect(prayer);

  for prayer in prayers do
   Self._Select(prayer);
end;

{$H-}
procedure TRSPrayerForm.Disable(prayers: ERSPrayer);
begin
  //TODO
end;
{$H+}

procedure TRSPrayerForm.Init(buttonParent: Pointer; buttonLeft, buttonTop: Integer);
var
  I: Integer;
  img: TImage;
  backgroundImage: TImage;
  background: TLazImage;
  saveButton: TLazButton;
begin
  backgroundImage := new TImage();
  backgroundImage.FromString(TRSPrayerForm.BACKGROUND_IMAGE);

  Self.Form := TLazForm.Create(TLazComponent(buttonParent));
  Self.Form.Width := backgroundImage.Width;
  Self.Form.Height := backgroundImage.Height;
  with Self.Form.Constraints do
  begin
    MinWidth := Self.Form.Width;
    MaxWidth := MinWidth;
    MinHeight := Self.Form.Height;
    MaxHeight := MinHeight;
  end;
  Self.Form.Position := ELazFormPosition.OwnerFormCenter;

  background := TLazImage.Create(Self.Form);
  background.Width := backgroundImage.Width;
  background.Height := backgroundImage.Height;
  background.Picture.Bitmap := backgroundImage.ToLazBitmap();
  background.Parent := Self.Form;

  SetLength(Self.PrayerImages, Length(ERSPrayer));
  for i := 0 to Ord(High(ERSPrayer)) do
  begin
    Self.PrayerImages[i] := TLazImage.Create(Self.Form);
    img := PrayerFinder.GetImage(ERSPrayer(i)).Copy;
    img.ReplaceColor($0, TRSPrayerForm.BACKGROUND_COLOR);
    Self.PrayerImages[i].Picture.Bitmap := img.ToLazBitmap;
    Self.PrayerImages[i].Top := 46 + ((i div 5) * (33 + 4));
    Self.PrayerImages[i].Left := 29 + ((i mod 5) * (33 + 4));
    Self.PrayerImages[i].Parent := Self.Form;
    Self.PrayerImages[i].OnClick := @Self._OnPrayerClick;
  end;

  saveButton := TLazButton.CreateEx(Self.Form, 'Save', '', Self.Form.Width div 2 - 60, 270, 120, 20);
  saveButton.OnClick := @Self._OnSaveButtonClick;

  Self.OpenFormButton := TLazButton.CreateEx(buttonParent, 'Select prayers', 'Select prayers', buttonLeft, buttonTop, 100, 25);
  Self.OpenFormButton.OnClick := @Self._OnOpenFormButtonClick;
end;

