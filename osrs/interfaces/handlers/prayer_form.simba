(*
# Prayer Form
A {ref}`TLazForm` utility to aid in prayer selection settings.

This will setup a {ref}`TLazButton` which opens a {ref}`TLazForm` that mimics the prayer
tab and allows a user to select prayers to be used.
*)

{$DEFINE WL_PRAYER_FORM_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TRSPrayerForm
The `TRSPrayerForm` type contains all of the components to build the button and
form used for prayer selection settings.
*)
  TRSPrayerForm = record
    OpenFormButton: TLazButton;
    SelectedPrayers, AllowedPrayers: TRSPrayerSet;
    Form: TLazForm;
    PrayerImages: array of TLazImage;
    const BACKGROUND_IMAGE = 'IMG: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';
    const SAVE_IMAGE = 'IMG:AQAAAIwAAAAbAAAAAAAAAGjrGgoAAAAAQjg4AAEAAACw/C4HAAAAAEAkMQwAAAAAME9oAAEAAAAQR6gKAAAAADD8pAYAAAAAPaEAAAEAAAAw/KQGAAAAANmROAABAAAAAAAAAAAAAAAQ9FkLAAAAAGjrGgoAAAAAQpM4AAEAAABAJDEMAAAAADBPaAABiVBORw0KGgoAAAANSUhEUgAAAIwAAAAbCAIAAAAhwfCSAAAETUlEQVR4nO2av2rcQBDG9TDpQqp0xrg4cJGYLSy4woE0Jk+Q9wdn8Bf9/GlWd+xpZVvFicWM1vPNaOe/bA33t98fDjfx89vXL9e1qxVO0RqgYvfvn8fr2slacJJcF797+nUs5Ues+/vDOJYgfgb5Sh+Pj0E4Hb8Vj/aDUztON6J6NO4B63DoBAxRMo7TbjTJCRfISfhpILnkQDHpydAXxPPz79hMtG4lmuU7jagejTvBLh6fHUkI/hCoW6dxUmwqSUgmrcGrXLAqdvQQKUwUDom+u7uNBQ8hJroR1aNxJ9j67KJB1QLhkYfkHmVYLK97/53kWSkmnoCo8QjyMNGtUCniGlE9GveD9bzhtzK6G4SGAo2HhPIiOXOStsLnriCQmF5SFCNOQ5CFOknNeQbVo3EnWHhkAaQ5UMyJFqc7KTaVfMqnNycFEx4qU0tUKJHX9ZECsliXy7Uz2fgQDGGo2hnUN6UU6YifmCByJumZKLVB4BI9q9O6lYOvnWmxM8l6spUmBd1CY2FlhfZPZpLAdUdhHwWe7ygo1vSUYdCLQaQoc1QqO9pJ2JfpWoHt0TtODVvW59RUM9GS4IO1o2oDYvC6+Ul7Hhw8T4kpPwOJCZ009Z9BQNWQxI+HhmEQcRG2Ry9Vq1jbqKO5tM0aNBEPgmKvSi55wUnKX+979CRc5TSxOb7/jIeH4opbiBbsJjPeJvMRD+AzHpGBZGpm7knuapKJiqn2KP9Bi/DH6jxDXXycX36qsS92gSXbACY5uvzU49m6vcl8lAw4znuSn32c3pbenMTrEWZCx3H6GwlegaayUROQ4NLGadQhinm+S7FYNjlDiSVa8tn3LDzF31K3N5mPFi2Jnb0FSu/MSV6s5STKFNHBC4EXcbnTgWSe06niw7ACS8aAfZlfckbKGHklUNxCN9bt83nWPh8lY2JkzO6heXJwIISlgFa02JMIPXTTGJ2mzmrK9MlqBdYHhzozgtBbRHKSZNYebazbm8xHqSeJAOX237gnhUV4Si9laYbxVy6eex0W+5IuKUs4iLswlUGuxrq9yXz0OT3J8xQUpQzaTV+mwfciLNmTytdiuWNq8nRBYOJvrNubzEef05N8+GHIUbF2mqgkxAirdmxqMGDjkYb5Vewvm9oJUSFQ+0E7c2PdPp9njfPRB/Wk1J+Q7gFCL2lE9WjsxzbW7a3mI+8pF/ck75CrZ7Zx+lOeB9GKk3zAlAhDY7RtVdV5WkoomYc0KkHOpKfXedGduWLuooIRJi2oHo39WIyVUh+jewZ0VvXFKsqYzlnoajMnaXHOi1p66p8o6wm3HWLPu5As9GxOjk+FyocFmPFZ/s9s+sZhvLylEzhlPrO+3xCxN6wXfEyRgGl4EV3sv+HwL3zj4F8LeYln9ig2cjg92qyS3t1I2BZUj8adYL1ZlOnFlmqGkEUVtEmM718LPRxuBr4bun53t6t18uPI69rV4uPif2O06OaVRlEHAAAAAElFTkSuQmCC';
    const BACKGROUND_COLOR = $333C45;
    const HIGHLIGHT_COLOR = $6DB3CE;
  end;

function TRSPrayerForm._GetInterferingPrayers(prayer: ERSPrayer): TRSPrayerSet;
{$SCOPEDENUMS OFF}
type
  ERSPrayerGroup = (
    pgNone, pgAttack, pgStrength, pgDefence, pgRanged, pgMagic, pgCombo, pgOverhead
  );
const
  PRAYER_GROUPS: array[ERSPrayerGroup] of TRSPrayerSet = [
    [ERSPrayer.RAPID_HEAL, ERSPrayer.RAPID_RESTORE],
    [ERSPrayer.CLARITY_OF_THOUGHT, ERSPrayer.IMPROVED_REFLEXES, ERSPrayer.INCREDIBLE_REFLEXES],
    [ERSPrayer.BURST_OF_STRENGTH, ERSPrayer.SUPERHUMAN_STRENGTH, ERSPrayer.ULTIMATE_STRENGTH],
    [ERSPrayer.THICK_SKIN, ERSPrayer.ROCK_SKIN, ERSPrayer.STEEL_SKIN],
    [ERSPrayer.SHARP_EYE, ERSPrayer.HAWK_EYE, ERSPrayer.EAGLE_EYE],
    [ERSPrayer.MYSTIC_WILL, ERSPrayer.MYSTIC_LORE, ERSPrayer.MYSTIC_MIGHT],
    [ERSPrayer.CHIVALRY, ERSPrayer.PIETY, ERSPrayer.RIGOUR, ERSPrayer.AUGURY],
    [ERSPrayer.PROTECT_FROM_MAGIC, ERSPrayer.PROTECT_FROM_MISSILES, ERSPrayer.PROTECT_FROM_MELEE, ERSPrayer.REDEMPTION, ERSPrayer.SMITE, ERSPrayer.RETRIBUTION]
  ];
var
  group: ERSPrayerGroup;
begin
  if prayer in PRAYER_GROUPS[pgNone] then
    Exit;

  for group := pgAttack to pgOverhead do
    if prayer in PRAYER_GROUPS[group] then
      Break;

  if group > pgOverhead then
    Exit;

  case group of
    pgAttack:   Result += PRAYER_GROUPS[pgRanged]
                       +  PRAYER_GROUPS[pgMagic]
                       +  PRAYER_GROUPS[pgCombo];
    pgStrength: Result += PRAYER_GROUPS[pgRanged]
                       +  PRAYER_GROUPS[pgMagic]
                       +  PRAYER_GROUPS[pgCombo];
    pgDefence:  Result += PRAYER_GROUPS[pgCombo];
    pgRanged:   Result += PRAYER_GROUPS[pgAttack]
                       +  PRAYER_GROUPS[pgStrength]
                       +  PRAYER_GROUPS[pgMagic]
                       +  PRAYER_GROUPS[pgCombo];
    pgMagic:    Result += PRAYER_GROUPS[pgAttack]
                       +  PRAYER_GROUPS[pgStrength]
                       +  PRAYER_GROUPS[pgRanged]
                       +  PRAYER_GROUPS[pgCombo];
    pgCombo:    Result += PRAYER_GROUPS[pgAttack]
                       +  PRAYER_GROUPS[pgStrength]
                       +  PRAYER_GROUPS[pgDefence]
                       +  PRAYER_GROUPS[pgRanged]
                       +  PRAYER_GROUPS[pgMagic];
  end;

  Result += PRAYER_GROUPS[group];
  {$SCOPEDENUMS ON}
end;

procedure TRSPrayerForm._DrawPrayerCircle(p: ERSPrayer; color: TColor);
var
  img: TImage;
  sprite: TPointArray;
  highlight: TPointArray;
begin
  img := new TImage();
  img.FromLazBitmap(Self.PrayerImages[p].Picture.Bitmap);
  sprite := img.FindColor(TRSPrayerForm.BACKGROUND_COLOR, 0)
    + img.FindColor(TRSPrayerForm.HIGHLIGHT_COLOR, 0);
  sprite := sprite.Invert([0,0,img.Width-1, img.Height-1]);

  highlight := TPointArray.CreateFromCircle([img.Width div 2, img.Height div 2], img.Width div 2, True);
  highlight := highlight.Difference(sprite);

  img.DrawColor := color;
  img.DrawTPA(highlight);

  Self.PrayerImages[p].Picture.Bitmap := img.ToLazBitmap;
end;

procedure TRSPrayerForm._UpdateHint();
var
  hint: String;
  prayer: ERSPrayer;
begin
  for prayer in Self.SelectedPrayers do
    hint += ToString(prayer).After('.').ToLower().Capitalize().Replace('_', ' ') + ', ';

  if hint.Length > 2 then
    SetLength(hint, hint.Length - 2);
  Self.OpenFormButton.Hint := hint;
end;

procedure TRSPrayerForm._Select(prayer: ERSPrayer);
begin
  if not (prayer in Self.AllowedPrayers) then
    Exit;
  Self._DrawPrayerCircle(prayer, TRSPrayerForm.HIGHLIGHT_COLOR);
  Self.SelectedPrayers += prayer;
  Self._UpdateHint();
end;

procedure TRSPrayerForm._Deselect(prayer: ERSPrayer);
begin
  Self._DrawPrayerCircle(prayer, TRSPrayerForm.BACKGROUND_COLOR);
  Self.SelectedPrayers := Self.SelectedPrayers - [prayer];
  Self._UpdateHint();
end;

procedure TRSPrayerForm._OnPrayerClick(sender: TLazObject);
var
  prayerClicked, prayer: ERSPrayer;
begin
  prayerClicked :=  ERSPrayer(Self.PrayerImages.IndexOf(TLazImage(sender)));

  if prayerClicked in Self.SelectedPrayers then
    Self._Deselect(prayerClicked)
  else
  begin
    for prayer in Self._GetInterferingPrayers(prayerClicked) do
      Self._Deselect(prayer);
    Self._Select(prayerClicked);
  end;
end;

{$H-}
procedure TRSPrayerForm._OnOpenFormButtonClick(sender: TLazObject);
begin
  Self.Form.Show();
  Self.Form.BringToFront();
end;

procedure TRSPrayerForm._OnSaveButtonClick(sender: TLazObject);
begin
  Self.Form.Hide();
end;
{$H+}

(*
## TRSPrayerForm Selected
```pascal
property TRSPrayerForm.Selected(prayers: TRSPrayerSet);
```
Set's the defined prayers as the set of selected prayers.
Useful for saving user settings between sessions. Selected prayers from a previous
session could be saved and then reset on the next session by setting them
with the procedure upon building the form.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  prayerForm: TRSPrayerForm;
  config: TJSONParser;
  savedPrayers: TJSONItem;
  i: Integer;
  selected: TRSPrayerSet;
begin
  ...
  config := new TJSONParser();
  config.Load('my_script_config.json');
  if config.GetArray('prayers', savedPrayers) then
    for i := 0 to savedPrayers.Count - 1 do
      selected += ERSPrayer(savedPrayers.Item[i].AsInt);

  prayerForm.SetSelected(selected);
end;
```
*)
property TRSPrayerForm.Selected(prayers: TRSPrayerSet);
var
  prayer: ERSPrayer;
begin

  for prayer in ERSPrayer do
    Self._Deselect(prayer);

  for prayer in prayers do
   Self._Select(prayer);
end;

(*
## TRSPrayerForm Selected
```pascal
property TRSPrayerForm.Selected(prayers: TRSPrayerSet);
```
Get's the currently selected prayers.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  form: TScriptForm;
  tab: TTabSheet;
  prayerForm: TRSPrayerForm;

begin
  form.Setup('Script settings');
  tab := TLazTabSheet.Create(form.PageControl);
  prayerForm.Setup(tab, 50, 50);
  prayerForm.SetAllowedPrayers([ERSPrayer.EAGLE_EYE, ERSPrayer.RIGOUR]);
  form.Run();
  WriteLn(prayerForm.Selected);
end.
```
*)
property TRSPrayerForm.Selected: TRSPrayerSet;
begin
  Result := Self.SelectedPrayers;
end;

(*
## TRSPrayerForm SetAllowedPrayers
```pascal
procedure TRSPrayerForm.SetAllowedPrayers(prayers: TRSPrayerSet);
```
Set's the defined prayers as the only selectable prayers. Prayers that
arent defined here will be greyed out and unselectable. Use to narrow
the selection for example, selections for offensive range prayer.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  form: TScriptForm;
  tab: TTabSheet;
  prayerForm: TRSPrayerForm;

begin
  form.Setup('Script settings');
  tab := TLazTabSheet.Create(form.PageControl);
  prayerForm.Setup(tab, 50, 50);
  prayerForm.SetAllowedPrayers([ERSPrayer.EAGLE_EYE, ERSPrayer.RIGOUR]);
  form.Run();
end.
```
*)
procedure TRSPrayerForm.SetAllowedPrayers(prayers: TRSPrayerSet);
  function Blend(bg, fg: TColor; a: Byte): TColor;
  begin
    Result := ((fg shr 16 * a + bg shr 16 * (255 - a)) div 255 and $FF) shl 16 +
      ((fg shr 8 and $FF * a + bg shr 8 and $FF * (255 - a)) div 255 and $FF) shl 8 +
      ((fg and $FF * a + bg and $FF * (255 - a)) div 255 and $FF);
  end;

var
  prayer: ERSPrayer;
  img: TImage;
  sprite: TPointArray;
  p: TPoint;
begin
  for prayer in ERSPrayer do
  begin
    if (not (prayer in prayers)) and (prayer in Self.Selected) then
      Self._Deselect(prayer);

    img := new TImage();
    writeln prayer;
    img.FromLazBitmap(Self.PrayerImages[prayer].Picture.Bitmap);
    sprite := img.FindColor(TRSPrayerForm.BACKGROUND_COLOR, 0).Invert([0, 0, img.Width-1, img.Height-1]);
    if not (prayer in prayers) then
      for p in sprite do
        img.Pixel[p.X, p.Y] := Blend(0, img.Pixel[p.X, p.Y], 64);
    Self.PrayerImages[prayer].Picture.Bitmap := img.ToLazBitmap();
  end;

  Self.AllowedPrayers := prayers;
end;

(*
## TRSPrayerForm Setup
```pascal
procedure TRSPrayerForm.Setup(buttonParent: Pointer; buttonLeft, buttonTop: Integer);
```
Setup the prayer form and add the select button to the defined parent
at the defined position.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  form: TScriptForm;
  tab: TTabSheet;
  prayerForm: TRSPrayerForm;
begin
  form.Setup('Script settings');
  tab := TLazTabSheet.Create(form.PageControl);
  prayerForm.Setup(tab, 50, 50)
  form.Run();
end;
```
*)
procedure TRSPrayerForm.Setup(parent: Pointer; buttonLeft, buttonTop: Integer);
var
  I: Integer;
  img: TImage;
  backgroundImage: TImage;
  background: TLazImage;
  saveButton: TLazSpeedButton;
begin
  backgroundImage := new TImage();
  backgroundImage.FromString(TRSPrayerForm.BACKGROUND_IMAGE);

  Self.Form := TLazForm.Create(TLazComponent(parent));
  Self.Form.SetBounds(0, 0, backgroundImage.Width, backgroundImage.Height);
  with Self.Form.Constraints do
  begin
    MinWidth := Self.Form.Width;
    MaxWidth := MinWidth;
    MinHeight := Self.Form.Height;
    MaxHeight := MinHeight;
  end;
  Self.Form.Position := ELazFormPosition.OwnerFormCenter;

  background := TLazImage.Create(Self.Form);
  background.SetBounds(0, 0, backgroundImage.Width, backgroundImage.Height);
  background.Picture.Bitmap := backgroundImage.ToLazBitmap();
  background.Parent := Self.Form;

  SetLength(Self.PrayerImages, Length(ERSPrayer));
  for i := 0 to Ord(High(ERSPrayer)) do
  begin
    img := PrayerFinder.GetImage(ERSPrayer(i)).Copy;
    img.ReplaceColor($0, TRSPrayerForm.BACKGROUND_COLOR);
    Self.PrayerImages[i] := TLazImage.Create(Self.Form);
    Self.PrayerImages[i].Picture.Bitmap := img.ToLazBitmap;
    Self.PrayerImages[i].Top := 9 + ((i div 5) * (33 + 4));
    Self.PrayerImages[i].Left := 7 + ((i mod 5) * (33 + 4));
    Self.PrayerImages[i].Parent := Self.Form;
    Self.PrayerImages[i].OnClick := @Self._OnPrayerClick;
  end;

  img := new TImage();
  img.FromString(TRSPrayerForm.SAVE_IMAGE);
  saveButton := TLazSpeedButton.Create(Self.Form);
  saveButton.Parent := Self.Form;
  saveButton.SetBounds(Self.Form.Width div 2 - img.Width div 2, 230, img.Width, img.Height);
  saveButton.Glyph := img.ToLazBitmap();
  saveButton.OnClick := @Self._OnSaveButtonClick;

  Self.OpenFormButton := TLazButton.CreateEx(parent, 'Select prayers', 'Select prayers', buttonLeft, buttonTop, 100, 25);
  Self.OpenFormButton.OnClick := @Self._OnOpenFormButtonClick;

  Self.AllowedPrayers := [Low(ERSPrayer)..High(ERSPrayer)];
end;



