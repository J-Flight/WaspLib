(*
# Inventory Layouts
The `Inventory Layouts` is a handler for OSRS inventory.

You can configure the layouts manually but the recommended way is to use
{ref}`Inventory Form`.
*)

{$DEFINE WL_INVENTORY_LAYOUTS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TRSInventoryLayouItem
Type that represents a single inventory layout item.
*)
  TRSInventoryLayouItem = record
    Item: TRSItem;
    Amount: Integer;
  end;

(*
## TRSInventoryLayouItem.ToJSON
```pascal
function TRSInventoryLayouItem.ToJSON(): TJSONItem;
```
Convert the `TRSInventoryLayoutItem` into a `TJSONItem`.
*)
function TRSInventoryLayouItem.ToJSON(): TJSONItem;
begin
  Result := new TJSONObject();
  Result.AddString('Item', Self.Item);
  Result.AddInt('Amount', Self.Amount);
end;

type
(*
## TRSInventoryLayoutSlots
Type that represents an entire inventory layout.
*)
  TRSInventoryLayoutSlots = record
    Name: String;
    Items: array [0..27] of TRSInventoryLayouItem;
  end;

(*
## TRSInventoryLayout.ToJSON
```pascal
function TRSInventoryLayout.ToJSON(): TJSONItem;
```
Convert the `TRSInventoryLayout` into a `TJSONItem`.
*)

function TRSInventoryLayoutSlots.ToJSON(): TJSONItem;
var
  i: Integer;
begin
  Result := new TJSONArray();
  for i := 0 to 27 do
    Result.AddObject(ToStr(i), Self.Items[i].ToJSON());
end;

type
  TRSInventoryLayout = record
    Layout: TRSInventoryLayoutSlots;
    Holding: array [0..27] of TRSInventoryLayouItem;
  end;

//TODO: TRSInventoryLayout methods... Withdraw, Deposit... Whatever.
