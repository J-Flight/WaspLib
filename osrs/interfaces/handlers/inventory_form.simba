(*
# Inventory Form
This page is about {ref}`Inventory Layouts` dedicated `TLazForm` utilities.

This is meant to be used with {ref}`TScriptForm` with
{ref}`TScriptForm.CreateInventoryTab` and will setup a a `TLazTabSheet` on it
with several controls to configure the {ref}`Inventory Layouts`:
```{figure} ../../images/inventoryform.png
```
*)

{$DEFINE WL_INVENTORY_FORM_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TInventoryFormHelper
The `TInventoryFormHelper` type is, as it's name implies a helper type for the
`Inventory Form`.

It has a lot of methods and callbacks that are hidden by default and won't be
mentioned on this page because they are internal methods you shouldn't touch.

Do feel free to read the source code though if you so desire.
*)
  TInventoryFormHelper = record
    Layouts: array of TRSInventoryLayoutSlots;
    Index: Integer;
    Selected: Integer;
    Layout: TRSInventoryLayoutSlots;

    SlotBoxes, DPISlots: TBoxArray;

    ListLabel: TLazLabel;
    Search: TLazEdit;
    FilteredList, ItemList: TLazListBox;
    LayoutCombobox: TLazComboBox;
    LinkedComboboxes: array of TLazComboBox;
    LayoutNameEdit, AmountEdit: TLazEdit;
    UnfilterButton, DuplicateButton, RemoveButton: TLazButton;
    ImageBox: TImageBox;

    Config: TConfigJSON;
    const BACKGROUND_IMG: TImage = ImageFromString('IMG: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');
  end;

procedure TInventoryFormHelper.Setup();
var
  i: Integer;
  slot: Integer;
begin
  Self.Config.Setup('inventorylayouts' + PATH_SEP + ToStr(PlayerIndex));
  SetLength(Self.Layouts, Self.Config.Data.Count);

  try
    for i := 0 to Self.Config.Data.Count-1 do
    begin
      Self.Layouts[i].Name := Self.Config.Data.Key[i];

      for slot := 0 to 27 do
      begin
        Self.Layouts[i].Items[slot].Item   := Self.Config.Data.Item[i].Item[slot].Item[0].AsString;
        Self.Layouts[i].Items[slot].Amount := Self.Config.Data.Item[i].Item[slot].Item[1].AsInt;
      end;
    end;
  except
    FileDelete(Self.Config.Path); //corrupted config.
  end;
end;

procedure TInventoryFormHelper.UpdateConfig();
var
  i: Integer;
begin
  Self.Config.Data := new TJSONObject();
  for i := 0 to High(Self.Layouts) do
    Self.Config.Data.Add(Self.Layouts[i].Name, Self.Layouts[i].ToJSON());
  Self.Config.SaveConfig();
end;

procedure TInventoryFormHelper.AddLayout(layout: TRSInventoryLayoutSlots);
begin
  Self.Layouts += layout;
  Self.Config.Data.Add(layout.Name, layout.ToJSON());
  Self.UpdateConfig();
end;

procedure TInventoryFormHelper.RemoveLayout(index: Integer);
begin
  Delete(Self.Layouts, index, 1);
  Self.UpdateConfig();
end;


procedure TInventoryFormHelper.UpdateListBox();
begin
  if Self.ItemList.Items.Count = 0 then
  begin
    Self.ItemList.Items.BeginUpdate();
    Self.ItemList.Items.Add('Nothing');
    Self.ItemList.Items.Add('Anything');
    Self.ItemList.Items.AddStrings(ItemFinder.Database.Data.Value['item']);

    Self.ItemList.Items.EndUpdate();
  end;
end;

procedure TInventoryFormHelper.UpdateFilters(items: TStringArray = []);
begin
  Self.FilteredList.Items.BeginUpdate();
  Self.FilteredList.Clear();
  Self.FilteredList.Items.Add('Nothing');
  Self.FilteredList.Items.Add('Anything');
  Self.FilteredList.Items.AddStrings(items);
  Self.FilteredList.Items.EndUpdate();
end;



procedure TInventoryFormHelper.DrawItem(slot: Integer; background: TImage; amount: Integer);
var
  id: String;
  item: TImage;
begin
  id := ItemFinder.Database.Get(Self.Layout.Items[slot].Item.ToLower(), 'item', 'id');
  item := ItemFinder.GetImage(id);
  if amount > 1 then
  begin
    if amount < 99999 then
      item.DrawColor := $00FFFF
    else if InRange(amount, 100000, 9999999) then
      item.DrawColor := $FFFFFF
    else
      item.DrawColor := $80FF00;
    item.DrawTPA(OCR.Engine.TextToTPA(RSFonts.PLAIN_11, ToStr(amount)));
  end;
  background.DrawImage(item, Self.SlotBoxes[slot].TopLeft);
end;

procedure TInventoryFormHelper.UpdateBackground();
var
  slot: Integer;
  bg: TImage;
begin
  bg := Self.BACKGROUND_IMG.Copy();

  for slot := 0 to 27 do
    case Self.Layout.Items[slot].Item of
      '', 'Nothing': ;
      'Anything': ; //TODO....
      else Self.DrawItem(slot, bg, Self.Layout.Items[slot].Amount);
    end;

  Self.ImageBox.SetImage(bg.Resize(EImageRotateAlgo.NEAREST_NEIGHBOUR, FormUtils.Scale));
end;


procedure TInventoryFormHelper.OnSelectionChange(sender: TLazObject);
begin
  Self.Layout.Items[Self.Selected].Item := TLazListBox(sender).GetSelectedText();
  Self.AmountEdit.Enabled := ItemData.IsStackable(Self.Layout.Items[Self.Selected].Item);
  Self.UpdateBackground();
end;


{$H-}
procedure TInventoryFormHelper.OnSaveClick(sender: TLazObject);
var
  i: Integer;
begin
  Self.Layout.Name := Self.LayoutNameEdit.Text;
  Self.LayoutCombobox.Items.Strings[Self.Index] := Self.LayoutNameEdit.Text;
  for i := 0 to High(Self.LinkedComboboxes) do
    Self.LinkedComboboxes[i].Items.Strings[Self.Index] := Self.LayoutNameEdit.Text;

  if Self.Index = (High(Self.Layouts) + 1) then
  begin
    Self.AddLayout(Self.Layout);
    Self.LayoutCombobox.Items.Add('New Layout');
    Self.DuplicateButton.Enabled := True;
    Self.RemoveButton.Enabled := True;
  end
  else
    Self.Layouts[Self.Index] := Self.Layout;
  Self.UpdateConfig();
end;

procedure TInventoryFormHelper.OnDuplicateClick(sender: TLazObject);
var
  layout: TRSInventoryLayoutSlots;
  i: Integer;
begin
  if Self.Index = (High(Self.Layouts) + 1) then Exit;
  layout := Self.Layouts[Self.Index];
  layout.Name += ' duplicate';
  Self.AddLayout(layout);
  Self.LayoutCombobox.Items.Insert(High(Self.Layouts), layout.Name);
  Self.LayoutCombobox.ItemIndex := High(Self.Layouts);
  for i := 0 to High(Self.LinkedComboboxes) do
    Self.LinkedComboboxes[i].Items.Add(layout.Name);

  Self.OnLayoutChange(Self.LayoutCombobox);
end;

procedure TInventoryFormHelper.OnRemoveClick(sender: TLazObject);
var
  i: Integer;
begin
  if Self.Index = (High(Self.Layouts) + 1) then Exit;

  Self.RemoveLayout(Self.Index);
  Self.LayoutCombobox.Items.Delete(Self.Index);

  for i := 0 to High(Self.LinkedComboboxes) do
    Self.LinkedComboboxes[i].Items.Delete(Self.Index);

  Self.Index := Max(Self.Index-1, 0);
  Self.LayoutCombobox.ItemIndex := Max(High(Self.Layouts), 0);
  Self.OnLayoutChange(Self.LayoutCombobox);
end;


procedure TInventoryFormHelper.OnImgPaint(sender: TImageBox; canvas: TImageBoxCanvas; r: TLazRect);
var
  slot: Integer;
begin
  //locked $0F61C8
  for slot := 0 to 27 do
  begin
    //$333C45
    if slot = Self.Selected then
      canvas.DrawBox(Self.DPISlots[slot], $08E20A)
    else
      canvas.DrawBox(Self.DPISlots[slot], $1A9DA2);
  end;
end;

procedure TInventoryFormHelper.OnKeyPress(sender: TLazObject; var key: Int16; shift: ELazShiftStates);
var
  str: String;
  tmp: Int16;
begin
  tmp := key;
  key := 0;

  str := Self.Search.Text;
  case tmp of
    8:
    begin
      SetLength(str, Length(str)-1);
      Self.Search.Text := str;
      Exit;
    end;
    13:
    begin
      if Self.UnfilterButton.Enabled then
        Self.OnSelectionChange(Self.FilteredList)
      else
        Self.OnSelectionChange(Self.ItemList);
      Exit;
    end;
    37:
    begin
      Self.Selected := ((Self.Selected - 1) mod 28 + 28) mod 28;
      Self.ListLabel.Caption := 'Selected slot: ' + ToStr(Self.Selected);
      Self.UpdateListBox();
      Self.ImageBox.Repaint();
      Exit;
    end;
    38:
    begin
      Self.Selected := ((Self.Selected - 4) mod 28 + 28) mod 28;
      Self.ListLabel.Caption := 'Selected slot: ' + ToStr(Self.Selected);
      Self.UpdateListBox();
      Self.ImageBox.Repaint();
      Exit;
    end;
    39:
    begin
      Self.Selected := ((Self.Selected + 1) mod 28 + 28) mod 28;
      Self.ListLabel.Caption := 'Selected slot: ' + ToStr(Self.Selected);
      Self.UpdateListBox();
      Self.ImageBox.Repaint();
      Exit;
    end;
    40:
    begin
      Self.Selected := ((Self.Selected + 4) mod 28 + 28) mod 28;
      Self.ListLabel.Caption := 'Selected slot: ' + ToStr(Self.Selected);
      Self.UpdateListBox();
      Self.ImageBox.Repaint();
      Exit;
    end;
    46:
    begin
      Self.Layout.Items[Self.Selected].Item := 'Nothing';
      Self.UpdateListBox();
      Self.UpdateBackground();
      Self.ImageBox.Repaint();
      Exit;
    end;
  end;

  Self.Search.Text := str + Char(tmp);
end;

procedure TInventoryFormHelper.OnImgKeyPress(sender: TImageBox; var key: UInt16; shift: ELazShiftStates);
begin
  Self.OnKeyPress(nil, Int16(key), shift);
end;
{$H+}

procedure TInventoryFormHelper.OnImgClick(sender: TImageBox; x, y: Integer);
var
  i: Integer;
begin
  i := Self.DPISlots.ContainsPoint([x,y]);
  if i >= 0 then
  begin
    Self.Selected := i;
    Self.ListLabel.Caption := 'Selected slot: ' + ToStr(i);
    Self.UpdateListBox();
  end;

  sender.Repaint();
end;





procedure TInventoryFormHelper.OnReadClick(sender: TLazObject);
var
  btn: TLazButton;
  slot: Integer;
  items, filter: TRSItemArray;
begin
  btn := TLazButton(sender);
  btn.Caption := 'Loading...';
  btn.Font.Style := btn.Font.Style - [ELazFontStyles.fsBold];
  btn.Enabled := False;
  btn.Update();

  for slot := 0 to 27 do
  begin
    items := Inventory.Items.Discover(Ord(slot));

    if items <> [] then
    begin
      Self.Layout.Items[slot].Item := items[0];
      Self.Layout.Items[slot].Amount := Max(0, Inventory.Slots.ReadStack(slot));
    end
    else
      Self.Layout.Items[slot].Item := 'Nothing';
    filter += items;
  end;

  Self.UpdateFilters(filter);

  Self.UpdateBackground();

  Self.ItemList.Hide();
  Self.ItemList.Enabled := False;
  Self.FilteredList.Show();
  Self.FilteredList.Enabled := True;

  btn.Caption := 'Read From Client';
  btn.Font.Style := [ELazFontStyles.fsBold];
  btn.Enabled := True;
  Self.UnfilterButton.Enabled := True;
end;


procedure TInventoryFormHelper.OnSearchChange(sender: TLazObject);
var
  i: Integer;
begin
  if TLazEdit(sender).IsEmpty() then Exit;
  i := Self.ItemList.Search(TLazEdit(sender).Text);
  if i > 0 then
    Self.ItemList.ItemIndex := i;
end;

procedure TInventoryFormHelper.OnAmountChange(sender: TLazObject);
begin
  if TLazEdit(sender).IsEmpty() then Exit;
  Self.Layout.Items[Self.Selected].Amount := StrToInt(TLazEdit(sender).Text, 1);
  Self.UpdateBackground();
end;

procedure TInventoryFormHelper.OnUnfilterClick(sender: TLazObject);
begin
  Self.FilteredList.Hide();
  Self.FilteredList.Enabled := False;

  Self.ItemList.Show();
  Self.ItemList.Enabled := True;

  TLazButton(sender).Enabled := False;
end;

procedure TInventoryFormHelper.OnLayoutChange(sender: TLazObject);
var
  slot: Integer;
begin
  Self.Index := TLazComboBox(sender).ItemIndex;
  if Self.Index > High(Self.Layouts) then
  begin
    Self.Layout.Name := TLazComboBox(sender).Text;
    for slot := 0 to 27 do
      Self.Layout.Items[slot].Item := 'Nothing';

    Self.DuplicateButton.Enabled := False;
    Self.RemoveButton.Enabled := False;
  end
  else
  begin
    Self.Layout := Self.Layouts[Self.Index];
    Self.DuplicateButton.Enabled := True;
    Self.RemoveButton.Enabled := True;
  end;

  Self.ItemList.ItemIndex := Self.ItemList.Items.IndexOf(Self.Layout.Items[Self.Selected].Item);
  Self.LayoutNameEdit.Caption := TLazComboBox(sender).Text;

  Self.OnUnfilterClick(Self.UnfilterButton);

  Self.UpdateBackground();
end;





(*
## InventoryForm.CreateGearCombobox
```pascal
function TInventoryFormHelper.CreateGearCombobox(owner: Pointer; caption: TLazLabel = nil): TLazComboBox;
```
This is the only method from {ref}`Gear Form` you might need to use.
This will create a combobox for you whose contents auto-update with changes made
on the `Gear Form`.
*)
function TInventoryFormHelper.CreateInventoryCombobox(owner: Pointer; caption: String = 'Inventory Layout:'; left, top: Integer = 0): TLazComboBox;
var
  i: Integer;
begin
  Result := TLazComboBox.CreateEx(owner, caption, 'Pick an inventory layout.', left, top, 170, 40);
  Self.LinkedComboboxes += Result;

  for i := 0 to High(Self.Layouts) do
    Result.Items.Add(Self.Layouts[i].Name);

  Result.ItemIndex := Low(Self.Layouts);
end;

var
(*
## InventoryForm variable
Global {ref}`TInventoryFormHelper` variable.
*)
  InventoryForm: TInventoryFormHelper;

(*
## ScriptForm CreateInventoryTab
```pascal
function TScriptForm.CreateInventoryTab(): TLazTabSheet;
```
Sets up a `TLazTabSheet` on your `TScriptForm` to configure your `Inventory Layouts`.

Example:
```pascal
{$I WaspLib/osrs.simba}
var
  form: TScriptForm;
begin
  form.Setup();
  form.CreateInventoryTab();
  form.Run();
end.
```
```{figure} ../../images/inventoryform.gif
```
For a more complete example check out the file `Simba/Includes/WaspLib/examples/inventory_form.simba`.
*)
function TScriptForm.CreateInventoryTab(): TLazTabSheet;
var
  save, read: TLazButton;
  width: Integer;
  i: Integer;
begin
  InventoryForm.Setup();

  Result := Self.CreateTab('Inventory Layouts');
  width := 280;

  InventoryForm.ListLabel := TLazLabel.CreateEx(Result, 'Slot item: ', 'Click a slot on the right side to update the list below.', 40, 20);

  InventoryForm.Search := TLazEdit.CreateEx(Result, 'Search:', 'Search the list below.', 40, 80, width);
  InventoryForm.Search.OnChange := @InventoryForm.OnSearchChange;

  InventoryForm.ItemList := TLazListBox.CreateEx(Result, '', 'Click a slot on the right side to update the list below.', 0,0, width, 340);
  InventoryForm.ItemList.AnchorVertically(InventoryForm.Search, 10);
  InventoryForm.ItemList.OnDblClick := @InventoryForm.OnSelectionChange;
  InventoryForm.ItemList.OnKeyDown := @InventoryForm.OnKeyPress;

  InventoryForm.FilteredList := TLazListBox.CreateEx(Result, '', 'Click a slot on the right side to update the list below.', 0,0, width, 340);
  InventoryForm.FilteredList.AnchorVertically(InventoryForm.Search, 10);
  InventoryForm.FilteredList.OnDblClick := @InventoryForm.OnSelectionChange;
  InventoryForm.FilteredList.OnKeyDown := @InventoryForm.OnKeyPress;
  InventoryForm.FilteredList.Hide();
  InventoryForm.FilteredList.Enabled := False;

  InventoryForm.UnfilterButton := TLazButton.CreateEx(Result, 'Remove list filter', 'Remove the current filter.', 0,0, width);
  InventoryForm.UnfilterButton.AnchorVertically(InventoryForm.Search, 360);
  InventoryForm.UnfilterButton.Enabled := False;
  InventoryForm.UnfilterButton.OnClick := @InventoryForm.OnUnfilterClick;

  InventoryForm.AmountEdit := TLazEdit.CreateEx(Result, 'Item Amount:', 'Edit the item amount.', 0, 0, width);
  InventoryForm.AmountEdit.AnchorVertically(InventoryForm.UnfilterButton, 10);
  InventoryForm.AmountEdit.Enabled := False;
  InventoryForm.AmountEdit.Text := '1';
  InventoryForm.AmountEdit.OnChange := @InventoryForm.OnAmountChange;
  InventoryForm.AmountEdit.OnKeyPress := @FormUtils.NumberField;

  InventoryForm.LayoutCombobox := TLazComboBox.CreateEx(Result, 'Layout:', 'Select a gear layout.', Round(Result.Width / FormUtils.Scale) - width - 80, 30, width);
  for i := 0 to High(InventoryForm.Layouts) do
    InventoryForm.LayoutCombobox.Items.Add(InventoryForm.Layouts[i].Name);
  InventoryForm.LayoutCombobox.Items.Add('New Layout');
  InventoryForm.LayoutCombobox.ItemIndex := 0;
  InventoryForm.LayoutCombobox.OnChange := @InventoryForm.OnLayoutChange;

  InventoryForm.LayoutNameEdit := TLazEdit.CreateEx(Result, 'Layout name:', 'Change the current layout name.', 0,0, width);
  InventoryForm.LayoutNameEdit.AnchorVertically(InventoryForm.LayoutCombobox, 30);

  save := TLazButton.CreateEx(Result, 'Save' , 'Save the current gear layout.');
  save.AnchorVertically(InventoryForm.LayoutNameEdit, 10);
  save.BorderSpacing.Left := 18;
  save.OnClick := @InventoryForm.OnSaveClick;

  InventoryForm.DuplicateButton := TLazButton.CreateEx(Result, 'Duplicate' , 'Duplicate the current gear layout.');
  InventoryForm.DuplicateButton.AnchorHorizontally(save, 10);
  InventoryForm.DuplicateButton.OnClick := @InventoryForm.OnDuplicateClick;

  InventoryForm.RemoveButton := TLazButton.CreateEx(Result, 'Remove' , 'Remove the current gear layout.');
  InventoryForm.RemoveButton.AnchorHorizontally(InventoryForm.DuplicateButton, 10);
  InventoryForm.RemoveButton.OnClick := @InventoryForm.OnRemoveClick;

  InventoryForm.ImageBox := TImageBox.CreateEx(Result, '', '', Round(Result.Width / FormUtils.Scale) - width - 36, 170, 202, 273);
  InventoryForm.ImageBox.AllowZoom := False;
  InventoryForm.ImageBox.AllowMoving := False;
  InventoryForm.ImageBox.ShowScrollBars := False;
  InventoryForm.ImageBox.ShowStatusBar := False;
  InventoryForm.ImageBox.OnImgPaint := @InventoryForm.OnImgPaint;
  InventoryForm.ImageBox.OnImgClick := @InventoryForm.OnImgClick;
  InventoryForm.ImageBox.OnImgKeyDown := @InventoryForm.OnImgKeyPress;
  InventoryForm.UpdateBackground();

  read := TLazButton.CreateEx(Result, 'Read From Client' , 'Read the layout from the client.', 0, 0, 204);
  read.Font.Style := [ELazFontStyles.fsBold];
  read.AnchorVertically(InventoryForm.ImageBox, 10);
  read.OnClick := @InventoryForm.OnReadClick;

  InventoryForm.SlotBoxes := TBoxArray.Create([20, 13], 4, 7, 31, 31, [11, 5]);
  for i := 0 to High(InventoryForm.SlotBoxes) do
    with InventoryForm.SlotBoxes[i] do
      InventoryForm.DPISlots += [Round(FormUtils.Scale * X1), Round(FormUtils.Scale * Y1), Round(FormUtils.Scale * X2), Round(FormUtils.Scale * Y2)];

  InventoryForm.UpdateListBox();
  InventoryForm.OnLayoutChange(InventoryForm.LayoutCombobox);
end;
