(*
# Interface
The core of interface handling.
*)

{$DEFINE WL_INTERFACE_CORE_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TRSInterface
Core record for `Interfaces` with a lot of interface coordinate data.
*)
  TRSInterface = record
    Bounds: TBox;
    Width, Height: Integer;
    Center, TopLeft, TopRight, BottomRight, BottomLeft: TPoint;
    Quad: TQuad;
  end;

  PRSInterface = ^TRSInterface;

procedure TRSInterface.Draw(img: TImage);
begin
  img.DrawColor := $00FFFF;
  img.DrawBox(Self.Bounds);
end;

type
  TRSInterfaceTitle = record
    Bounds, CloseButton: TBox;
    TitleColor: TColor;
    IsOpen: function (): Boolean of object;
  end;

function TRSInterfaceTitle._IsOpen(): Boolean;
begin
  Result := Target.HasColor(RSColors.INTERFACE_BORDER, 0, 80, Self.CloseButton);
end;

procedure TRSInterfaceTitle.Setup(bounds: TBox);
begin
  Self.Bounds.X1 := bounds.X1 + 50;
  Self.Bounds.Y1 := bounds.Y1 + 10;
  Self.Bounds.X2 := bounds.X2 - 50;
  Self.Bounds.Y2 := Self.Bounds.Y1 + 17;

  Self.CloseButton.X1 := bounds.X2-27;
  Self.CloseButton.Y1 := bounds.Y1+8;
  Self.CloseButton.X2 := bounds.X2-7;
  Self.CloseButton.Y2 := bounds.Y1+28;

  Self.TitleColor := RSColors.TEXT_ORANGE;

  Self.IsOpen := @Self._IsOpen;
end;



function TRSInterfaceTitle.WaitOpen(time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(), interval, time);
end;


function TRSInterfaceTitle.GetTitle(): String;
begin
  Result := OCR.Recognize(Self.Bounds, RSFonts.BOLD, [Self.TitleColor, $0], 0);
end;

function TRSInterfaceTitle.IsTitle(text: String; similarity: Single = 0.8): Boolean;
var
  match: Single;
begin
  match := OCR.LocateInvert(Self.Bounds, text, [$344049,$0], 2, RSFonts.BOLD);
  Result := match >= similarity;
end;

function TRSInterfaceTitle.WaitTitle(text: String; similarity: Single = 0.8; time: Integer = 600; interval: Integer = -1): Boolean; overload;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsTitle(text, similarity), interval, time);
end;


function TRSInterfaceTitle.Close(escape: Boolean): Boolean;
begin
  if not Self.IsOpen() then Exit(True);

  case escape of
    False: Mouse.Click(Self.CloseButton, EMouseButton.LEFT);
    True:  Target.KeyPress(EKeyCode.ESCAPE);
  end;

  Result := SleepUntil(not Self.IsOpen(), 50, 600);
end;

function TRSInterfaceTitle.Close(escapeProbability: Single = -1): Boolean; overload;
begin
  if escapeProbability = -1 then escapeProbability := Biometrics.RandomDouble(0.5);
  Result := Self.Close(RandomBoolean(escapeProbability));
end;
