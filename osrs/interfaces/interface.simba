(*
# Interface
Interface core .
*)

{$DEFINE SRLT_INTERFACE_CORE_INCLUDED}
{$IFNDEF SRLT_OSRS}
  {$I SRLT/osrs.simba}
{$ENDIF}

type
  TRSInterface = record
    Bounds: TBox;
    Width, Height: Integer;
    Center, TopLeft, TopRight, BottomRight, BottomLeft: TPoint;
    Quad: TQuad;
  end;

  PRSInterface = ^TRSInterface;

procedure TRSInterface.Setup(const bounds: TBox);
begin
  Self.Bounds := bounds;
  Self.Width  := bounds.Width;
  Self.Height := bounds.Height;
  Self.Center := bounds.Center;

  Self.TopLeft     := bounds.TopLeft;
  Self.TopRight    := bounds.TopRight;
  Self.BottomRight := bounds.BottomRight;
  Self.BottomLeft  := bounds.BottomLeft;

  Self.Quad := TQuad.CreateFromBox(bounds);
end;

procedure TRSInterface.Draw(img: TImage);
begin
  img.DrawColor := $00FFFF;
  img.DrawBox(Self.Bounds);
end;


type
  TRSInterfaceTitle = record
    Bounds, CloseButton: TBox;
  end;

procedure TRSInterfaceTitle.Setup(const bounds: TBox);
begin
  Self.Bounds.X1 := bounds.X1 + 50;
  Self.Bounds.Y1 := bounds.Y1 + 10;
  Self.Bounds.X2 := bounds.X2 - 50;
  Self.Bounds.Y2 := Self.Bounds.Y1 + 17;

  Self.CloseButton.X1 := bounds.X2-27;
  Self.CloseButton.Y1 := bounds.Y1+8;
  Self.CloseButton.X2 := bounds.X2-7;
  Self.CloseButton.Y2 := bounds.Y1+28;
end;


function TRSInterfaceTitle.IsOpen(): Boolean;
begin
  Result := Target.HasColor($010000, 0, 80, Self.CloseButton);
end;

function TRSInterfaceTitle.WaitOpen(const time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(), interval, time);
end;


function TRSInterfaceTitle.GetTitle(): String;
begin
  Result := OCR.Recognize(Self.Bounds, RSFonts.BOLD, [RSColors.TEXT_ORANGE, $0], 0);
end;

function TRSInterfaceTitle.IsTitle(const text: String; const similarity: Single = 0.8): Boolean;
begin
  Result := OCR.LocateInvert(Self.Bounds, text, [$344049,0], 2, RSFonts.BOLD) >= similarity;
end;

function TRSInterfaceTitle.WaitTitle(const text: String; const similarity: Single = 0.8; const time: Integer = 600; interval: Integer = -1): Boolean; overload;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsTitle(text, similarity), interval, time);
end;


function TRSInterfaceTitle.Close(const escape: Boolean): Boolean;
begin
  if not Self.IsOpen() then Exit(True);

  case escape of
    False: Mouse.Click(Self.CloseButton, EMouseButton.LEFT);
    True:  Target.KeyPress(EKeyCode.ESCAPE);
  end;

  Result := SleepUntil(not Self.IsOpen(), 50, 600);
end;

function TRSInterfaceTitle.Close(escapeProbability: Single = 0): Boolean; overload;
begin
  Result := Self.Close(RandomBoolean(escapeProbability));
end;
