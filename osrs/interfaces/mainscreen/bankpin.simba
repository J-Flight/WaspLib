

{$DEFINE WL_BANKPIN_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type

  TRSBankPin = record
    Bounds: TBox;
    Buttons: TBoxArray;
  end;


procedure TRSBankPin.SetupInterface();
begin
  case RSClient.Mode of
    ERSMode.FIXED: Self.Bounds := MSInterface.CreateBounds([0, 11, 0, 0], 488, 305);
    ERSMode.RESIZABLE, ERSMode.MODERN_COMPACT, ERSMode.MODERN_WIDE:
      Self.Bounds := MSInterface.CreateBounds([0, 10, 0, 0], 488, 305);
  end;

  Self.Buttons := TBoxArray.Create(Self.Bounds.TopLeft.Offset(21,83), 3, 3, 63, 63, [31, 9]);
  Self.Buttons.Insert(Self.Buttons[2].Offset([84, 0]), 3);
end;


function TRSBankPin.IsOpen(): Boolean;
begin
  Result := Target.HasColor($060D56, 10, 3400, Self.Buttons[0]);
end;


function TRSBankPin.WaitOpen(time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(), interval, time);
end;



function TRSBankPin.IsLoading(): Boolean;
begin
  Result := not Target.HasColor($007FFF, 0, 1, Self.Buttons[0]);
end;


function TRSBankPin.WaitLoading(time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(not Self.IsLoading(), interval, time);
end;



function TRSBankPin.FindDigit(digit: Char): Integer;
var
  i: Integer;
  hovering: Integer = -1;
begin
  for i := 0 to High(Self.Buttons) do
  begin
    if Self.Buttons[i].Contains(Mouse.Position) then
    begin
      hovering := i;
      Continue;
    end;

    if OCR.Locate(Self.Buttons[i], digit, [$007FFF], 0, RSFonts.BOLD) > 0.95 then
      Exit(i);
  end;

  if hovering > -1 then Exit(hovering);
  Result := -1;
end;


function TRSBankPin.ClickDigit(digit: Char): Boolean;
var
  i: Integer;
begin
  i := Self.FindDigit(digit);
  if i < 0 then Exit;
  Mouse.Click(Self.Buttons[i], EMouseButton.LEFT);
  Result := True;
end;



function TRSBankPin.GetDigitIndex(): Integer;
const
  DIGITS: TStringArray = ['FIRST', 'SECOND', 'THIRD', 'FOURTH'];
var
  i: Integer;
begin
  for i := 0 to High(DIGITS) do
    if OCR.Locate(Self.Bounds, DIGITS[i], [$FFFFFF], 0, RSFonts.BOLD) > 0.95 then
      Exit(i+1);
end;


function TRSBankPin.Enter(pin: String; attempts: Integer = 3): Boolean;

  function _IsUnlocked(): Boolean;
  begin
    if Self.IsOpen() then
      Exit;
    Result := not Chat.GetOptionsString().ContainsAny(['try again', 'forgotten your PIN', 'PIN incorrectly several']);
  end;

var
  i, idx: Integer;
  digit: Char;
  chatCache: String;
begin
  if attempts <= 0 then Exit;

  for i := 0 to 3 do
  begin
    idx := Self.GetDigitIndex();
    if idx = 0 then Break;

    digit := pin[idx];
    if not Self.ClickDigit(digit) then Break;
    Biometrics.Sleep(200, 1500, ERandomDir.LEFT);
    SleepUntil((idx <> Self.GetDigitIndex()) and not Self.IsLoading(), 100, 5000);
  end;

  chatCache := Chat.GetOptionsString();
  if 'try again' in chatCache then
  begin
    Chat.Continue();
    Exit(Self.Enter(pin, Dec(attempts)));
  end;

  if 'forgotten your PIN' in chatCache then
  begin
    SleepUntil(not ('forgotten your PIN' in Chat.GetOptionsString()), 300, 20000);
    Exit(Self.Enter(pin, Dec(attempts)));
  end;

  if 'PIN incorrectly several' in chatCache then
    raise GetDebugLn('BankPin', 'Failed to enter the bank pin several times. Check that the pin is correct.');

  Result := SleepUntil(_IsUnlocked(), 300, 3000) or Self.Enter(pin, Dec(attempts));
end;


procedure TRSBankPin.Draw(img: TImage);
begin
  if not Self.IsOpen() then Exit;

  img.DrawColor := $00FFFF;
  img.DrawBox(Self.Bounds);

  img.DrawColor := $FFFFFF;
  img.DrawBoxArray(Self.Buttons, False);
end;

procedure ShowOnTarget(bankPin: TRSBankPin); overload;
var
  img: TImage;
begin
  img := Target.GetImage();
  bankPin.Draw(img);
  img.Show();
end;

var

  BankPin: TRSBankPin;
