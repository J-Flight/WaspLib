(*
# GoldScreen
Methods to interact with the gold‑crafting **Gold Screen** interface.

```{figure} ../../images/GoldScreen_interface.png
```

```{note}
Credits to Flight and Skunkworks
```
*)

{$DEFINE WL_GOLDSCREEN_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## ERSGoldItem
```pascal
ERSGoldItem = enum(GOLD_RING..ZENYTE_BRACELET);
```
Enum of all jewellery items that can be crafted on the {ref}`GoldScreen`.
*)
  ERSGoldItem = enum(
    { Rings }
      GOLD_RING, SAPPHIRE_RING, EMERALD_RING, RUBY_RING, DIAMOND_RING,
      DRAGONSTONE_RING, ONYX_RING, SLAYER_RING, ZENYTE_RING,
    { Necklaces }
      GOLD_NECKLACE, SAPPHIRE_NECKLACE, EMERALD_NECKLACE, RUBY_NECKLACE,
      DIAMOND_NECKLACE, DRAGONSTONE_NECKLACE, ONYX_NECKLACE, ZENYTE_NECKLACE,
    { Amulets }
      GOLD_AMULET, SAPPHIRE_AMULET, EMERALD_AMULET, RUBY_AMULET, DIAMOND_AMULET,
      DRAGONSTONE_AMULET, ONYX_AMULET, ZENYTE_AMULET,
    { Bracelets }
      GOLD_BRACELET, SAPPHIRE_BRACELET, EMERALD_BRACELET, RUBY_BRACELET,
      DIAMOND_BRACELET, DRAGONSTONE_BRACELET, ONYX_BRACELET, ZENYTE_BRACELET
  );


function ERSGoldItem.HasGoldItem(item: TRSItem): Boolean; static;
var
  g: ERSGoldItem;
  enumNormalString: String;
  normalString: String;
begin
  for g := Low(ERSGoldItem) to High(ERSGoldItem) do
  begin
    enumNormalString := ToString(g).Replace('_', ' ').Replace('ERSGoldItem.', '').ToLower();
    normalString := ToString(item).Replace('(u)', '').Trim().ToLower();
    if SameText(enumNormalString, normalString) then
      Exit(True);
  end;

  Result := False;
end;

function ERSGoldItem.FromItem(item: TRSItem): ERSGoldItem; static;
var
  e: ERSGoldItem;  
  enumNormalString: String;
  normalString: String;
begin
  for e := Low(ERSGoldItem) to High(ERSGoldItem) do
  begin
    enumNormalString := ToString(e).Replace('_', ' ').Replace('ERSGoldItem.', '').ToLower();
    normalString := ToString(item).Replace('(u)', '').Trim().ToLower();
    if SameText(enumNormalString, normalString) then
      Exit(e);
  end;
end;

const
  RS_CRAFT_ITEMS = [ERSGoldItem.GOLD_RING .. ERSGoldItem.ZENYTE_BRACELET];

(*
## TRSGoldScreen
Main record to interact with the {ref}`GoldScreen` interface.
*)
type
  TRSGoldScreen = record
    Title     : TRSInterfaceTitle;
    Slots     : TRSSlotInterface;
    Items     : TRSItemInterface;

    Bounds    : TBox;
    ItemBoxes : TBoxArray;
    Buttons   : array[ERSItemQuantity] of TRSButton;

  //  {── internal helpers ──}
  //  SetupInterface: procedure of Object;
  //  GetButtons: function: TRSButtonArray of Object;
  //  GetButton: function: TRSButton of Object;
  //
  //{── public API ──}
  //  IsOpen: function: Boolean of Object;
  //  WaitOpen: function: Boolean of Object;
  //  Close: function: Boolean of Object;
  //  SetQuantity: function (amount: Integer): Boolean of Object;
  //  CanCraftItem: function (i: ERSGoldItem): Boolean of Object;
  //  IsItemHighlighted: function (i: ERSGoldItem): Boolean of Object;
  //  CraftItem: function (i: ERSGoldItem): Boolean of Object;
  //
  //  Draw: procedure of Object;
  end;

(*
## GoldScreen.SetupInterface
```pascal
procedure TRSGoldScreen.SetupInterface();
```
Internal method used to setup the {ref}`TRSGoldScreen` coordinates.
Automatically called for you on the `GoldScreen` variable.
*)
procedure TRSGoldScreen.SetupInterface();
var
  topRow, gridBelow : TBoxArray;
  btns              : TRSButtonArray;
  i                 : Integer;
begin
  {─ outer bounds ─}
  case RSClient.Mode of
    ERSMode.FIXED:
      Self.Bounds := MSInterface.CreateBounds([0,1,0,-1], 492, 300);
    ERSMode.RESIZABLE_CLASSIC, ERSMode.RESIZABLE_MODERN:
      Self.Bounds := MSInterface.CreateBounds([0,1,0,-3], 492, 300);
  end;

  {─ title ─}
  Self.Title.Setup(Self.Bounds);

  {─ item‑slot boxes ─}
  topRow     := TBoxArray.Create([Self.Bounds.X1 + 36, Self.Bounds.Y1 + 66], 9, 1, 31, 31, [14,30]);
  gridBelow  := TBoxArray.Create([Self.Bounds.X1 + 36, Self.Bounds.Y1 + 127], 8, 3, 31, 31, [19,30]);

  Self.ItemBoxes += topRow;
  self.ItemBoxes += gridBelow;

  {─ slot & item helpers ─}
  Self.Slots.Setup('GoldScreen.Slots', Self.ItemBoxes);
  Self.Items.Setup('GoldScreen.Items', @Self.Slots, [0,10,3,0]);
  Self.Title.Setup(Self.Bounds);
  {─ quantity buttons ─}
  btns := Self.GetButtons();
  if Length(btns) = Length(ERSItemQuantity) then
    for i := 0 to High(btns) do
      Self.Buttons[ERSItemQuantity(i)] := btns[i];
end;

(*
## GoldScreen.GetButtons
```pascal
function TRSGoldScreen.GetButtons(): TRSButtonArray;
```
Returns an array with all cached quantity‑selection buttons.
Or caches it.
*)
function TRSGoldScreen.GetButtons(): TRSButtonArray;
var
  buttonGrid: TBoxArray;
begin
  if (Self.Buttons[0].Bounds.Area = 1) then
  begin
    buttonGrid := TBoxArray.Create([Self.Bounds.X1 + 445, Self.Bounds.Y1 + 38], 1, 5, 36, 36, [0,4]);
    Exit(TRSButtonArray.Create([[$25323B, 1.294]], buttonGrid));
  end;

  Result := Self.Buttons;
end;

(*
## GoldScreen.GetButton
```pascal
function TRSGoldScreen.GetButton(B: ERSGoldScreenButton): TRSButton;
```
Returns the specific quantity button requested.
*)
function TRSGoldScreen.GetButton(b: ERSItemQuantity): TRSButton;
begin
  Result := Self.Buttons[B];
end;

(*
## GoldScreen.IsOpen
```pascal
function TRSGoldScreen.IsOpen(): Boolean;
```
Returns `True` if the gold‑crafting interface is visible.
*)
function TRSGoldScreen.IsOpen(): Boolean;
begin
  try
    Result := Self.Title.IsOpen();
    //WriteLn('should draw: ', Result);
    //if Result then
    //  self.Draw();
  except
    Result := False;
  end;
end;

(*
## GoldScreen.WaitOpen
```pascal
function TRSGoldScreen.WaitOpen(time: Int32 = 600; interval: Int32 = -1): Boolean;
```
Waits up to `time` ms for the interface to appear.
*)
function TRSGoldScreen.WaitOpen(time, interval: Int32): Boolean;
begin
  if interval < 0 then
    interval := RandomMode(100,50,1500);
  Result := SleepUntil(Self.IsOpen, interval, time);
end;

(*
## GoldScreen.Close
```pascal
function TRSGoldScreen.Close(PressEscape: Boolean = False): Boolean;
```
Closes the interface via its close button or by pressing **Escape**.
*)
function TRSGoldScreen.Close(PressEscape: Boolean): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := (not PressEscape and MSInterface.Close(False))
            or
            (PressEscape and MSInterface.Close(True));

  if Result then
    Result := SleepUntil(not Self.IsOpen,
                         RandomMode(100,50,1500),
                         Random(1500,2000));
end;

(*
## GoldScreen.SetQuantity
```pascal
function TRSGoldScreen.SetQuantity(Amount: Int32): Boolean;
```
Selects the desired quantity button (1/5/10/X/All).
Pass `-1` for **All**.
*)
function TRSGoldScreen.SetQuantity(Amount: Int32): Boolean;
const
  ENABLED_COLOR  = $FFFFFF;
  DISABLED_COLOR = 2070783;
var
  txt: String;
  btn: TRSButton;
begin
  txt := ToString(Amount);
  if Amount = -1 then
    txt := 'All';

  for btn in Self.GetButtons() do
    if (OCR.Locate(btn.Bounds, txt, [$FFFFFF], 1, RSFonts.PLAIN_11) > 0.85) and btn.Enabled() then
      Exit(True);

  for btn in Self.GetButtons() do
    if OCR.Locate(btn.Bounds, txt, [$1F98FF], 1, RSFonts.PLAIN_11) > 0.85 then
    begin
      btn.Click();
      Exit(True);
    end;

  for btn in Self.GetButtons() do
    if OCR.Locate(btn.Bounds, 'X', [$1F98FF], 1, RSFonts.PLAIN_11) > 0.85 then
    begin
      btn.Click();
      Exit(Chat.AnswerQuery('Enter amount', ToString(Amount), 3000));
    end;
end;

(*
## GoldScreen.CanCraftItem
```pascal
function TRSGoldScreen.CanCraftItem(Item: ERSGoldItem): Boolean;
```
Returns `True` if the given item icon is available for crafting.
*)
function TRSGoldScreen.CanCraftItem(i: ERSGoldItem): Boolean;
const
  GOLD_COLOR: TColor := 2806763;
begin
  if not Self.IsOpen() then
    Exit;

  Result := Target.FindColor(GOLD_COLOR, 1, Self.ItemBoxes[i]).Length > 0;
end;

(*
## GoldScreen.IsItemHighlighted
```pascal
function TRSGoldScreen.IsItemHighlighted(Item: ERSGoldItem): Boolean;
```
Returns `True` if the given item is currently highlighted.
*)
function TRSGoldScreen.IsItemHighlighted(i: ERSGoldItem): Boolean;
var
  highlight: TColorTolerance := [4807018,2];
begin
  if not Self.IsOpen() then
    Exit;

  if not Self.CanCraftItem(i) then
    Exit;

  Result := Target.FindColor(highlight, Self.ItemBoxes[i]).Length > 0;
end;

(*
## GoldScreen.CraftItem
```pascal
function TRSGoldScreen.CraftItem(Item: ERSGoldItem; Quantity: Int32; UseSpaceBar: Boolean = False): Boolean;
```
Sets the quantity then crafts the requested item.
If `UseSpaceBar = True` and the item is highlighted it presses **Space**,
otherwise it clicks the item icon.
*)
function TRSGoldScreen.CraftItem(Item: ERSGoldItem; Quantity: Int32;
                                 UseSpaceBar: Boolean): Boolean;
begin
  if not Self.CanCraftItem(Item) then Exit;

  Result := Self.SetQuantity(Quantity);
  if not Result then Exit;

  if UseSpaceBar and Self.IsItemHighlighted(Item) then
    Keyboard.PressKey(EKeyCode.SPACE)
  else
    Mouse.Click(Self.ItemBoxes[Item], EMouseButton.LEFT);
end;

(*
## GoldScreen.Draw
```pascal
procedure TRSGoldScreen.Draw(Bmp: TMufasaBitmap);
```
Debug‑draws bounds, item slots, and quantity buttons on `Bmp`.
*)
procedure TRSGoldScreen.Draw();
var
  btn: TRSButton;
  allBoxes: TBoxArray;
begin
  allBoxes += Self.Bounds;
  allBoxes += Self.ItemBoxes;

  for btn in Self.GetButtons() do
    allBoxes += btn.Bounds;

  ShowOnTarget(allBoxes);
end;

(*
## GoldScreen variable
Global {ref}`TRSGoldScreen` variable.
*)
var
  GoldScreen: TRSGoldScreen;
