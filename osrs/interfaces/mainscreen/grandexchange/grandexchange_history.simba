(*
# GrandExchangeHistory
Methods to interact with the GrandExchangeHistory interface:
```{figure} ../../images/geh_interface.png
```

The {ref}`GrandExchange` is a very complex interface, probably the most complex
available in OldSchool RuneScape and for that reason, the functionality to
fully interact with it is split into multiple files and records:
- {ref}`GrandExchange`, the main grand exchange screen.
- {ref}`GrandExchangeHistory`, the history screen of the grand exchange and what this page is about.
- {ref}`GrandExchangeChat`, the chat interface of the grand exchange when you are setting up a buy offer.
- {ref}`GrandExchangeOffer`, the screen of the grand exchange where you view or setup a new offer.
*)

{$DEFINE WL_GRANDEXCHANGE_HISTORY_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TRSGrandExchangeHistory
Record responsible to handle the {ref}`GrandExchangeHistory` interface.
*)
  TRSGrandExchangeHistory = record
    Title: TRSInterfaceTitle;
    Scroll: TRSScrollBar;
    Bounds: TBox;
    ExchangeButton: TBox;
  end;

function TRSGrandExchangeHistory.IsOpen(): Boolean; forward;

(*
## GrandExchangeHistory.SetupInterface
```pascal
procedure TRSGrandExchangeHistory.SetupInterface();
```
Internal method used to setup the {ref}`TRSGrandExchangeHistory` coordinates.
This is automatically called for you on the {ref}`GrandExchangeHistory variable`.
*)
procedure TRSGrandExchangeHistory.SetupInterface();
begin
  Self.Bounds := GrandExchange.Bounds;

  Self.Scroll.Area.X1 := Self.Bounds.X1 + 10;
  Self.Scroll.Area.Y1 := Self.Bounds.Y1 + 40;
  Self.Scroll.Area.X2 := Self.Bounds.X2 - 26;
  Self.Scroll.Area.Y2 := Self.Bounds.Y2 - 14;

  Self.Scroll.Setup();

  Self.Title.Setup(Self.Bounds);
  Self.Title.IsOpen := @Self.IsOpen;

  with Self.Bounds do
    Self.ExchangeButton := [X1+7, Y1+7, X1+63, Y1+26];
end;

(*
## GrandExchangeHistory.IsOpen
```pascal
function TRSGrandExchangeHistory.IsOpen(): Boolean;
```
Returns true if the Grand Exchange is open.

Example:
```pascal
WriteLn GrandExchangeHistory.IsOpen();
```
*)
function TRSGrandExchangeHistory.IsOpen(): Boolean;
begin
  if BankPin.IsOpen() then
  begin
    if not BankPin.WaitLoading(3000) then
      raise GetDebugLn('BankPin', 'GrandExchangeHistory pin buttons don''t seem to have loaded in 3 seconds.');

    if not BankPin.Enter(Profiles.GetPin()) then
      raise GetDebugLn('BankPin', 'Failed to enter GrandExchangeHistory pin.');
  end;

  Result := Self.Title.IsTitle('Grand Exchange Trade History');
end;

(*
## GrandExchangeHistory.WaitOpen
```pascal
function TRSGrandExchangeHistory.WaitOpen(time: Integer; interval: Integer = -1): Boolean;
```
Returns true if the Grand Exchange is open within `time` milliseconds.

## Example:
```pascal
WriteLn GrandExchangeHistory.WaitOpen();
```
*)
function TRSGrandExchangeHistory.WaitOpen(time: Integer; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(), interval, time);
end;

(*
## GrandExchangeHistory.Close
```pascal
function TRSGrandExchangeHistory.Close(escape: Boolean): Boolean;
function TRSGrandExchangeHistory.Close(escapeProbability: Single = 0): Boolean; overload;
```
Closes the GrandExchangeHistory, Depending on `escape` or `escapeProbability the function will
either click the button or press escape key.

Example:
```pascal
 WriteLn GrandExchangeHistory.Close();
```
*)
function TRSGrandExchangeHistory.Close(escape: Boolean): Boolean;
begin
  Result := Self.Title.Close(escape);
end;

function TRSGrandExchangeHistory.Close(escapeProbability: Single = -1): Boolean; overload;
begin
  Result := Self.Title.Close(escapeProbability);
end;

(*
## GrandExchangeHistory.Slots
```pascal
property TRSGrandExchangeHistory.Slots: TBoxArray;
```
Returns the slot boxes of the {ref}`GrandExchangeHistory` interface.

Example:
```pascal
{$I WaspLib/osrs.simba}
begin
  while True do
    ShowOnTarget(GrandExchangeHistory.Slots);
end.
```
```{figure} ../../images/geh_slots.gif
```
*)
property TRSGrandExchangeHistory.Slots: TBoxArray;
var
  tpa: TPointArray;
  b, slot, offset: TBox;
  h: Integer;
begin
  with Self.Bounds do
    tpa := Target.FindColor(RSColors.TEXT_ORANGE, 0, [X1+42, Y1+80, X1+92, Y2-80]);
  if tpa = [] then Exit;

  for tpa in tpa.Cluster(20, 20) do
  begin
    b := tpa.Bounds();
    case b.Height of
      9:  slot := [b.X1-36, b.Y1-16, b.X1+411, b.Y1+29];
      11: slot := [b.X1-36, b.Y1-18, b.X1+411, b.Y1+27];
      else Continue;
    end;
    Break;
  end;

  if slot = Default(TBox) then Exit;

  Result += slot;
  offset := slot;
  h := slot.Height;
  repeat
    offset := offset.Offset([0,-h]);
    b := offset.Clip(Self.Scroll.Area);
    if b.Height > 32 then
      Result += offset;
  until offset.Y1 < Self.Scroll.Area.Y1;

  repeat
    offset := offset.Offset([0,h]);
    b := offset.Clip(Self.Scroll.Area);
    if b.Height > 32 then
      Result += offset;
  until offset.Y2 > Self.Scroll.Area.Y2;
end;

(*
## GrandExchangeHistory.Open
```pascal
function TRSGrandExchangeHistory.Open(): Boolean;
```
Attempts to open the {ref}`GrandExchangeHistory`, returns `True` on success.

Example:
```pascal
WriteLn GrandExchangeHistory.Open();
```
*)
function TRSGrandExchangeHistory.Open(): Boolean;
begin
  if Self.IsOpen() then Exit(True);
  if not GrandExchange.IsOpen() then Exit;

  Mouse.Click(GrandExchange.HistoryButton, EMouseButton.LEFT);
  Result := Self.WaitOpen(2000);
end;

var
(*
## GrandExchangeHistory variable
Global {ref}`TRSGrandExchangeHistory` variable.
*)
  GrandExchangeHistory: TRSGrandExchangeHistory;
