(*
# InterfaceArea
Interface area is the area where mainscreen interfaces can occupy.
*)
{$DEFINE WL_INTERFACE_AREA_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
  ERSInterfaceType = (CLASSIC, PAPER, ANY);

  TRSInterfaceArea = type TRSInterface;

procedure TRSInterfaceArea.SetupInterface();
begin
  Self.Bounds.Y1 := MainScreen.Bounds.Y1;
  Self.Bounds.X1 := MainScreen.Bounds.X1;

  case RSClient.Mode of
    ERSMode.FIXED:
    begin
      Self.Bounds.X2 := MainScreen.Bounds.X2;
      Self.Bounds.Y2 := MainScreen.Bounds.Y2;
    end;

    ERSMode.RESIZABLE:
    begin
      Self.Bounds.X2 := GameTabs.Bounds.X1 - 10;
      Self.Bounds.Y2 := Chat.Bounds.Y1;
    end;

    ERSMode.MODERN_COMPACT, ERSMode.MODERN_WIDE:
    begin
      Self.Bounds.X2 := GameTab.Bounds.X1 - 22;
      Self.Bounds.Y2 := Chat.Bounds.Y1;
    end;
  end;

  Self.Width  := Self.Bounds.Width;
  Self.Height := Self.Bounds.Height;
  Self.Center := Self.Bounds.Center;

  Self.TopLeft     := Self.Bounds.TopLeft;
  Self.TopRight    := Self.Bounds.TopRight;
  Self.BottomRight := Self.Bounds.BottomRight;
  Self.BottomLeft  := Self.Bounds.BottomLeft;

  Self.Quad := TQuad.CreateFromBox(Self.Bounds);
end;

(*
## TRSInterfaceArea.IsOpen
```pascal
function TRSInterfaceArea.IsOpen(interfaceType: ERSInterfaceType = ERSInterfaceType.ANY): Boolean;
```
Returns True/False if any interface is found open.
*)
function TRSInterfaceArea.IsOpen(interfaceType: ERSInterfaceType = ERSInterfaceType.ANY): Boolean;
begin
  case interfaceType of
    ERSInterfaceType.CLASSIC: Result := Target.HasColor(3358536, 2, 10000, Self.Bounds);
    ERSInterfaceType.PAPER:   Result := False;//TODO: SRL.CountColor(CTS2(8693433, 5, 0.10, 1.17), Self.Bounds) > 35000;
    ERSInterfaceType.ANY:     Result := Self.IsOpen(ERSInterfaceType.CLASSIC) or Self.IsOpen(ERSInterfaceType.PAPER);
  end;
end;

(*
## TRSInterfaceArea.WaitOpen
```pascal
function TRSInterfaceArea.WaitOpen(interfaceType: ERSInterfaceType = ERSInterfaceType.ANY; time: Integer = 600; interval: Integer = -1): Boolean;
```
Returns True/False if any interface is found open within `time` milliseconds.
*)
function TRSInterfaceArea.WaitOpen(interfaceType: ERSInterfaceType = ERSInterfaceType.ANY; time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(interfaceType), interval, time);
end;


function TRSInterfaceArea.GetCloseButton(): TBox;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  b: TBox;
  circularity: Double;
  boxes: TBoxArray;
  weights: TIntegerArray;
begin
  with Self.Bounds do
    tpa := Target.FindColor(TRSInterface.BORDER, 0, [X2-Width div 3, Y1, X2, Y1 + Height div 3]);

  if tpa.IsEmpty then
    Exit;

  atpa := tpa.Cluster(1.5);

  for tpa in atpa do
  begin
    if Length(tpa) < 50 then
      Continue;

    b := tpa.Bounds();
    case b.Height of
      21,23:;
      else Continue;
    end;

    case b.Width of
      21,24:;
      else Continue;
    end;

    circularity := tpa.Circularity();

    if InRange(circularity, 0.443, 0.445) or InRange(circularity, 0.471, 0.473) then
    begin
      boxes += b;
      with b.Center do
        weights += X*100 - Y;
    end;
  end;

  if boxes.IsEmpty then
    Exit;

  Result := boxes.SortFrom(Self.TopRight).First;
end;


function TRSInterfaceArea.Close(escape: Boolean): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  case escape of
    False: Mouse.Click(Self.GetCloseButton(), EMouseButton.LEFT);
    True:  Keyboard.KeyPress(EKeyCode.ESCAPE);
  end;

  Result := SleepUntil(not Self.IsOpen(), 50, 600);
end;

function TRSInterfaceArea.Close(escapeProbability: Single = -1): Boolean; overload;
begin
  if escapeProbability = -1 then escapeProbability := Biometrics.RandomDouble(0.5);
  Result := Self.Close(RandomBoolean(escapeProbability));
end;


function TRSInterfaceArea.CreateBounds(offset: TBox; width, height: Integer = 0): TBox;
var
  center, half, halfMax: Single;
begin
  offset.X1 += Self.Bounds.X1;
  offset.Y1 += Self.Bounds.Y1;
  offset.X2 += Self.Bounds.X2;
  offset.Y2 += Self.Bounds.Y2;

  if width > 0 then
  begin
    half := (offset.X2 - offset.X1) / 2;
    center := offset.X1 + half;
    halfMax := (width - 1) / 2;

    Result.X1 := Max(Floor(center - half), Floor(center - halfMax));
    Result.X2 := Min(Floor(center + half), Floor(center + halfMax));
  end
  else
  begin
    Result.X1 := offset.X1;
    Result.X2 := offset.X2;
  end;

  if height > 0 then
  begin
    half := (offset.Y2 - offset.Y1) / 2;
    center := offset.Y1 + half;
    halfMax := (height - 1) / 2;

    Result.Y1 := Max(Floor(center - half), Floor(center - halfMax));
    Result.Y2 := Min(Floor(center + half), Floor(center + halfMax));
  end
  else
  begin
    Result.Y1 := offset.Y1;
    Result.Y2 := offset.Y2;
  end;
end;


var
  MSInterface: TRSInterfaceArea;
