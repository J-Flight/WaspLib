(*
# Minimap
Methods to interact with the minimap.
*)

{$DEFINE SRLT_MINIMAP_INCLUDED}
{$IFNDEF SRLT_OSRS}
  {$I SRLT/osrs.simba}
{$ENDIF}

type
  ERSMinimapDot  = (PLAYER, NPC, ITEM);
  ERSMinimapDots = set of ERSMinimapDot;
  TRSMinimapDotArray = array [ERSMinimapDot] of TPointArray;

  ERSMinimapOrb  = (HITPOINTS, PRAYER, ENERGY, SPECIAL);

  TRSMinimap = record
    RSInterface: TRSInterface;
    Orbs: TCircleArray;
    Polygon: TPolygon;

    Compass: record
      PreviousRadians: Single;
      Circle: TCircle;
    end;

    {%codetools on}
    Masks: record //Thanks to Olly
      const RESIZABLE: TImage = ImageFromString('IMG:AQAAAJgAAACYAAAAAAAAAJDjPwEAAAAAwQIJAAEAAACQ4z8BAAAAALEMAQABAAAAkOmCAQAAAACQoM4JAAAAAGACAABgAgAAkOmCAQAAAAABAAAAmAAAAJgAAAAgAAAAAAAAAAAAAAAAAAAAAwAAACAIEAgICAAIGAAAAAAAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAIAAACXoLd2AAAABnRSTlMAAAAAAABupgeRAAACi0lEQVR4nO3cQZLiMBBEUbj/pXszM00w2NhSqSor9X8QbFhYzrfrxjwej6fLa6zyY4fdfvkJMtmMaetPoIBngFp/AjW8o8qnaAmpXPk4DSB7VT6XImTfyqdTgfSofkYIA9sO0rstIPfJGXK3DCF3zgSSnn/fG0PSa10h6f+aQdJ5PSDpSuqQdD1dSLqbIiSNpQVJM6lA0nz1kBRVJSTFVgNJK8qGpHXlQdLqMiApJyBNWgtJma2CpPziIakqIE2KhKTagDQpBpIUmoUknYA0aRyS1ALSpBFI0gxIk+5BknJAmnQVkvQD0qTvkNQlIE0C0qQzSOoVkCYBaRKQPgFpEpAmAWkSkD4BaRKQJr1DUtOA9AlIk34hqXVAmvQHkroHpEkgEhERERERERERERG9xB/OTeIfyyYBaRJfvjIJSJOANIhHBkwC0iQgTQLSJCBNAtIhHnQ1CUiTeNDVJCAd+vDzLNQxIE0C0iR++cqhJ5AeAWnSISSWjXqHA7JpQJr0BRLLFn1QA7JjlyCxFO8zGZDtugGJpWyHXkcfYKnZCCSWap1JnUNiKdUUJJYifTECsksBkFiW9x0ISP0uAQEp2EWUEUgscxogBFKrYUIghZpUvAeJ5aLmFW9DYhleiCKQxUUpjkBiGVWg4iAkliFJQGI5WaziFCSWM2lBYjlWuGIAJJYDiUJieTddSERv1QASziu1gcTyvE6QWJ7UDBLLo/pBYvnWwp1XQ2L5r7UjJ0Bi+UhYGMjVJS2cc5k9OVO3zbzYVpbZwyZfbwfOmklLrurKWTlm4bWdOOtnLD9Bd+byiXpAKouWb9ISUoezfAQHyELL8ht3g8y0LL9Tc8illuW3thdkFG35sWNePwzzFBo2j8O9AAAAAElFTkSuQmCC');
      const FIXED:     TImage = ImageFromString('IMG:AQAAAJEAAACXAAAAAAAAAIDjPwEAAAAA7joBAAEAAACQ4z8BAAAAALEMAQABAAAArNaCAQAAAADsLIQBAAAAAEQCAABEAgAArNaCAQAAAAABAAAAkQAAAJcAAAAgAAAAAAAAAAAAAAAAAAAAAwAAACAIEAgICAAIGAAAAAAAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAJEAAACXCAIAAACa4y5pAAAABnRSTlMAAAAAAABupgeRAAACqElEQVR4nO3bS27kMBAE0db9L+3FDGDD7taHLDIzyQjoAKp8MHojv16vY6HnPPnrlZ0pf4NClZ7kp61mNjP5sdlm2uTnJ5m5JR/E18w/+UQuZonta5beXmYrtYXZeq1stnarme3TCmZ7Fmy2c5FmlGRGPwswo79Zm9GnTM3oPC8zup+FGT1NbEZtycyoJ4EZ9TfVjKqaZEa1YZbXcDMa0UAzGtcQMxpdsRnNCbO8ysxoZgVmNL8uM1KFWV6NZqQNs7wem5FDmOX1wIx8umVGbmGW14UZeYZZXh/NyDnM8sIsrzdm5B9meWGWF2aRYZbXtxmlhFlemGUGWF6YERFRevyW5YVZXpjlhVlemOWFWV6Y5YVZXpjlhVlemOWFWV6Y5fX/2wJK6cAsroNveOLCLC/M8uJ7/bwwywuzsPg/z7wwywuzvDDLC7O8fpuRf/ydhXVgFhdmeb03g822A7O4MMvrzAw2ww7M4sIsr2sz2Kz6q4OZe3fNYDPpLQ1m1j0zg03eJxfMfGsxg03YCcqFGWySzkWuzWCb3CUHZnbVmME2rTsWd81gm9BNiAdmsA3tvsIzM+RG9HT/FjPYCmsYv9EMtpLalm83Q66nns17zWBrqHPwAjPwbla1c6UZcp+qXbjeDLZflc87xAy5fw0adqDZ5mzjVh1rtqfc6D1nmG3FNmHMSWY7yE2bcarZqnKTBxSYLcY2fz2N2Rpyqt2UZtFswtHEZoly8rkszILY5EMZmUWwySeyMzNnk49jambLJp/F2syQTT5IgJkVm3yKGDMTNvkIYWZyNvn5kWZCNvnhwWYSNvnJmGGGmcGjfwMrNvmxmGGGmcejfwMfNvmZS5lNYJMfuKDZODn5UYublbPJz8EMM+NnT61ss042+ctvavbmmHWdvp8vL+MYGlUk74gAAAAASUVORK5CYII=');
    end;
    const DotIMGs: array [ERSMinimapDot] of TImage = [
      ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAIDjPwEAAAAA7joBAAEAAACQ4z8BAAAAALEMAQABAAAAoCcXDAAAAABAKBcMAAAAAAgAAAAIAAAAoCcXDAAAAAABAAAAAgAAAAIAAAAYAAAAAAAAAAAAAAAAAAAAAwAAABgIEAgICAAAAAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAEUlEQVR4nGP4BwYMQPDmzRsARBgIuYq1W6UAAAAASUVORK5CYII='),
      ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAIDjPwEAAAAA7joBAAEAAACQ4z8BAAAAALEMAQABAAAAABYXDAAAAADAFhcMAAAAAAgAAAAIAAAAABYXDAAAAAABAAAAAgAAAAIAAAAYAAAAAAAAAAAAAAAAAAAAAwAAABgIEAgICAAAAAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAFElEQVR4nGP484fp61cGEHj7lgEAL5AFvzCPessAAAAASUVORK5CYII='),
      ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAIDjPwEAAAAA7joBAAEAAACQ4z8BAAAAALEMAQABAAAAYBgXDAAAAAAAGRcMAAAAAAgAAAAIAAAAYBgXDAAAAAABAAAAAgAAAAIAAAAYAAAAAAAAAAAAAAAAAAAAAwAAABgIEAgICAAAAAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAFUlEQVR4nGP4p6Dwh42NAQg+MjAAABzlAzh9c63TAAAAAElFTkSuQmCC')
    ];
    const FLAG: TImage = ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAIDjPwEAAAAA7joBAAEAAACQ4z8BAAAAALEMAQABAAAAgH8GCQAAAAAAiAYJAAAAAAgAAAAIAAAAgH8GCQAAAAABAAAAAgAAAAIAAAAYAAAAAAAAAAAAAAAAAAAAAwAAABgIEAgICAAAAAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAFUlEQVR4nGP4z8AQayzIcCyMBUgBABrmA2K2r4OdAAAAAElFTkSuQmCC');
    {%codetools on}
  end;

procedure TRSMinimap.Setup();
var
  i: Integer;
begin
  for i := 0 to 2 do
    Self.DotIMGs[i].Alpha[0,1] := 0;
end;

procedure TRSMinimap.SetupInterface();
var
  b: TBox;
  tpa: TPointArray;
begin
  case RSClient.Mode of
    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
    begin
      b.X1 := Target.Bounds.X2 - 157;
      b.X2 := Target.Bounds.X2 - 6;
      b.Y1 := Target.Bounds.Y1 + 8;
      b.Y2 := Target.Bounds.Y1 + 159;
    end;

    ERSClientMode.FIXED:
    begin
      b.X1 := Target.Bounds.X2 - 194;
      b.X2 := Target.Bounds.X2 - 50;
      b.Y1 := Target.Bounds.Y1 + 9;
      b.Y2 := Target.Bounds.Y1 + 159;
    end;
  end;

  Self.RSInterface.Setup(b);

  SetLength(Self.Orbs, Ord(High(ERSMinimapOrb))+1);

  with Self.RSInterface.Bounds do
    case RSClient.Mode of
      ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Compass.Circle := [X1 - 2,  Y1 + 14,  17];
        Self.Orbs[ERSMinimapOrb.HITPOINTS] := [X1 - 13, Y1 + 55,  12];
        Self.Orbs[ERSMinimapOrb.PRAYER]    := [X1 - 13, Y1 + 90,  12];
        Self.Orbs[ERSMinimapOrb.ENERGY]    := [X1 - 3,  Y1 + 121, 12];
        Self.Orbs[ERSMinimapOrb.SPECIAL]   := [X1 + 19, Y1 + 148, 12];
        tpa := [[0, -76], [21, -73], [40, -64], [56, -51], [68, -33], [75, -1], [68, 31], [50, 43], [40, 62], [21, 71], [0, 74], [-21, 71], [-40, 62], [-56, 49], [-68, 31], [-75, -1], [-68, -33], [-56, -51], [-40, -64], [-21, -73]];
      end;

      ERSClientMode.FIXED:
      begin
        Self.Compass.Circle := [X1 - 8,  Y1 + 12,  17];
        Self.Orbs[ERSMinimapOrb.HITPOINTS] := [X1 - 13, Y1 + 49,  12];
        Self.Orbs[ERSMinimapOrb.PRAYER]    := [X1 - 13, Y1 + 84,  12];
        Self.Orbs[ERSMinimapOrb.ENERGY]    := [X1 - 3,  Y1 + 116, 12];
        Self.Orbs[ERSMinimapOrb.SPECIAL]   := [X1 + 19, Y1 + 142, 12];
        tpa := [[21, -71], [39, -62], [55, -49], [67, -32], [70, 0], [66, 19], [57, 32], [41, 43], [20, 58], [12, 71], [0, 74], [-11, 72], [-24, 55], [-47, 39], [-60, 31], [-66, 22], [-71, 0], [-72, -14], [-67, -32], [-55, -49], [-39, -62], [-21, -71], [0, -74]];
      end;
    end;

  Self.Polygon := tpa.Offset(Self.RSInterface.Center);
end;

function TRSMinimap.Contains(p: TPoint): Boolean;
begin
  Result := Self.Polygon.Contains(p);
end;

function TRSMinimap.Filter(tpa: TPointArray): TPointArray;
var
  p: TPoint;
begin
  for p in tpa do
    if Self.Contains(p) then
      Result += p;
end;


function TRSMinimap.RandomPoint(p: TPoint; randomness: Int32): TPoint;
begin
  if not Self.Contains(p) then
    raise GetDebugLn('Minimap', ToStr(p) + ' is not a valid point to generate a random point.');

  while not Self.Contains(Result) do
    Result := p.Random(-randomness, randomness);
end;


function TRSMinimap.GetCompassAngle(asDegrees: Boolean = True): Single;
var
  dotpts: TPointArray;
  g: T2DPointArray;
begin
  with Self.Compass.Circle do
  begin
    dotpts := Target.FindColor(ColorTolerance($2220A1, 0.811, EColorSpace.HSL, [2.608, 0.137, 0.256]), Bounds); // red
    if dotpts = [] then Exit;

    g := dotpts.ExtractDist([X,Y], 10, Radius).Cluster(4);

    if Length(g) < 3 then Exit;

    if (g[0].Mean().DistanceTo(g[1].Mean()) > 25) then Swap(g[0], g[2]);
    if (g[0].Mean().DistanceTo(g[2].Mean()) > 25) then Swap(g[0], g[1]);

    if Abs(DeltaAngle(ArcTan2(g[1,0].Y - Y, g[1,0].X - X)+PI/2, ArcTan2(g[0,0].Y - Y, g[0,0].X - X), 2*PI)) > PI/2 then
      Swap(g[1], g[2]);

    Result := RadNormalize(ArcTan2(g[1].Mean().Y - g[2].Mean().Y, g[1].Mean().X - g[2].Mean().X));

    Self.Compass.PreviousRadians := Result;

    if asDegrees then
      Result := radToDeg(Result);
  end;
end;

(*
## Minimap.SetCompassAngle
```pascal
procedure TRSMinimap.SetCompassAngleEx(degrees, accuracy: Double);
procedure TRSMinimap.SetCompassAngle(degrees: Double);
procedure TRSMinimap.SetCompassAngle(minDegrees, maxDegrees: Double); overload;
```
Sets the current compass angle.
If you specify a minimum and a maximum angle a gaussian distribution will be used.

Example:
```pascal
Minimap.SetCompassAngle(180);
```
*)
function TRSMinimap.SetCompassAngleEx(degrees, accuracy: Single): Boolean;
const
  DEG_PER_PIXEL = 2.83;
var
  available: TBox;
  remaining: Int32;
  left2right: Boolean;
  destination: TPoint;
  pixels: Int32;
  timeout: UInt64;
begin
  available := Target.Bounds.Expand(-10);
  degrees := DegNormalize(degrees);
  timeout := GetTickCount() + RandomMean(6000, 8000);

  repeat
    remaining := Round(DeltaAngle(Self.GetCompassAngle(), degrees));
    if Abs(remaining) <= accuracy then Exit(True);

    pixels := Round(Abs(DeltaAngle(Self.GetCompassAngle(), degrees)) * DEG_PER_PIXEL);
    left2right := InRange(remaining, 1, 180) or (remaining < -180);

    if left2right then
    begin
      if (not available.Contains(Target.MouseXY)) or ((Target.MouseY + 200 > available.Y2) or (Target.MouseX + pixels > available.X2)) then
        Target.MouseMove([available.X1, available.Y1, available.X1 + 200, available.Y1 + 200]);

      destination.X := Target.MouseX + pixels;
    end
    else
    begin
      if (not available.Contains(Target.MouseXY)) or ((Target.MouseY + 200 > available.Y2) or (Target.MouseX - pixels < available.X1)) then
        Target.MouseMove([available.X2 - 200, available.Y1, available.X2, available.Y1 + 200]);

      destination.X := Target.MouseX - Pixels;
    end;

    destination.Y := Random(Target.MouseY + 100, available.Y2);

    Target.MouseDown(EMouseButton.MIDDLE);
    Target.MouseMove(destination);
    Target.MouseUp(EMouseButton.MIDDLE);

    Sleep(100, 1000, ERandomDir.LEFT);
  until GetTickCount() > timeout;

  WriteLn GetDebugLn('Minimap', 'SetCompassAngle timed out.', EErrorLevel.WARN);

  //TODO:
  //if not RSClient.IsLoggedIn() then
  //  Login.LoginPlayer()
  //else
  //  Self.DebugLn('Make sure the setting "Middle mouse button controls the camera" is enabled in the game settings.');
end;

function TRSMinimap.SetCompassAngle(degrees: Single): Boolean;
begin
  Result := Self.SetCompassAngleEx(degrees, 5);
end;

function TRSMinimap.SetCompassAngle(minDegrees, maxDegrees: Single; accuracy: Single = 5): Boolean; overload;
var
  degrees: Single;
begin
  degrees := RandomMean(DegNormalize(minDegrees), DegNormalize(maxDegrees));
  Result := Self.SetCompassAngleEx(degrees, accuracy);
end;



function TRSMinimap.Poisoned(): Boolean;
begin
  Result := Target.HasColor(16391, 3, 1, Self.Orbs[ERSMinimapOrb.HITPOINTS].Bounds);
end;

function TRSMinimap.Envenomed(): Boolean;
begin
  Result := Target.HasColor(1515790, 9, 1, Self.Orbs[ERSMinimapOrb.HITPOINTS].Bounds);
end;

function TRSMinimap.RunEnabled(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($58B1CB, 4.504, EColorSpace.HSV, [1.869, 0.609, 0.524]), 1, Self.Orbs[ERSMinimapOrb.ENERGY].Bounds);
end;

function TRSMinimap.HasStamina(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($2D61C1, 1.475, EColorSpace.HSV, [2.455, 0.300, 0.247]), 1, Self.Orbs[ERSMinimapOrb.ENERGY].Bounds);
end;

function TRSMinimap.PrayerEnabled(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($2188AB, 10.980, EColorSpace.HSV, [1.317, 1.076, 0.609]), 1, Self.Orbs[ERSMinimapOrb.PRAYER].Bounds);
end;

function TRSMinimap.SpecialEnabled(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($999273, 1.308, EColorSpace.RGB, [0.122, 0.640, 2.240]), 1, Self.Orbs[ERSMinimapOrb.SPECIAL].Bounds);
end;

function TRSMinimap.HasSpecialWeapon(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($A68F56, 5.999, EColorSpace.RGB, [0.270, 1.494, 1.237]), 1, Self.Orbs[ERSMinimapOrb.SPECIAL].Bounds);
end;


function TRSMinimap.Toggle(orb: ERSMinimapOrb): Boolean;
var
  state: Boolean;
begin
  case orb of
    ERSMinimapOrb.HITPOINTS: Exit;
    ERSMinimapOrb.PRAYER:  state := Self.PrayerEnabled();
    ERSMinimapOrb.ENERGY:  state := Self.RunEnabled();
    ERSMinimapOrb.SPECIAL:
      if not Self.HasSpecialWeapon() then
        Exit
      else
        state := Self.SpecialEnabled();
  end;

  Mouse.Click(Self.Orbs[orb], EMouseButton.LEFT);

  case orb of
    ERSMinimapOrb.HITPOINTS: Exit;
    ERSMinimapOrb.PRAYER:  Result := Self.PrayerEnabled() <> state;
    ERSMinimapOrb.ENERGY:  Result := Self.RunEnabled() <> state;
    ERSMinimapOrb.SPECIAL: Result := Self.SpecialEnabled() <> state;
  end;
end;


function TRSMinimap.FindFlag(out p: TPoint): Boolean;
begin
  p := Target.FindImage(Self.FLAG, 0, Self.RSInterface.Bounds);
  Result := Self.Polygon.Contains(p);
end;

function TRSMinimap.HasFlag(): Boolean;
var
  p: TPoint;
begin
  Result := Self.FindFlag(p);
end;

function TRSMinimap.WaitFlag(time: Integer = 600; interval: Integer = -1): Boolean;
begin
  if interval = -1 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.HasFlag(), interval, time);
end;


function TRSMinimap.GetGridStep1(angle: Single): TPointArray;
var
  y, x: Integer;
begin
  for y := Self.RSInterface.Center.Y - 80 to Self.RSInterface.Center.Y + 80 with 4 do
    for x := Self.RSInterface.Center.X - 80 to Self.RSInterface.Center.X + 80 with 4 do
      Result += Point(x,y);
end;

function TRSMinimap.GetGrid(angle: Single): TPointArray;
var
  y, x: Integer;
begin
  for y := Self.RSInterface.Center.Y - 80 to Self.RSInterface.Center.Y + 80 with 4 do
    for x := Self.RSInterface.Center.X - 80 to Self.RSInterface.Center.X + 80 with 4 do
      Result += Point(x,y).Rotate(angle, Self.RSInterface.Center);
end;


//Normalize TPoint for 0º
function TRSMinimap.Normalize(pt: TPoint; angle: Single): TPoint;
begin
  with pt.Rotate(-angle, Self.RSInterface.Center) do
  begin
    Result.X := Round((X - Self.RSInterface.Center.X) / 4) * 4 + Self.RSInterface.Center.X;
    Result.Y := Round((Y - Self.RSInterface.Center.Y) / 4) * 4 + Self.RSInterface.Center.Y;
  end;
end;

function TRSMinimap.NormalizeEx(vector: Vector2; angle: Single): Vector2;
begin
  with vector.Rotate(-angle, Self.RSInterface.Center) do
  begin
    Result.X := Round((X - Self.RSInterface.Center.X) / 4) * 4 + Self.RSInterface.Center.X;
    Result.Y := Round((Y - Self.RSInterface.Center.Y) / 4) * 4 + Self.RSInterface.Center.Y;
  end;
end;


function TRSMinimap.GetDots(dot: ERSMinimapDot; bounds: TBox): TPointArray;
const
  COLORS: array [ERSMinimapDot] of array [0..1] of TColor = [
    [$FEFEFE, $ECECEC], [$02FCFC, $00EDED], [$0606FC, $0000F1]
  ];
var
  img: TImage;
  y,x: Integer;
begin
  bounds := bounds.Clip(Self.Polygon.Bounds());
  img := TImage.CreateFromTarget(bounds);

  for y := 0 to img.Height-2 do
    for x := 0 to img.Width-2 do
      if (img.Pixel[x,y] = COLORS[dot][0]) and (img.Pixel[x+1,y] = COLORS[dot][1]) then
        Result += [x + bounds.X1+2, y + bounds.Y1-1];
  img.Free();
end;

function TRSMinimap.GetDots(dot: ERSMinimapDot): TPointArray; overload;
begin
  Result := Self.GetDots(dot, Self.Polygon.Bounds());
end;

function TRSMinimap.GetDots(dots: ERSMinimapDots; bounds: TBox): TRSMinimapDotArray; overload;
var
  dot: ERSMinimapDot;
  angle: Single;
begin
  angle := Self.GetCompassAngle(False);
  for dot in dots do
    Result[dot] := Target.FindImageEx(Self.DotIMGs[dot], 0, -1, bounds.Clip(Self.Polygon.Bounds()));
end;

function TRSMinimap.GetDots(dots: ERSMinimapDots = [ERSMinimapDot.PLAYER, ERSMinimapDot.NPC, ERSMinimapDot.ITEM]): TRSMinimapDotArray; overload;
begin
  Result := Self.GetDots(dots, Self.Polygon.Bounds());
end;


function TRSMinimap.CleanImage(img: TImage): TImage;

  procedure _Paint(p: TPoint);
  var
    area: TBox;
    pixel: Int32;
    x, y: Int32;
  begin
    area := TBox.Create(p.X - 2, p.Y - 2, p.X + 2, p.Y + 3);
    area := area.Clip([0,0,img.Width-1, img.Height-1]);

    for y := area.Y1 to area.Y2 do
      for x := area.X1 to area.X2 do
      begin
        pixel := img.Pixel[x, y];

        if SimilarColors($FFFFFF, pixel, 30) then
          img.Pixel[x, y] := 0;

        if SimilarColors($00FFFF, pixel, 30) then
          img.Pixel[x, y] := 0;

        if SimilarColors($0000FF, pixel, 30) then
          img.Pixel[x, y] := 0;

        if SimilarColors($000000, pixel, 1) then
          img.Pixel[x, y] := 0;
      end;
  end;

var
  dots: TRSMinimapDotArray;
  dot: ERSMinimapDot;
  topLeft, p: TPoint;
  tpa: TPointArray;
begin
  topLeft := Self.Polygon.Bounds().TopLeft;

  dots := Self.GetDots();
  for dot := ERSMinimapDot.PLAYER to ERSMinimapDot.ITEM do
    for p in dots[dot] do
      _Paint(p.Offset(-topLeft.X, -topLeft.Y));
  _Paint(img.Center); // our own player


  // TODO: account for tolerance
  img.ReplaceColor(255,0);
  img.ReplaceColor(284358,0);
  img.ReplaceColor(1127261,0);

  img.DrawColor := 0;

  case RSClient.Mode of
    ERSClientMode.FIXED: img.DrawImage(Self.Masks.FIXED, [0,0]);
    ERSClientMode.RESIZABLE_CLASSIC, ERSCLientMode.RESIZABLE_MODERN: img.DrawImage(Self.Masks.RESIZABLE, [0,0]);
  end;

  tpa := img.FindColor($0, 0).SortFrom(img.Center);

  Result := img.Blend(tpa, 5);
  Result.Pad(10);
end;

function TRSMinimap.GetCleanImage(angle: Single = $FFFF): TImage;
var
  img, clean: TImage;
begin
  img := TImage.CreateFromTarget(Self.RSInterface.Bounds);
  img.ReplaceColor(0, 1);

  clean := Self.CleanImage(img);
  img.Free();

  if angle = $FFFF then angle := Self.GetCompassAngle(False);
  Result := clean.Rotate(EImageRotateAlgo.BILINEAR, angle, False);
  clean.Free();
end;

function TRSMinimap.ScaleMinimap(img: TImage; scaling: Integer; radius: Integer = 67): TImage;
var
  center: TPoint;
  tmp, blend: TImage;
  tpa: TPointArray;
begin
  tmp := img.Copy();

  center := tmp.Center;
  if RSClient.Mode = ERSClientMode.FIXED then
    center := center.Offset(0, -8).Rotate(-Self.GetCompassAngle(False), center);

  tmp.DrawColor := $0;
  tmp.DrawCircleInverted(center, radius);

  radius += 3;

  tmp.Crop(Box(center, radius, radius));
  tpa := tmp.FindColor($0, 0).SortFrom(tmp.Center);
  blend := tmp.Blend(tpa, 3);
  tmp.Free();

  blend.DrawCircleInverted(blend.Center, radius);

  Result := blend.Downsample(scaling);
  blend.Free();
end;

var
  Minimap: TRSMinimap;

begin
  Minimap.Setup();
end;
