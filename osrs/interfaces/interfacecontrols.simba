{$DEFINE SRLT_INTERFACE_CONTROLS_INCLUDED}
{$IFNDEF SRLT_OSRS}
  {$I SRLT/osrs.simba}
{$ENDIF}

type
  TRSButton = record
    EnabledColors: array of record
      Color: Integer;
      Tolerance: Single;
    end;

    Index: Integer;
    Bounds: TBox;
    Center: TPoint;
  end;

  TRSButtonArray = array of TRSButton;

function TRSButton.Enabled(): Boolean;
var
  i: Integer;
begin
  for i := 0 to High(Self.EnabledColors) do
    if Target.CountColor(Self.EnabledColors[i].Color, Self.EnabledColors[i].Tolerance, Self.Bounds) > 0 then
      Exit(True);
end;

function TRSButton.WaitEnabled(const time: Integer; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.Enabled(), interval, time);
end;

procedure TRSButton.Click(const button: EMouseButton = EMouseButton.LEFT);
begin
  Mouse.Click(Self.Bounds, button);
end;

function TRSButton.Enable(): Boolean;
begin
  if Self.Enabled() then Exit(True);
  Self.Click();
  Result := Self.WaitEnabled(600);
end;

function TRSButton.Disable(): Boolean;
begin
  if Self.Enabled() then Exit(True);
  Self.Click();
  Result := SleepUntil(Self.Enabled(), 50, 600);
end;


procedure TRSButton.Draw(img: TImage; color: Integer = $00FFFF);
var
  oldSize: Single;
  oldColor: Integer;
  oldAntialiasing: Boolean;
begin
  oldSize := img.FontSize;
  oldAntialiasing := img.FontAntialiasing;
  oldColor := img.DrawColor;

  img.FontSize := 20;
  img.FontAntialiasing := True;
  img.DrawColor := color;

  img.DrawBox(Self.Bounds);
  img.DrawText(ToStr(Self.Index), Self.Bounds, [EImageTextAlign.CENTER]);

  img.FontSize := oldSize;
  img.FontAntialiasing := oldAntialiasing;
  img.DrawColor := oldColor;
end;

procedure ShowOnClient(button: TRSButton); overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget();
  button.Draw(img);
  img.Show();
  img.Free();
end;

procedure TRSButtonArray.Draw(img: TImage; color: Integer = $00FFFF);
var
  oldSize: Single;
  oldColor: Integer;
  oldAntialiasing: Boolean;
  button: TRSButton;
begin
  oldSize := img.FontSize;
  oldAntialiasing := img.FontAntialiasing;
  oldColor := img.DrawColor;

  img.FontSize := 20;
  img.FontAntialiasing := True;
  img.DrawColor := color;

  for button in Self do
  begin
    img.DrawBox(button.Bounds);
    img.DrawText(ToString(button.Index), button.Bounds, [EImageTextAlign.CENTER]);
  end;

  img.FontSize := oldSize;
  img.FontAntialiasing := oldAntialiasing;
  img.DrawColor := oldColor;
end;

procedure ShowOnClient(buttons: TRSButtonArray); overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget();
  buttons.Draw(img);
  img.Show();
  img.Free();
end;


type
  TRSSlider = record
    Color: TColor;
    Bounds: TBox;
    Width: Integer;
  end;

function TRSSlider.GetLevel(): Integer;
var
  tpa: TPointArray;
begin
  tpa := Target.FindColor(Self.Color, 0, Self.Bounds.Expand(10));
  if tpa = [] then Exit(-1);
  Result := (tpa.Mean().X - Self.Bounds.X1) * 100 div Self.Width;
end;

function TRSSlider.SetLevel(const level: Integer): Boolean;
var
  current: Integer;
  p: TPoint;
begin
  current := Self.GetLevel();

  case Abs(current - level) of
    0..1:  Exit(True);
    2..20:
      begin
        //Move slider away so we can click the level
        if (current + 40 < 100) then
          Self.SetLevel(current + Random(20, 40))
        else
          Self.SetLevel(current - Random(20, 40));
      end;
  end;

  p := Self.Bounds.TopLeft.Offset(level * Self.Width div 100 + 1, Random(Self.Bounds.Height));
  Mouse.Click(p, EMouseButton.LEFT);
  Result := SleepUntil(Abs(Self.GetLevel()-level) < 2, RandomMode(100, 50, 1500), 600);
end;


type
  TRSScrollBar = record
    ScrollArea, Up, Down: TBox;
    Bounds: TBox;
    Width, Height: Integer;
  end;

procedure TRSScrollBar.Setup();
begin
  if Self.ScrollArea = Default(TBox) then
    raise GetDebugLn('ScrollBar', 'You need to set a ScrollArea to use the TRSScrollBar.Setup() method.');

  Self.Bounds.X1 := Self.ScrollArea.X2 + 1;
  Self.Bounds.Y1 := Self.ScrollArea.Y1 + 16;
  Self.Bounds.X2 := Self.Bounds.X1 + 15;
  Self.Bounds.Y2 := Self.ScrollArea.Y2 - 16;

  Self.Width  := Self.Bounds.Width;
  Self.Height := Self.Bounds.Height;

  Self.Up.X1 := Self.Bounds.X1;
  Self.Up.Y1 := Self.ScrollArea.Y1;
  Self.Up.X2 := Self.Bounds.X2;
  Self.Up.Y2 := Self.Bounds.Y1 - 1;

  Self.Down.X1 := Self.Bounds.X1;
  Self.Down.Y1 := Self.Bounds.Y2 + 1;
  Self.Down.X2 := Self.Bounds.X2;
  Self.Down.Y2 := Self.ScrollArea.Y2;
end;

function TRSScrollBar.IsVisible(): Boolean;
begin
  Result := Target.HasColor(ColorTolerance($16091C, 16.971, EColorSpace.HSV, [0.277, 0.671, 2.054]), 1, Self.Up)
            and
            Target.HasColor(ColorTolerance($16091C, 16.971, EColorSpace.HSV, [0.277, 0.671, 2.054]), 1, Self.Down);
end;

function TRSScrollBar.GetSlider(): TBox;
var
  p: TPoint;
  tpa: TPointArray;
begin
  p.X := Self.Bounds.X1 + Self.Width div 2;
  tpa := Target.FindColor(RSColors.INTERFACE_BORDER, 0, [p.X, Self.Bounds.Y1, p.X + 1, Self.Bounds.Y2]);
  if tpa = [] then Exit;
  Result.X1 := Self.Bounds.X1+1;
  Result.Y1 := tpa.First.Y;
  Result.X2 := Self.Bounds.X2-1;
  Result.Y2 := tpa.Last.Y;
end;

function TRSScrollBar.CanScroll(): Boolean;
begin
  Result := Self.IsVisible() and (Self.GetSlider() <> Self.Bounds);
end;


function TRSScrollBar.GetLevel(): Integer;
begin
  with Self.GetSlider() do
    Result := Round((Y1 - Self.Bounds.Y1) * 100 / (Self.Height - Height));
end;

function TRSScrollBar.GetScrollArea(): TBox;
begin
  Result := Self.ScrollArea; //todo: add antiban to use bounds instead
end;

function TRSScrollBar.SetLevel(value: Integer): Integer;
var
  old, new, scrolls: Integer;
  direction: Boolean;
  area: TBox;
begin
  if not Self.CanScroll() then Exit;
  value := EnsureRange(value, 0, 100);

  old := Self.GetLevel();
  direction := old < value;
  area := Self.GetScrollArea();

  while direction = (old < value) do
  begin
    Mouse.Move(area);
    scrolls := Random(1, 3);
    if direction then scrolls := -scrolls;
    Target.MouseScroll(scrolls);
    new := Self.GetLevel();

    //user probably hover them while using RI
    if new = old then Mouse.Move(area, True);
    old := new;
  end;
end;



procedure ShowOnClient(scroll: TRSScrollBar); overload;
var
  img: TImage;
  bounds: TBox;
begin
  img := TImage.CreateFromTarget();

  img.DrawColor := $FFFF00;
  img.DrawBox(scroll.Bounds);

  img.DrawColor := $FFFFFF;
  bounds := scroll.GetSlider();
  img.DrawBox(bounds);

  img.DrawColor := $FF;
  img.FontSize := 12;
  bounds.X2 := bounds.X1 - 2;
  bounds.X1 -= 30;
  img.DrawText(ToStr(scroll.GetLevel()), bounds, [EImageTextAlign.CENTER]);

  img.DrawColor := $00FFFF;
  img.DrawBoxArray([scroll.Up, scroll.Down], False);

  img.Show();
  img.Free();
end;

