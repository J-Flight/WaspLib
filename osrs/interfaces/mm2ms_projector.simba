(*
Original MM2MS Projector done by slacky.

This is basically the same thing with some pre-calculated math
*)
{$DEFINE SRLT_MM2MS_PROJECTOR_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

type
  TMM2MSProjector = record
    RSZoom: Single;
    ScaleMin, ScaleMax: Single;
    ViewMatrix, ProjMatrix, WorldMatrix, TransMatrix: TMatrix4;
    Transformer: record X, Y, Z: Double; end;
  end;

const
  ZOOM2RSZOOM: TSingleArray = [0.0000, 0.0025, 0.0065, 0.0100, 0.0130, 0.0165, 0.0205, 0.0235, 0.0280, 0.0310, 0.0350, 0.0390, 0.0430, 0.0430, 0.0465, 0.0515, 0.0555, 0.0605, 0.0645, 0.0690, 0.0740, 0.0785, 0.0835, 0.0885, 0.0935, 0.0990, 0.1045, 0.1095, 0.1150, 0.1205, 0.1260, 0.1325, 0.1385, 0.1455, 0.1505, 0.1585, 0.1635, 0.1635, 0.1705, 0.1775, 0.1845, 0.1925, 0.1995, 0.2055, 0.2145, 0.2215, 0.2305, 0.2365, 0.2465, 0.2545, 0.2635, 0.2725, 0.2825, 0.2905, 0.3005, 0.3105, 0.3195, 0.3285, 0.3405, 0.3555, 0.3615, 0.3705, 0.3825, 0.3825, 0.3945, 0.4065, 0.4185, 0.4305, 0.4425, 0.4575, 0.4695, 0.4815, 0.4965, 0.5115, 0.5265, 0.5385, 0.5535, 0.5685, 0.5835, 0.5985, 0.6165, 0.6315, 0.6495, 0.6645, 0.6825, 0.7035, 0.7215, 0.7215, 0.7395, 0.7575, 0.7815, 0.7995, 0.8175, 0.8355, 0.8595, 0.8835, 0.9015, 0.9255, 0.9495, 0.9735, 1.000];

procedure TMM2MSProjector.SetupProjection();
begin
  case RSClient.Mode of
    ERSMode.FIXED:
    begin
      Self.ScaleMin := 0.83 * MainScreen.Bounds.Height / 503; // fixed client height
      Self.ScaleMax := 6.32 * MainScreen.Bounds.Height / 503; // fixed client height
      Self.ViewMatrix := TMatrix4.LookAtRH([0,-28,61],[0,0,1.0], VECTOR3_UNIT_Y);
    end;

    ERSMode.RESIZABLE_CLASSIC, ERSMode.RESIZABLE_MODERN:
    begin
      Self.ScaleMin := 0.635 * MainScreen.Bounds.Height / 503; // fixed client height
      Self.ScaleMax := 4.90 * MainScreen.Bounds.Height / 503; // fixed client height
      Self.ViewMatrix := TMatrix4.LookAtRH([0,-21,61],[0,0,1.0], VECTOR3_UNIT_Y);
    end;
  end;

  // fixed client width & height
  Self.ProjMatrix := TMatrix4.PerspectiveFovRH(Sqrt(2), 765 / 503, 0.01, 1.0);
end;

procedure TMM2MSProjector.UpdateZoom(zoom: Integer);
var
  scale: Double;
begin
  if Self.RSZoom = ZOOM2RSZOOM[zoom] then
    Exit;

  Self.RSZoom := ZOOM2RSZOOM[zoom];
  scale := Self.ScaleMin + Self.RSZoom * (Self.ScaleMax - Self.ScaleMin);
  Self.Transformer.X := 513 * scale; // fixed mainscreen width
  Self.Transformer.Y := 335 * scale;
  Self.Transformer.Z := MainScreen.Center.Y + (Self.RSZoom * 24); // fixed mainscreen height, y shift
end;

function TMM2MSProjector.Transform(coord: Vector3; matrix: TMatrix4): Vector3;
begin
  with Vector3.TransformCoordinate(coord, matrix) do
  begin
    Result.X := (+X * Self.Transformer.X) + MainScreen.Center.X;
    Result.Y := (-Y * Self.Transformer.Y) + Self.Transformer.Z;
  end;
end;

function TMM2MSProjector.Run(coords: Vector3Array; rotation: Vector3): TPointArray;
var
  i: Integer;
begin
  Self.WorldMatrix := TMatrix4.RotationYawPitchRoll(rotation.Y, rotation.X, rotation.Z) * MATRIX_IDENTITY;
  Self.TransMatrix := Self.WorldMatrix * Self.ViewMatrix * Self.ProjMatrix;

  SetLength(Result, Length(coords));

  for i := 0 to High(coords) do
    with Self.Transform(coords[i], Self.TransMatrix) do
    begin
      Result[i].X := Round(X);
      Result[i].Y := Round(Y);
    end;
end;

function TMM2MSProjector.Run(coord: Vector3; rotation: Vector3): TPoint; overload;
begin
  Result := Self.Run([coord], rotation)[0];
end;
