(*
# ChooseOption
Methods to interact with the runescape context menu.

```{figure} ../../images/chooseoption.png
```
*)
{$DEFINE WL_CHOOSEOPTION_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TRSOption
Helper record to interact with {ref}`ChooseOption`.
*)
  TRSOption = record
    Text: String;
    Bounds: TBox;
    StringIndex: Integer;
  end;

  TRSOptionArray = array of TRSOption;

(*
## TRSChooseOption
Core record responsible with interacting with the {ref}`ChooseOption` context menu.
*)
  TRSChooseOption = record
    Bounds: TBox;
    const TitleImg: TImage = ImageFromString('IMG:AQAAAGYAAAASAAAAAAAAAP21aQABAAAAIKprAAEAAADI5D8BAAAAAM0CAQABAAAAOIe7BgAAAAAApLsGAAAAADQBAACYAQAAOIe7BgAAAAABAAAAZgAAABIAAAAYAAAAAAAAAAAAAAAAAAAAAwAAABgIEAgICAAAAAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAGYAAAASCAIAAAAmDjziAAAAzUlEQVR4nO2U0Q2AMAhE3c4F/HX/NYzxo9oWvAO0mkBqoqTA9Qmd1mXORa1pf9IoS2S0JTLaWmRlaK+ed3X1rdU2RkT1eXjOysarvMoA9TwlG+mmLyAzNH4iC0AWcxAcWfce8fjb0sqRdGSenEpUP5BCVu3xvEs4wE63lcOjtEuTHUwnJuXH4hpspf3iSxZJVkglPCcyRGZJkeKlpFGYPMMohRjwRYpvXdTgSN2hDODtfgUfG1s5EfEWZL8zsEkj671X7BlLZLQNQJaLWhvxdfuwwsTSHQAAAABJRU5ErkJggg==');
  end;

(*
## ChooseOption.IsOpen
```pascal
function TRSChooseOption.IsOpen(): Boolean;
```
Returns True/False if the {ref}`ChooseOption` menu is currently visible/open.

Example:
```pascal
WriteLn ChooseOption.IsOpen();
```
*)
function TRSChooseOption.IsOpen(): Boolean;
var
  tpa: TPointArray;
  p: TPoint;
begin
  p := Target.FindImage(Self.TitleImg, 0);
  if p = [-1,-1] then Exit;

  p.X += 1;
  p.Y += Self.TitleImg.Height;

  with RSClient._Bounds() do
    tpa := Target.FindColor(Colors.BLACK, 0, [P.X, P.Y, Width - 1, Height - 1]);

  Result := tpa <> [];
  if Result then
    Self.Bounds := tpa.Cluster(1, 1).SortFromFirstPoint(p)[0].Bounds().Expand(-1);
end;

(*
## ChooseOption.WaitOpen
```pascal
function TRSChooseOption.WaitOpen(time: Integer; interval: Integer = -1): Boolean;
```
Returns True/False if the {ref}`ChooseOption` menu is becomes visible/open within the specified `time`.

Example:
```pascal
WriteLn ChooseOption.WaitOpen();
```
*)
function TRSChooseOption.WaitOpen(time: Integer; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsOpen(), interval, time);
end;

(*
## ChooseOption.Open
```pascal
function TRSChooseOption.Open(): Boolean;
```
Opens the {ref}`ChooseOption` context menu if it's not currently open.

Example:
```pascal
WriteLn ChooseOption.Open();
```
*)
function TRSChooseOption.Open(): Boolean;
begin
  if Self.IsOpen() then Exit(True);

  Mouse.Click(EMouseButton.RIGHT);
  Result := Self.WaitOpen(600);
end;


(*
## ChooseOption.GetOptions
```pascal
function TRSChooseOption.GetOptions(): TRSChooseOption_OptionArray;
```
Returns a `TRSOptionArray` of all available options in the {ref}`ChooseOption` context menu.
This is a internal method, you probably don't need to call it.
*)
function TRSChooseOption.GetOptions(): TRSOptionArray;
var
  i: Int32;
  b: TBox;
begin
  if not Self.Open() then Exit;
  if Self.Bounds.Height < 15 then Exit;

  SetLength(Result, Self.Bounds.Height div 15);

  b.X1 := Self.Bounds.X1;
  b.X2 := Self.Bounds.X2;

  for i := 0 to Result.High do
  begin
    b.Y1 := Self.Bounds.Y1 + (i * 15);
    if RSClient.Client = ERSClient.OFFICIAL then
      Inc(b.Y1, 2);
    b.Y2 := b.Y1 + 15;
    if (RSClient.Client = ERSClient.OFFICIAL) and (i = Result.High) then
      Dec(b.Y2);
    if b.Y2 > Self.Bounds.Y2 then Exit;
    Result[i].Text := OCR.RecognizeShadow(b, RSFonts.BOLD_SHADOW, 0);
    Result[i].Bounds := b;
  end;
end;

(*
## ChooseOption.FindSubmenu
```pascal
function TRSChooseOption.FindSubmenu(): TBox;
```
Returns the bounds of the submenu if it exists, otherwise returns an empty TBox.
*)
function TRSChooseOption.FindSubmenu(): TBox;
var
  atpa: T2DPointArray;
  tpa: TPointArray;
begin
  if not Self.IsOpen then Exit;
  tpa := Target.FindColor($47545D, 0, RSClient.Bounds()).ExcludeBox(Self.Bounds.Expand(2, 20));
  atpa := tpa.Cluster(2).ExcludeSize(100, __LT__).SortFrom(Mouse.Position);

  for tpa in atpa do
    if tpa.Bounds.Corners.Intersection(tpa).Length = 4 then
      Exit(tpa.Bounds.Expand(-2));
end;

(*
## ChooseOption.Close
```pascal
function TRSChooseOption.Close(): Boolean;
```
Closes the {ref}`ChooseOption` context menu if it's open.
Returns True on success.

Example:
```pascal
WriteLn ChooseOption.Close();
```
*)
function TRSChooseOption.Close(): Boolean;
var
  boxes: TBoxArray;
  space, sub: TBox;
begin
  if not Self.IsOpen() then Exit(True);

  sub := Self.FindSubMenu();
  if sub <> [] then
    space := Self.Bounds.Combine(sub)
  else
    space := Self.Bounds;

  boxes := space.Expand(50).Invert(Target.Bounds);
  if boxes = [] then
    raise GetDebugLn('ChooseOption', 'No space found to move mouse');

  Mouse.Move(boxes.Random(), True);
  Result := SleepUntil(not Self.IsOpen(), 50, 600);
end;


(*
## ChooseOption.HasOption
```pascal
function TRSChooseOption.Find(text: TStringArray; out option: TRSOption; caseSensitive: Boolean = True; closeIfNotFound: Boolean = True): Boolean;
function TRSChooseOption.Find(text: TStringArray; caseSensitive: Boolean = True; closeIfNotFound: Boolean = True): Boolean; overload;
```
Methods to check if an option is available in the {ref}`ChooseOption` context menu.
Returns true if the option specified is available.

Example:
```pascal
WriteLn ChooseOption.Find('Take');
```
*)
function TRSChooseOption.Find(text: TStringArray; out option: TRSOption; caseSensitive: Boolean = True; closeOnFalse: Boolean = True): Boolean;
var
  i: Int32;
  b: TBox;
  s: String;
begin
  if not Self.Open() then Exit;
  if Self.Bounds.Height < 15 then Exit;

  b.X1 := Self.Bounds.X1;
  b.X2 := Self.Bounds.X2;

  for i := 0 to Self.Bounds.Height div 15 do
  begin
    b.Y1 := Self.Bounds.Y1 + (i * 15);
    if RSClient.Client = ERSClient.OFFICIAL then
      Inc(b.Y1, 2);
    b.Y2 := b.Y1 + 15;
    if (RSClient.Client = ERSClient.OFFICIAL) and (i = (Self.Bounds.Height div 15) - 1) then
      Dec(b.Y2);
    if b.Y2 > Self.Bounds.Y2 then Exit;
    s := OCR.RecognizeShadow(b, RSFonts.BOLD_SHADOW, 0);

    if s.ContainsAny(text, caseSensitive) then
    begin
      option.Text := s;
      option.Bounds := b;
      option.StringIndex := i;
      Exit(True);
    end;
  end;

  if closeOnFalse then
  begin
    Sleep(250, 600);
    Self.Close();
  end;
end;

function TRSChooseOption.Find(text: TStringArray; caseSensitive, closeOnFalse: Boolean = True): Boolean; overload;
var
  option: TRSOption;
begin
  Result := Self.Find(text, option, caseSensitive, closeOnFalse);
end;

(*
## ChooseOption.Hover
```pascal
procedure TRSChooseOption.Hover(option: TRSOption);
function TRSChooseOption.Hover(text: TStringArray; caseSensitive, closeOnFalse: Boolean = True): Boolean; overload;
function TRSChooseOption.Hover(text: String; caseSensitive, closeOnFalse: Boolean = True): Boolean; overload;
```
Hovers the specified option if it exists on the {ref}`ChooseOption` context menu.

Example:
```pascal
WriteLn ChooseOption.Select('Take Bones');
```
*)
procedure TRSChooseOption.Hover(option: TRSOption);
begin
  option.Bounds.Expand(-1);
  Mouse.Move(option.Bounds);
end;

function TRSChooseOption.Hover(text: TStringArray; caseSensitive, closeOnFalse: Boolean = True): Boolean; overload;
var
  option: TRSOption;
begin
  Result := Self.Find(text, option, caseSensitive, closeOnFalse);
  if Result then Self.Hover(option);
end;

function TRSChooseOption.Hover(text: String; caseSensitive, closeOnFalse: Boolean = True): Boolean; overload;
begin
  Result := Self.Hover([text], caseSensitive, closeOnFalse);
end;


(*
## ChooseOption.Select
```pascal
procedure TRSChooseOption.Select(option: TRSOption; mouseAction: Int32 = MOUSE_LEFT);
function TRSChooseOption.Select(text: TStringArray; mouseAction: Int32 = MOUSE_LEFT; caseSensitive: Boolean = True; closeIfNotFound: Boolean = True): Boolean; overload;
function TRSChooseOption.Select(text: String; mouseAction: Int32 = MOUSE_LEFT; caseSensitive: Boolean = True; closeIfNotFound: Boolean = True): Boolean; overload;
```
Selects the specified option if it exists on the {ref}`ChooseOption` context menu.

Example:
```pascal
WriteLn ChooseOption.Select('Take Bones');
```
*)
procedure TRSChooseOption.Select(option: TRSOption);
begin
  Self.Hover(option);
  Mouse.Click(EMouseButton.LEFT);
end;

function TRSChooseOption.Select(text: TStringArray; caseSensitive, closeOnFalse: Boolean = True): Boolean; overload;
begin
  Result := Self.Hover(text, caseSensitive, closeOnFalse);
  Mouse.Click(EMouseButton.LEFT);
end;

function TRSChooseOption.Select(text: String; caseSensitive, closeOnFalse: Boolean = True): Boolean; overload;
begin
  Result := Self.Select([text], caseSensitive, closeOnFalse);
end;

(*
## ChooseOption.HasSubmenu
```pascal
function TRSChooseOption.HasSubmenu(): Boolean;
```
Returns True if the {ref}`ChooseOption` context menu has a submenu (indicated by ' >' in the option text).
*)
function TRSChooseOption.HasSubmenu(): Boolean;
begin
  Result := Self.IsOpen() and Self.Find([' >']);
end;

(*
## ChooseOption.IsSubmenuOpen
```pascal
function TRSChooseOption.IsSubmenuOpen(): Boolean;
```
Returns True if a submenu is currently open and visible.
*)
function TRSChooseOption.IsSubmenuOpen(): Boolean;
begin
  Result := Self.FindSubmenu() <> [];
end;

(*
## ChooseOption.OpenSubmenu
```pascal
function TRSChooseOption.OpenSubmenu(closeIfNotFound: Boolean = True): Boolean;
```
Opens a submenu if it exists. Returns True if successful.
If closeIfNotFound is True, closes the context menu if no submenu is found.
*)
function TRSChooseOption.OpenSubmenu(closeIfNotFound: Boolean = True): Boolean;
var
  t: TCountdown;
begin
  Result := Self.IsSubmenuOpen() or (Self.Open() and Self.Hover([' >'], False, closeIfNotFound) and SleepUntil(Self.IsSubmenuOpen(), 5, 250));
  if closeIfNotFound and not Result then
    Self.Close();
end;

(*
## ChooseOption.GetSubmenuOptions
```pascal
function TRSChooseOption.GetSubmenuOptions(): TRSOptionArray;
```
Returns a `TRSOptionArray` of all available options in the submenu.
This is a internal method, you probably don't need to call it.
*)
function TRSChooseOption.GetSubmenuOptions(): TRSOptionArray;
var
  bounds, b: TBox;
  i, h: Integer;
begin
  if not Self.OpenSubmenu() then Exit;
  bounds := Self.FindSubmenu();
  if (bounds.Height < 15) then Exit;
  SetLength(Result, bounds.Height div 15);

  b.X1 := bounds.X1;
  b.X2 := bounds.X2;

  for i := 0 to Result.High do
  begin
    b.Y1 := bounds.Y1 + (i * 15);
    if RSClient.Client = ERSClient.OFFICIAL then
      b.Y1 += 2;
    b.Y2 := b.Y1 + 15;

    Result[i].Text := OCR.RecognizeShadow(b, RSFonts.BOLD_SHADOW, 0);
    Result[i].Bounds := b;
  end;
end;

(*
## ChooseOption.FindSubmenuOption
```pascal
function TRSChooseOption.FindSubmenuOption(text: TStringArray; out option: TRSOption; caseSensitive, closeIfNotFound: Boolean = True): Boolean;
```
Searches for a specific option in the submenu. Returns True if found.
The found option is returned through the 'option' parameter.
*)
function TRSChooseOption.FindSubmenuOption(text: TStringArray; out option: TRSOption; caseSensitive, closeIfNotFound: Boolean = True): Boolean;
var
  o: TRSOption;
begin
  for o in Self.GetSubmenuOptions() do
    if o.Text.ContainsAny(text, caseSensitive) then
    begin
      Result := True;
      option := o;
      Break;
    end;

  if closeIfNotFound and (not Result) then
    Self.Close;
end;

(*
## ChooseOption.HoverSubmenuOption
```pascal
function TRSChooseOption.HoverSubmenuOption(option: TRSOption): Boolean;
function TRSChooseOption.HoverSubmenuOption(text: TStringArray; caseSensitive, closeIfNotFound: Boolean = True): Boolean; overload;
```
Hovers over a specific option in the submenu. Returns True if successful.
*)
function TRSChooseOption.HoverSubmenuOption(option: TRSOption): Boolean;
var
  targ: TTarget;
begin
  targ := Target;
  targ.MouseOptions.Wind := 1;
  targ.MouseOptions.Gravity := 10;
  targ.MouseOptions.Speed -= Random(5, 10);
  targ.MouseOptions.Speed := Max(targ.MouseOptions.Speed, 8);
  targ.MouseMove(option.Bounds);
  Sleep(50);
  Result := Self.IsSubmenuOpen();
end;

function TRSChooseOption.HoverSubmenuOption(text: TStringArray; caseSensitive, closeIfNotFound: Boolean = True): Boolean; overload;
var
  option: TRSOption;
begin
  Result := Self.Open()
    and Self.OpenSubmenu(closeIfNotFound)
    and Self.FindSubmenuOption(text, option, caseSensitive, closeIfNotFound)
    and Self.HoverSubmenuOption(option);
end;

(*
## ChooseOption.SelectSubmenuOption
```pascal
function TRSChooseOption.SelectSubmenuOption(option: TRSOption): Boolean;
function TRSChooseOption.SelectSubmenuOption(text: TStringArray; caseSensitive, closeIfNotFound: Boolean = True): Boolean;
```
Selects a specific option in the submenu by clicking on it. Returns True if successful.
*)
function TRSChooseOption.SelectSubmenuOption(option: TRSOption): Boolean;
var
  targ: TTarget;
begin
  targ := Target;
  targ.MouseOptions.Wind := 1;
  targ.MouseOptions.Gravity := 10;
  targ.MouseOptions.Speed -= Random(5, 10);
  targ.MouseOptions.Speed := Max(targ.MouseOptions.Speed, 8);
  targ.MouseMove(option.Bounds);
  Sleep(50);
  if Self.IsSubmenuOpen then
  begin
    targ.MouseClick(EMouseButton.LEFT);
    Result := True;
  end;
end;

function TRSChooseOption.SelectSubmenuOption(text: TStringArray; caseSensitive, closeIfNotFound: Boolean = True): Boolean; overload;
var
  option: TRSOption;
begin
  Result := Self.Open()
    and Self.OpenSubmenu(closeIfNotFound)
    and Self.FindSubmenuOption(text, option, caseSensitive, closeIfNotFound)
    and Self.SelectSubmenuOption(option);
end;

var
(*
## ChooseOption variable
Global {ref}`TRSChooseOption` variable.
*)
  ChooseOption: TRSChooseOption;
