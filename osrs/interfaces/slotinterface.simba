(*
# SlotInterface
Methods to interact slotted interfaces.
*)

{$DEFINE SRLT_SLOT_INTERFACE_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

type
  TRSSlotInterface = record
    Name: String;
    Slots: TBoxArray;
    SlotsFunction: function (): TBoxArray of object;
  end;

procedure TRSSlotInterface.Setup(name: String; slots: TBoxArray; slotsFunction: function (): TBoxArray of object = nil);
begin
  Self.Name := name;
  Self.Slots := slots;
  Self.SlotsFunction := @slotsFunction;
end;

function TRSSlotInterface.Boxes(): TBoxArray;
begin
  if @Self.SlotsFunction <> nil then
    Result := Self.SlotsFunction()
  else
    Result := Self.Slots;

  if Result = [] then
    raise GetDebugLn(Self.Name, 'Slots and SlotsFunction are not set!');
end;

function TRSSlotInterface.Boxes(slots: TIntegerArray): TBoxArray; overload;
var
  tmp: TBoxArray;
  i: Integer;
begin
  tmp := Self.Boxes();
  for i := 0 to High(slots) do
    Result += tmp[slots[i]];
end;

function TRSSlotInterface.Box(slot: Integer): TBox;
begin
  Result := Self.Boxes()[slot];
end;


function TRSSlotInterface.Near(slot: Integer; slots: TIntegerArray; maxDist: Single = 32): TIntegerArray;
var
  i: Integer;
  boxes: TBoxArray;
  center: TPoint;
begin
  slots.Remove(slot);

  if Length(slots) = 0 then
    raise GetDebugLn(Self.Name, 'RandomSlotNearby: No slots to choose from');

  boxes := Self.Boxes();
  center := boxes[slot].Center;

  for i := 0 to High(slots) do
    if center.DistanceTo(boxes[slots[i]].Center) <= maxDist then
      Result += slots[i];
end;

function TRSSlotInterface.RandomNear(slot: Integer; slots: TIntegerArray; maxDist: Single = 32): Integer;
begin
  Result := Self.Near(slot, slots, maxDist).Random();
end;


function TRSSlotInterface.GetUnder(p: TPoint): Integer;
var
  i: Integer;
  slots: TBoxArray;
begin
  slots := Self.Boxes();
  for i := 0 to High(slots) do
    if slots[i].Contains(p) then
      Exit(i);
  Result := -1;
end;


function TRSSlotInterface.GetUsed(): TIntegerArray;
var
  slots: TBoxArray;
  i: Integer;
begin
  slots := Self.Boxes();
  for i := 0 to High(slots) do
    if Target.HasColor(RSColors.ITEM_BORDER, 8.5, 1, slots[i]) or
       Target.HasColor(RSColors.ITEM_BORDER_WHITE, 0, 1, slots[i]) then
      Result += i;
end;

function TRSSlotInterface.GetEmpty(): TIntegerArray;
var
  slots: TBoxArray;
  i: Integer;
begin
  slots := Self.Boxes();
  for i := 0 to High(slots) do
    if not Target.HasColor(RSColors.ITEM_BORDER, 8.5, 1, slots[i]) and
       not Target.HasColor(RSColors.ITEM_BORDER_WHITE, 0, 1, slots[i]) then
      Result += i;
end;


function TRSSlotInterface.IsUsed(slot: TBox): Boolean;
begin
  Result := Target.HasColor(RSColors.ITEM_BORDER, 8.5, 1, slot) or
            Target.HasColor(RSColors.ITEM_BORDER_WHITE, 0, 1, slot);
end;

function TRSSlotInterface.IsUsed(slot: Integer): Boolean; overload;
begin
  Result := Self.IsUsed(Self.Box(slot));
end;

function TRSSlotInterface.IsEmpty(slot: TBox): Boolean;
begin
  Result := not Target.HasColor(RSColors.ITEM_BORDER, 8.5, 1, slot) and
            not Target.HasColor(RSColors.ITEM_BORDER_WHITE, 0, 1, slot);
end;

function TRSSlotInterface.IsEmpty(slot: Integer): Boolean; overload;
begin
  Result := Self.IsEmpty(Self.Box(slot));
end;



function TRSSlotInterface.GetShift(slot: Integer; waitTime: Integer): Integer;
begin
  Result := Target.GetPixelDifference(waitTime, Self.Box(slot));
end;

function TRSSlotInterface.IsFading(slot: Integer; waitTime: Integer = 5): Boolean;
begin
  Result := Self.GetShift(slot, waitTime) > 0;
end;

function TRSSlotInterface.WaitFade(slot: Integer; waitTime: Integer = 200): Boolean;
var
  b: TBox;
begin
  b := Self.Box(slot);
  if not SleepUntil(Target.GetPixelDifference(5, b) > 5, 0, waitTime) then
    Exit;

  Result := SleepUntil(
              Target.HasColor(RSColors.ITEM_BORDER, 8.5, 1, b) or
              Target.HasColor(RSColors.ITEM_BORDER_WHITE, 0, 1, b), 100, 1000
            );
end;



function TRSSlotInterface.Count(): Integer;
begin
  Result := Length(Self.GetUsed());
end;

function TRSSlotInterface.CountEmpty(): Integer;
begin
  Result := Length(Self.GetEmpty());
end;


function TRSSlotInterface.WaitCount(count: Int32; time: Int32 = 600; interval: Int32 = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.Count() = count, interval, time);
end;


function TRSSlotInterface.ReadStack(slot: TBox): Integer;
var
  i: Integer;
begin
  slot.Y1 -= 1;
  slot.X2 := slot.X1 + 35;
  slot.Y2 := slot.Y1 + 11;

  for i := 0 to High(RSColors.STACK_COLORS) do
    if Target.HasColor(RSColors.STACK_COLORS[i], 0, 1, slot) then
      Exit(OCR.RecognizeNumber(slot, RSFonts.PLAIN_11, [RSColors.STACK_COLORS[i]], 0) * Round(10 ** (3 * i)));
  Result := -1;
end;

function TRSSlotInterface.ReadStack(slot: Integer): Integer; overload;
begin
  Result := Self.ReadStack(Self.Box(slot));
end;


procedure TRSSlotInterface.Hover(slot: Integer);
begin
  Mouse.Move(Self.Box(slot));
end;


procedure TRSSlotInterface.Click(slot: Integer; button: EMouseButton = EMouseButton.LEFT);
begin
  Self.Hover(slot);
  Target.MouseClick(button);
end;

function TRSSlotInterface.Move(slot, destination: Integer): Boolean;
var
  slots: TBoxArray;
begin
  if slot = destination then Exit(True);

  slots := Self.Boxes([slot, destination]);

  if not Self.IsUsed(slots[0]) then Exit;

  Mouse.Move(slots[0]);
  Mouse.Hold(EMouseButton.LEFT);
  Sleep(50, 100, ERandomDir.LEFT);
  Mouse.Move(slots[1]);
  Mouse.Release(EMouseButton.LEFT);
  Sleep(50, 100, ERandomDir.Left);
  Result := Self.IsUsed(slots[1]);
end;


function TRSSlotInterface.Interact(slot: Integer; option: String = ''): Boolean;
begin
  Self.Hover(slot);

  if option <> '' then
    Exit(ChooseOption.Select(option));

  Target.MouseClick(EMouseButton.LEFT);
  Result := True;
end;


//TODO:
function TRSSlotInterface.RandomPattern(): TIntegerArray;
begin
  Result := [];
end;

