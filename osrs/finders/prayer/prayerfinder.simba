(*
# ItemFinder
Methods to find and compare item images
*)

{$DEFINE SRLT_PRAYERFINDER2_INCLUDED}
{$IFNDEF SRLT_OSRS}
  {$I SRLT/osrs.simba}
{$ENDIF}

type
  ERSPrayer = enum(
    UNKNOWN,
    THICK_SKIN,           BURST_OF_STRENGTH,  CLARITY_OF_THOUGHT,
    SHARP_EYE,            MYSTIC_WILL,        ROCK_SKIN,
    SUPERHUMAN_STRENGTH,  IMPROVED_REFLEXES,  RAPID_RESTORE,
    RAPID_HEAL,           PROTECT_ITEM,       HAWK_EYE,
    MYSTIC_LORE,          STEEL_SKIN,         ULTIMATE_STRENGTH,
    INCREDIBLE_REFLEXES,  PROTECT_FROM_MAGIC, PROTECT_FROM_MISSILES,
    PROTECT_FROM_MELEE,   EAGLE_EYE,          MYSTIC_MIGHT,
    RETRIBUTION,          REDEMPTION,         SMITE,
    PRESERVE,             CHIVALRY,           PIETY,
    RIGOUR,               AUGURY
  );

  TRSPrayerFinder = record
    PrayerImages: array [ERSPrayer] of TImage;
    Version: String;
    Similarity: Single;
    ImageCompare: TImageCompareUtils;
    CacheDir: String;
    const ZIP: String = {$MACRO DIR} + 'images.zip';
  end;


procedure TRSPrayerFinder.Clean(image, template: TImage);
begin
  template.DrawColor := $0;
  template.DrawTPA(image.FindColor($0, 0));
end;

procedure TRSPrayerFinder.Setup();
var
  dir, tmp: String;
begin
  Self.Version := HashFile(EHashAlgo.MD5, Self.ZIP);
  SetLength(Self.Version, 6);

  Self.CacheDir := SRLTEnv.CacheDir + 'prayerfinder' + PATH_SEP;

  //Delete old cache files if they exist
  for dir in DirList(Self.CacheDir) do
  begin
    tmp := Copy(dir, 1, Length(dir)-Length(Self.Version));
    if tmp = Self.Version then Continue;
    DirDelete(dir, False);
  end;

  Self.CacheDir += Self.Version + PATH_SEP;

  if not DirCreate(Self.CacheDir) then
    raise GetDebugLn('PrayerFinder', 'Failed to create cache directory: ' + Self.CacheDir);

  //only set similarity if the user didn't set it already
  if Self.Similarity = 0 then
    Self.Similarity := 0.97;

  Self.ImageCompare.Clean := @Self.Clean;
end;


function TRSPrayerFinder.GetImage(prayer: ERSPrayer): TImage;
var
  name, path: String;
begin
  if prayer = ERSPrayer.UNKNOWN then
    Exit();

  if Self.PrayerImages[prayer] <> nil then
    Exit(Self.PrayerImages[prayer]);

  name := LowerCase(ToStr(prayer).After('.')) + '.png';
  path := Self.CacheDir + name;

  if not FileExists(path) then
    ZipExtractEntry(Self.ZIP, name, Self.CacheDir);

  Self.PrayerImages[prayer] := TImage.Create(path);
  Self.PrayerImages[prayer].FreeOnTerminate := True;

  Result := Self.PrayerImages[prayer];
end;


function TRSPrayerFinder.FindAll(prayers: array of ERSPrayer; boxes: TBoxArray; maxToFind: Integer = 0): TImageMatchArray;
var
  prayer: ERSPrayer;
  img: TImage;
  i: Integer;
  skip: TBooleanArray;
  match: Single;
begin
  SetLength(skip, Length(boxes));

  for prayer in prayers do
  begin
    if prayer = ERSPrayer.UNKNOWN then
      Continue;

    img := Self.GetImage(prayer);
    for i := 0 to High(boxes) do
    begin
      if skip[i] then
        Continue;

      match := Self.Similarity;
      if Self.ImageCompare.Compare(img, boxes[i], match) then
      begin
        Result += [i, boxes[i], match];
        if (maxToFind > 0) and (Length(Result) >= maxToFind) then
          Exit;
        skip[i] := True;
      end;
    end;
  end;
end;

function TRSPrayerFinder.FindAll(prayers: array of ERSPrayer; boxes: TBoxArray; out matches: TImageMatchArray): Boolean; overload;
var
  prayer: ERSPrayer;
  results: TImageMatchArray;
  i: Integer;
  img: TImage;
  match: Single;
  skip: TBooleanArray;
begin
  SetLength(skip, Length(boxes));

  for prayer in prayers do
  begin
    if prayer = ERSPrayer.UNKNOWN then
      Continue;

    img := Self.GetImage(prayer);

    for i := 0 to High(boxes) do
    begin
      if skip[i] then
        Continue;

      match := Self.Similarity;
      if Self.ImageCompare.Compare(img, boxes[i], match) then
      begin
        results += [i, boxes[i], match];
        skip[i] := True;
      end;
    end;

    if results = [] then
      Exit;

    matches += results;
    results := [];
  end;

  Result := True;
end;

function TRSPrayerFinder.Find(prayers: array of ERSPrayer; boxes: TBoxArray; out match: TImageMatch): Boolean;
var
  prayer: ERSPrayer;
  img: TImage;
  i: Integer;
  similarity: Single;
  skip: TBooleanArray;
begin
  SetLength(skip, Length(boxes));

  for prayer in prayers do
  begin
    if prayer = ERSPrayer.UNKNOWN then
      Continue;

    img := Self.GetImage(prayer);
    for i := 0 to High(boxes) do
    begin
      if skip[i] then
        Continue;

      similarity := Self.Similarity;
      if Self.ImageCompare.Compare(img, boxes[i], similarity) then
      begin
        match := [i, boxes[i], similarity];
        Exit(True);
      end;

    end;
  end;
end;

var
  PrayerFinder: TRSPrayerFinder;

begin
  PrayerFinder.Setup();
end;
