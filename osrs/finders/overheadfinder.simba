(*
## OverheadFinder - Prayer/Protection Overhead Detection System

A comprehensive system for detecting and locating prayer and protection overhead icons
in Old School RuneScape. This module uses template matching to identify various
overhead prayer effects on players and NPCs.
*)
{$DEFINE WL_OVERHEADFINDER_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

(*
## ERSOverhead
```pascal
ERSOverhead = (
  MAGIC, RANGED, MELEE, RETRIBUTION, REDEMPTION, SMITE,
  MAGIC_AND_RANGED, MAGIC_AND_MELEE, RANGED_AND_MELEE, ALL,
  DAMPEN_MELEE
);
```
Enumeration of all detectable overhead prayer and protection types in OSRS.
Includes individual protections, combinations, and special prayer effects.
*)
type
  ERSOverhead = (
    MAGIC, RANGED, MELEE, RETRIBUTION, REDEMPTION, SMITE,
    MAGIC_AND_RANGED, MAGIC_AND_MELEE, RANGED_AND_MELEE, ALL,
    DAMPEN_MELEE
  );

(*
## TRSOverhead
```pascal
TRSOverhead = record
  Position: TPoint;
  Overhead: ERSOverhead;
end;
```
Record containing information about a detected overhead prayer icon.
Stores both the screen position and the type of overhead detected.
*)
  TRSOverhead = record
    Position: TPoint;
    Overhead: ERSOverhead;
  end;

(*
## TRSOverheadArray
```pascal
TRSOverheadArray = array of TRSOverhead;
```
Dynamic array of TRSOverhead records for storing multiple detected overhead icons.
*)
  TRSOverheadArray = array of TRSOverhead;

(*
## TRSOverheadFinder
```pascal
TRSOverheadFinder = record
  Images: array[ERSOverhead] of TImage;
  Version, CacheDir: String;
  Similarity: Single;
end;
```
Main overhead detection system that manages template images and performs
overhead icon recognition using template matching algorithms.
*)
  TRSOverheadFinder = record
    Images: array[ERSOverhead] of TImage;
    Version, CacheDir: String;
    Similarity: Single;
    const BACKGROUND_COLOR: TColorTolerance = [$74B0C7, 2.844, EColorSpace.RGB, [0.681, 1.299, 1.021]];
  end;

(*
## TRSOverheadFinder.Setup
```pascal
procedure TRSOverheadFinder.Setup();
```

Internal procedure called when library is loaded.
Initializes the overhead finder system. Creates cache directories,
manages version control, and sets default similarity threshold.
Must be called before using detection methods.

Example:
```pascal
OverheadFinder.Setup();
WriteLn('OverheadFinder initialized successfully');
```
*)
procedure TRSOverheadFinder.Setup();
var
  path, tmp: String;
begin
  Self.Version := WLAssets.OverheadFinder.Hash;
  Self.CacheDir := WLEnv.CacheDir + 'overheadfinder' + PATH_SEP;

  //Delete old cache files if they exist
  for path in DirList(Self.CacheDir) do
  begin
    tmp := Copy(path, Length(path) - Length(Self.Version) + 1, Length(path));
    if tmp <> Self.Version then
      DirDelete(path, False);
  end;

  Self.CacheDir += Self.Version + PATH_SEP;

  if not DirCreate(Self.CacheDir) then
    raise GetDebugLn('OverheadFinder', 'Failed to create cache directory: ' + Self.CacheDir);

  //only set similarity if the user didn't set it already
  if Self.Similarity = 0 then
    Self.Similarity := 0.90;
end;

(*
## TRSOverheadFinder.GetImage
```pascal
function TRSOverheadFinder.GetImage(overhead: ERSOverhead): TImage;
```
Internal function.
Retrieves or loads the template image for a specific overhead type.
Images are cached after first load.

Parameters:
- overhead: The overhead type to get the template image for

Returns TImage object containing the template, or raises exception if image cannot be loaded.
*)
function TRSOverheadFinder.GetImage(overhead: ERSOverhead): TImage;
var
  name, path: String;
begin
  if Self.Images[overhead] <> nil then
    Exit(Self.Images[overhead]);

  name := ToStr(overhead).ToLower().After('.') + '.png';
  path := Self.CacheDir + name;

  if not (FileExists(path) or ZipExtractEntry(WLAssets.OverheadFinder.Path, name, Self.CacheDir)) then
    raise GetDebugLn('OverheadFinder', Format('Failed to unzip overhead image %s', [name]));

  Result := Self.Images[overhead] := new TImage(path);
end;

(*
## TRSOverheadFinder.Find
```pascal
function TRSOverheadFinder.Find(overheads: set of ERSOverhead; maxToFind: Integer = 5): TRSOverheadArray;
```
Searches the main screen for specified overhead prayer/protection icons using template matching.
Detects overhead icons by first finding the characteristic background color, then performing
template matching within those regions.

Parameters:
- overheads: Set of overhead types to search for
- maxToFind: Maximum number of overhead icons to detect (default: 5)

Returns TRSOverheadArray containing detected overhead positions and types.

Example:
```pascal
var
  foundOverheads: TRSOverheadArray;
  i: Integer;
begin
  OverheadFinder.Setup();
  foundOverheads := OverheadFinder.Find([MAGIC, RANGED, MELEE], 10);

  if Length(foundOverheads) > 0 then
  begin
    WriteLn('Found ' + ToStr(Length(foundOverheads)) + ' overhead icons:');
    for i := 0 to High(foundOverheads) do
      WriteLn('- ' + ToStr(foundOverheads[i].Overhead) + ' at ' + ToStr(foundOverheads[i].Position));
  end else
    WriteLn('No overhead icons detected');
end;
```

{figure} ../../images/overhead_detection_example.png
*)
function TRSOverheadFinder.Find(overheads: set of ERSOverhead; maxToFind: Integer = 5): TRSOverheadArray;
var
  background: TPointArray;
  overhead: ERSOverhead;
  bounds: TBox;
  searchingBounds: TBoxArray;
  overheadImage: TImage;
  matrix: TSingleMatrix;
begin
  background := Target.FindColor(TRSOverheadFinder.BACKGROUND_COLOR, MainScreen.Bounds);
  if background.Length = 0 then
    Exit;

  searchingBounds := background.Cluster(8).BoundsArray();

  for overhead in overheads do
  begin
    overheadImage := Self.GetImage(overhead);
    for bounds in searchingBounds do
    begin
      if (bounds.Width < overheadImage.Width) or (bounds.Height < overheadImage.Height) then
        Continue;

      matrix := MatchTemplate(Target.GetImage(bounds), overheadImage, ETMFormula.TM_CCOEFF_NORMED);

      with matrix.ArgMax do
      begin
        if matrix[Y,X] < Self.Similarity then
          Break;

        Result += [Point(X + 6,Y + 7).Offset(bounds.TopLeft).Offset(MainScreen.Bounds.TopLeft), overhead];
        if Result.Length = maxToFind then
          Exit;
      end;
    end;
  end;
end;

(*
## OverheadFinder variable
Global {ref}`TRSOverheadFinder` variable. Use this instance for all overhead
detection operations in your scripts.
*)
var
  OverheadFinder: TRSOverheadFinder;
