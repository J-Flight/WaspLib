{$I WaspLib/utils.simba}

const
  PATH = {$MACRO DIR};
  RS_ITEM_BORDER = $010000;
  RS_ITEM_SHADOW = $202030;
  CLEANUP = True;

var
  fullHashes, shortHashes: TStringArray;
  unique, collisions, shortCollisions: Int64;

function FullHashCheck(str: String): Boolean;
begin
  if fullHashes.Contains(str) then
  begin
    Inc(collisions);
    Exit(True);
  end;

  fullHashes += str;
  Inc(unique);
end;

procedure AddHash(full, short: String);
begin
  FullHashCheck(full);
  if shortHashes.Contains(short) then
    Inc(shortCollisions);

  shortHashes += short;
end;

function TImage.GetHash(): String;
var
  pixels: TIntegerArray;
  str: String;
  h, i: Int32;
begin
  pixels := Self.GetColors();

  h := $811C9DC5;
  for i:=0 to High(pixels) do
  begin
    if pixels[i] = $0 then
      Continue;
    h := (h * $1000193) xor pixels[i];
  end;

  str := LowerCase(IntToHex(h, 16));
  Result := str.CopyRange(str.Length-8, str.Length);

  AddHash(Result, Result);
end;

//Author: Slacky
procedure ClearItemBackground(img: TImage);
var
  border, shadow, tpa: TPointArray;
  atpa: T2DPointArray;
  i: Integer;
begin
  border := img.FindColor(RSColors.ITEM_BORDER , 0);
  tpa := border;
  for i := 0 to High(RSColors.STACK_COLORS) do
    tpa += img.FindColor(RSColors.STACK_COLORS[i], 0);
  shadow := img.FindColor(RSColors.ITEM_SHADOW_GRAY, 0) + img.FindColor(RSColors.ITEM_SHADOW, 0);
  atpa := tpa.Invert([0,0,img.Width-1, img.Height-1]).Cluster(1);
  for i := High(atpa) downto 0 do
    if atpa[i].Intersection(shadow).Length <> 0 then
      atpa.Delete(i);
  tpa := atpa.Merge() + border;
  img.DrawColor := $0;
  img.DrawTPA(tpa.Invert([0,0,img.Width-1, img.Height-1]));
end;

function FileSort(constref l, r: String): Int32;
begin
  if Length(l) < Length(r) then Exit(-1);
  if Length(l) > Length(r) then Exit(1);
  if l < r then Exit(-1);
  if l > r then Exit(1);
end;

(*
CreateHashesFile
----------------
```
procedure CreateHashesFile()
```
*)
procedure CreateHashesFile();
const
  ZIP_FILE = PATH + 'images.zip';
  TMP_PATH = PATH + 'images';
  MODDED_PATH = PATH + 'modded' + PATH_SEP;
var
  current, hash, id: String;
  img: TImage;
  t: UInt64;
begin
  try
    if not DirExists(TMP_PATH) then
    begin
      WriteLn 'unzipping... this will take a while.';
      ZipExtract(ZIP_FILE, TMP_PATH);
      WriteLn 'Done unzipping.';
    end;

    if DirExists(MODDED_PATH) then
      DirDelete(MODDED_PATH, True);

    DirCreate(MODDED_PATH);

    if FileExists(PATH + 'hash') then
      if not FileDelete(PATH + 'hash') then
      begin
        WriteLn 'Something went wrong deleting the old hashes file. No privilleges?';
        TerminateScript();
      end;

    t := Time();
    if not FileCreate(PATH + 'hash') then
    begin
      WriteLn 'Something went wrong creating a new hashes file.';
      TerminateScript;
    end;

    for current in Sorted(DirList(TMP_PATH + '\'), @FileSort) do
    begin
      if not current.EndsWith('png', False) then
        Continue;

      img := TImage.Create(current);
      if (img.Width <> 36) or (img.Height <> 32) then
      begin
        WriteLn(PathExtractName(current), ' has wrong dimensions.');
        img.Free();
        Continue;
      end;

      img.SetSize(img.Width + 1, img.Height + 1);
      img.Offset(1,1);
      ClearItemBackground(img);
      img.Crop([1, 10, 36, 32]);

      hash := img.GetHash();
      if not FileAppend(PATH + 'hash', hash + LINE_SEP) then
      begin
        WriteLn 'Failed to write to hash';
        TerminateScript();
      end;

      id := PathExtractName(current).Before('.png');
      if not img.Save(MODDED_PATH + id + '.png') then
      begin
        WriteLn 'Failed to write to img file';
        TerminateScript();
      end;

      img.Free();
    end;

    WriteLn('Hashing all files took: ', (Time()-t) div 1000, ' seconds.');
  finally
    if CLEANUP then
    begin
      DirDelete(TMP_PATH, False);
      DirDelete(MODDED_PATH, False);
    end;
  end;
end;

procedure TestHash(itemID: String);
const
  ZIP_FILE = PATH + 'images.zip';
  TMP_PATH = PATH + 'images';
  MODDED_PATH = PATH + 'modded' + PATH_SEP;
var
  current, hash, id: String;
  img: TImage;
begin
  if not DirExists(TMP_PATH) then
  begin
    WriteLn 'unzipping... this will take a while.';
    ZipExtract(ZIP_FILE, TMP_PATH);
    WriteLn 'Done unzipping.';
  end;

  DirCreate(MODDED_PATH);

  if FileExists(MODDED_PATH + id + '.png') then
    if not FileDelete(MODDED_PATH + id + '.png') then
    begin
      WriteLn 'Couldn''t delete modded/ ' + id + '.png';
      TerminateScript();
    end;

  img := TImage.Create(TMP_PATH + PATH_SEP + itemID + '.png');
  img.ReplaceColor(0, $00FF00);
  img.Crop([0, 0, 35, 31]);

  if (img.Width <> 36) or (img.Height <> 32) then
  begin
    WriteLn(PathExtractName(current), ' has wrong dimensions.');
    img.Free();
    Exit;
  end;

  id := PathExtractName(current).Before('.png');

  ClearItemBackground(img);

  img.Show();

  hash := img.GetHash();

  if not img.Save(MODDED_PATH + id + '.png') then
  begin
    WriteLn 'Failed to write to img file';
    TerminateScript();
  end;

  WriteLn hash;
  img.Free();
end;

begin
  CreateHashesFile();
  WriteLn(
    'Total Unique Items: ', unique, LINE_SEP,
    'Total Full Hashes:', Length(fullHashes), LINE_SEP,
    'Total Short Hashes:', Length(shortHashes), LINE_SEP,
    'Total Collisions:', collisions, LINE_SEP,
    'Total Short Collisions:', shortCollisions, LINE_SEP
  );
end.
