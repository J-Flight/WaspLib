{$DEFINE SRLT_ACCOUNT_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

var
  AccountIndex: Integer;

type
  TRSAccount = record
    Username, Password, Pin: String;
    Worlds: TIntegerArray;
    Active: Boolean;
  end;

  TRSAccountArray = array of TRSAccount;

(*
## TRSAccountArray.Add
```pascal
procedure TRSAccountArray.Add(user, pass: String; pin: String = ''; worlds: TIntegerArray = []);
```
Adds a TRSAccount to the TRSAccountArray.

Example:
```pascal
//TODO
```
*)
procedure TRSAccountArray.Add(user, pass: String; pin: String = ''; worlds: TIntegerArray = []);
begin
  Self += [user, pass, pin, worlds, true];
end;

procedure TRSAccountArray.NextAccount(disableCurrent: Boolean);

  function _Next(): Integer;
  var
    i: Integer;
  begin
    for i := AccountIndex + 1 to High(Self) do
      if Self[i].Active then
        Exit(i);

    for i := 0 to AccountIndex - 1 do // wrap around
      if Self[i].Active then
        Exit(i);

    Result := -1;
  end;

begin
  Self[AccountIndex].Active := not disableCurrent;

  AccountIndex := _Next();
  if AccountIndex < 0 then
    raise GetDebugLn('Accounts', 'No active players to switch to.');
end;

(*
## Accounts.GetAccount
```pascal
function TRSAccountArray.GetAccount(): TRSAccount;
```
Returns the currently selected TRSAccount.
The currently selected TRSAccount is decided by `AccountIndex` which
is an index of the TRSAccountArra.

Example:
```pascal
  WriteLn Accounts.GetAccount().Username;
```
*)
function TRSAccountArray.GetAccount(): TRSAccount;
begin
  if Self = [] then
    raise GetDebugLn('Accounts', 'No accounts declared: Add an account if you want scripts to handle login.');
  if not InRange(AccountIndex, 0, High(Self)) then
    raise GetDebugLn('Accounts', 'Account is out of range: Account number selected in script does not exist.');

  Result := Self[AccountIndex];
end;

(*
## Accounts.GetPin
```pascal
function TRSAccountArray.GetPin(): String;
```
Get the current account bank pin.

Example:
```pascal
if BankPin.IsOpen() then
  BankPin.Enter(Accounts.GetPin());
```
*)
function TRSAccountArray.GetPin(): String;
begin
  Result := Self.GetAccount().Pin;
  if (Length(Result) <> 4) or (not Result.IsNumeric) then
    raise GetDebugLn('Accounts', 'Invalid bank pin.');
end;

var
  Accounts: TRSAccountArray;
