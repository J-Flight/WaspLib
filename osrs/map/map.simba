(*
# Map
This file is responsible for the TRSMap positioning system.
It was made from scratch by Torwent but heavily inspired in the original
TRSWalker by Slacky and it's future iterations made by Olly.
Without them, this wouldn't be possible.

For a online interactive map you can visit [](https://map.waspscripts.com/)
*)

{$DEFINE WL_MAP_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TRSPosition
Record holding a player's full position:
- X, Y coordinate
- Z which is the player height on the current heightmap
- Plane which is the player's current plane if several planes are being used.
*)
  TRSPosition = record
    X, Y, Plane: Integer;
    Z: Single;
  end;

(*
## TRSMapSample
Record used to customize the sample retrieved from the minimap for TRSMap.
*)
  TRSMapSample = record
    Amount, Radius: Int32;
  end;

function TRSPosition.ToPoint(): TPoint;
begin
  Result := [Self.X, Self.Y];
end;

type
(*
## TRSMap
Record responsible for positioning.
*)
  TRSMap = record
    RegionIndex: Integer;
    Region: TRSMapRegion;

    Walker: TRSWalker;

    Similarity: Single;
    Cache: TMatchTemplateCache;
    Loader: TRSMapLoader;

    Sample: TRSMapSample;

    Filters: TBoxFilterArray;

    IsSetup, DisableHeightmap: Boolean;
  end;

  PRSMap = ^TRSMap;

function TRSMap.Position(): TPoint; forward;

function TRSMap.Height(pt: TPoint = [0,0]): Single; forward;



(*
## Map.InternalSetup
```pascal
procedure TRSMap.InternalSetup();
```
Internal TRSMap setup method.
This is caleld automatically for you and you shouldn't need to call it.
*)
procedure TRSMap.InternalSetup();
var
  img, sample: TImage;
  i: Integer;
  b: TBox;
begin
  if Self.Sample.Amount = 0 then Self.Sample.Amount := 4;
  if Self.Sample.Radius = 0 then Self.Sample.Radius := 65;

  img := Minimap.GetCleanImage();
  sample := Minimap.ScaleMinimap(img, Self.Loader.Downscale, Self.Sample.Radius);
  img.Free();

  Self.Cache := TMatchTemplateCache.Create(Self.Loader.DownscaledMap, sample, ETMFormula.TM_CCOEFF_NORMED);
  Self.Cache.FreeOnTerminate := True;
  sample.Free();

  Self.Filters := [];
  for i := 0 to High(Self.Loader.Regions) do
  begin
    b := Self.Loader.Regions[i].Region.Expand(-(Self.Loader.Padding));
    Self.Filters += [b, True];
  end;

  if not Self.IsSetup then
  begin
    Self.Walker.Setup(
      @Self.Position, @Self.Height, @Self.Loader.GetLocal,
      @Self.Loader.Graph, Self.Loader.Map
    );
    Self.Walker.Name := 'Map.Walker';
    Self.IsSetup := True;
  end;
end;


(*
## Map.Setup
```pascal
procedure TRSMap.SetupEx(boxes: TBoxArray; planes: TIntegerArray = [0]; downscale: Integer = 8);
procedure TRSMap.Setup(chunks: TRSMapChunkArray; downscale: Integer = 8);
procedure TRSMap.Setup(chunk: TRSMapChunk; downscale: Integer = 8); overload;
procedure TRSMap.Setup(echunks: set of ERSChunk; downscale: UInt32 = 8); overload;
procedure TRSMap.Setup(echunk: ERSChunk; downscale: UInt32 = 8); overload;
```
Sets up a {ref}`TRSMap`.
*)
procedure TRSMap.SetupEx(boxes: TBoxArray; planes: TIntegerArray = [0]; downscale: Integer = 8);
var
  i: Int32;
  chunk: TRSMapChunk;
  chunks: array of TRSMapChunk;
begin
  chunk.Planes := planes;

  for i := 0 to High(boxes) do
  begin
    chunk.Chunk := boxes[i];
    chunks += chunk;
  end;

  Self.Loader.Load(chunks, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.Setup(chunks: TRSMapChunkArray; downscale: Integer = 8);
begin
  Self.Loader.Load(chunks, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.Setup(chunk: TRSMapChunk; downscale: Integer = 8); overload;
begin
  Self.SetupEx([chunk.Chunk], chunk.Planes, downscale);
end;

procedure TRSMap.Setup(echunks: set of ERSChunk; downscale: UInt32 = 8); overload;
var
  chunks: array of TRSMapChunk;
  echunk: ERSChunk;
begin
  for echunk in echunks do
    chunks += echunk.Get();
  Self.Setup(chunks, downscale);
end;

procedure TRSMap.Setup(echunk: ERSChunk; downscale: UInt32 = 8); overload;
var
  chunk: TRSMapChunk;
begin
  chunk := echunk.Get();
  Self.Setup(chunk, downscale);
end;

(*
## Map.Add
```pascal
procedure TRSMap.AddEx(boxes: TBoxArray; planes: TIntegerArray = [0]; downscale: Integer = 8);
procedure TRSMap.Add(chunks: TRSMapChunkArray; downscale: Integer = 8);
procedure TRSMap.Add(echunks: set of ERSChunk; downscale: UInt32 = 8); overload;
```
TRSMap to add maps to an already setup TRSMap.
*)
procedure TRSMap.AddEx(boxes: TBoxArray; planes: TIntegerArray = [0]; downscale: Integer = 8);
var
  i: Int32;
  chunk: TRSMapChunk;
  chunks: array of TRSMapChunk;
begin
  chunk.Planes := planes;

  for i := 0 to High(boxes) do
  begin
    chunk.Chunk := boxes[i];
    chunks += chunk;
  end;

  Self.Loader.Add(chunks);
  Self.InternalSetup();
end;

procedure TRSMap.Add(chunks: TRSMapChunkArray; downscale: Integer = 8);
var
  chunk: TRSMapChunk;
begin
  for chunk in chunks do
    Self.AddEx([chunk.Chunk], chunk.Planes, downscale);
end;

procedure TRSMap.Add(echunks: set of ERSChunk; downscale: UInt32 = 8); overload;
var
  chunks: array of TRSMapChunk;
  echunk: ERSChunk;
begin
  for echunk in echunks do
    chunks += echunk.Get();
  Self.Add(chunks, downscale);
end;


(*
## Map.ScaledSearch
```pascal
function TRSMap.ScaledSearch(img: TImage): TPointArray;
```
Internal TRSMap method used to get an initial TPointArray of possible positions.
This is performed in a downscaled map with a downscaled minimap.
This is very innacurate by itself but by ruling down most of the map
in a downscaled search before doing a full sized search speed has a dramatic boost.
You probably won't ever need to call this directly.
*)
function TRSMap.ScaledSearch(img: TImage): TPointArray;
var
  sample: TImage;
  matrix: TSingleMatrix;
  w, h, i, loops: Integer;
  pt, loaderOffset: TPoint;
  width, height: Integer;
begin
  try
    sample := Minimap.ScaleMinimap(img, Self.Loader.Downscale, Self.Sample.Radius);
    matrix := MatchTemplateMask(Self.Cache, sample.ToMatrix(), ETMFormula.TM_CCOEFF_NORMED);
    w := sample.Width div 2;
    h := sample.Height div 2;
  finally
    sample.Free();
  end;

  loaderOffset := [Self.Loader.Downscale div 2, Self.Loader.Downscale div 2];
  matrix.GetSize(width, height);
  width -= 1;
  height -= 1;

  while Length(Result) < Self.Sample.Amount do
  begin
    with matrix.ArgMax() do
    begin
      pt := Offset(w, h);
      pt := pt * Self.Loader.Downscale;

      for i := 0 to High(Self.Filters) do
      begin
        if Self.Filters[i].Valid(pt) then
        begin
          Result += pt + loaderOffset;
          matrix.Fill([Max(0, X-5), Max(0, Y-5), Min(width, X+5), Min(height, Y+5)], 0);
          Continue(2);
        end;
      end;

      matrix.Fill([Max(0, X-5), Max(0, Y-5), Min(width, X+5), Min(height, Y+5)], 0);
    end;

    if Inc(loops) > 70 then Break;
  end;
end;

(*
## Map.FullSearch
```pascal
function TRSMap.FullSearch(template, world: TImage; position: TPoint; out match: Single): TPoint;
```
Internal TRSMap method used to get the player position.
This is used by TRSMap.Position() to determine how likely is the **Position** passed in, our actual position.
This likelyhood is returned with **Match** which ranges from 0 to 1.
You probably won't ever need to call this directly.
*)
function TRSMap.FullSearch(template, map: TImage; position: TPoint; out match: Single): TPoint;
const
  TEMPL_SIZE = 25;
  SLICE_SIZE = TEMPL_SIZE + 45;
  SCALING = 2;
var
  slice, downscaledSlice, downscaledTemplate: TImage;
  matrix: TSingleMatrix;
  area: TBox;
begin
  area := [
    Max(0, position.X - SLICE_SIZE),
    Max(0, position.Y - SLICE_SIZE),
    Min(map.Width  - 1, position.X + SLICE_SIZE),
    Min(map.Height - 1, position.Y + SLICE_SIZE)
  ];


  try
    slice := map.Copy(area);
    downscaledSlice := slice.Downsample(SCALING);
    downscaledTemplate := template.Downsample(SCALING);
    downscaledTemplate.Crop(TBox.Create(downscaledTemplate.Center, TEMPL_SIZE, TEMPL_SIZE));

    matrix := MatchTemplate(downscaledSlice, downscaledTemplate, ETMFormula.TM_CCOEFF_NORMED);
    with matrix.ArgMax() do
    begin
      match := matrix[Y, X];
      Result.X := area.X1 + (X + TEMPL_SIZE) * SCALING;
      Result.Y := area.Y1 + (Y + TEMPL_SIZE) * SCALING;
    end;
  finally
    slice.Free;
    downscaledSlice.Free;
    downscaledTemplate.Free;
  end;
end;

(*
## Map.Position
```pascal
function TRSMap.Position(): TPoint;
function TRSMap.FullPosition(): TRSPosition;
```
Returns the players current position on the loaded map.
`TRSMap.FullPosition()` also returns the current Z level.

Example:
```pascal
WriteLn(Map.Position());
WriteLn(Map.Similarity); // Check to see the match percentage if needed
```
*)
function TRSMap.Position(): TPoint;
var
  clean: TImage;
  tpa: TPointArray;
  i: Integer;
  hit: TPoint;
  match: Single;
begin
  Self.RegionIndex := -1;
  Self.Region := [];
  Self.Similarity := 0;

  try
    clean := Minimap.GetCleanImage();
    tpa := Self.ScaledSearch(clean);

    for i := 0 to High(tpa) do
    begin
      hit := Self.FullSearch(clean, Self.Loader.Map, tpa[i], match);

      if match > Self.Similarity then
      begin
        Self.Similarity := match;
        Result := hit;
      end;
    end;
  finally
    clean.Free();
  end;

  Self.RegionIndex := Self.Loader.LocalIndex(Result);
  if Self.RegionIndex < 0 then
    Exit([0,0]);

  Self.Region := Self.Loader.Regions[Self.RegionIndex];
  Result := Self.Loader.GetGlobal(Self.RegionIndex, Result);
  Exit(RSTranslator.Normalize(Result));
end;

function TRSMap.FullPosition(): TRSPosition;
begin
  with Self.Position() do
  begin
    Result.X := X;
    Result.Y := Y;
    Result.Plane := Self.Region.Plane;
    Result.Z := Self.Height([X,Y]);
  end;
end;

function TRSMap.GetRegionIndex(): Int32;
begin
  Self.Position();
  Result := Self.RegionIndex;
end;


(*
## Map.Height
```pascal
function TRSMap.Height(p: TPoint = [-1,-1]; global: Boolean): Single;
function TRSMap.Height(p: TPoint = [-1,-1]): Single; overload;
```
Returns the height of the player at the specified coordinate if there's a heightmap loaded.
If p is [-1,-1], which is the default then we will use our current position.
global decides wether the coordinate is converted to global coordinates or internal walker coordinates (read about walker regions for more info).

Example:
```pascal
WriteLn rsw.GetHeight();
```
*)
function TRSMap.HeightEx(p: TPoint = [0,0]; global: Boolean): Single; overload;
begin
  if Self.DisableHeightmap or not Assigned(Self.Loader.Heightmap) then
    Exit(0);

  if p = [0, 0] then
  begin
    global := True;
    p := Self.Position();
  end;

  if global then
    p := Self.Loader.GetLocal(Self.RegionIndex, p);

  if Self.Loader.Heightmap.InImage(p.X, p.Y) then
    Result := RSTranslator.Color2Height(Self.Loader.Heightmap.Pixel[p.X, p.Y]);
end;

function TRSMap.Height(p: TPoint = [0,0]): Single;
begin
  Result := Self.HeightEx(p, True);
end;

function TRSMap.HeightDifference(p, q: TPoint; global: Boolean = True): Single;
var
  c1, c2: TColor;
begin
  if Self.DisableHeightmap or not Assigned(Self.Loader.Heightmap) then
    Exit;

  if global then
  begin
    p := Self.Loader.GetLocal(Self.RegionIndex, p);
    q := Self.Loader.GetLocal(Self.RegionIndex, q);
  end;

  c1 := Self.Loader.Heightmap.Pixel[p.X, p.Y];
  c2 := Self.Loader.Heightmap.Pixel[q.X, q.Y];
  if c1 = c2 then Exit(0);

  Result := RSTranslator.Color2Height(c1) - RSTranslator.Color2Height(c2);
end;


(*
## Map.DebugPosition
```pascal
function TRSMap.DebugPosition(): TPoint;
```
Debugs the player position in the currently loaded map.

Example:
```pascal
Map.Setup();
while True do
  Map.DebugPosition();
```
*)
function TRSMap.DebugPosition(print: Boolean = True): TPoint;
  function _BoxStr(b: TBox): String;
  begin
    Result := Format('[%d, %d, %d, %d]', [b.X1, b.Y1, b.X2, b.Y2]);
  end;
var
  x1, y1, x2, y2, x, y, i: Int32;
  p, local: TPoint;
  img, map, cleanMinimap: TImage;
  time: Double;
  lines: TStringArray;
begin
  Target.FreezeImage();

  time   := PerformanceTime();
  Result := Self.Position();

  time   := PerformanceTime() - time;

  case Self.RegionIndex of
    -1:  local := Result;
    else
    begin
      local := Self.Loader.GetLocal(Self.RegionIndex, Result);
      x := Self.Region.Region.X1;
      y := Self.Region.Region.Y1;
    end;
  end;

  x1 := Max(0, local.X - 200);
  y1 := Max(0, local.Y - 200);
  x2 := Min(x1 + 400, Self.Loader.Map.Width  - 1);
  y2 := Min(y1 + 400, Self.Loader.Map.Height - 1);

  x := local.X - x1;
  y := local.Y - y1;

  lines := [
    'Position:',
    ' - Local : '  + Format('[%d, %d]', [local.X, local.Y]),
    ' - Global: ' + Format('[%d, %d]', [Result.X, Result.Y]),
    '',
    'Region:',
    ' - Index   : ' + ToStr(Self.RegionIndex),
    ' - Name    : ' + ToStr(Self.Region.GetName()),
    ' - Plane   : ' + ToStr(Self.Region.Plane),
    ' - Local   : ' + _BoxStr(Self.Region.Region),
    ' - Original: ' + _BoxStr(Self.Region.Original),
    ' - Compass: ' + ToStr(Minimap.GetCompassAngle()),
    '',
    'Certainty: '    + ToStr(Round(Self.Similarity, 3)),
    'Time: '         + ToStr(Round(time)) + ' ms'
  ];

  with TImagePool.Create() do
  try
    map := Self.Loader.Map.Copy([x1, y1, x2, y2]);
    map.DrawColor := $00FF00;
    map.DrawLine(Point(0, y), Point(x2 - x1, y));
    map.DrawLine(Point(x, 0), Point(x, y2 - y1));
    map.DrawColor := $FFFFFF;
    map.DrawBox([x - 2, y - 2, x + 2, y + 2]);

    cleanMinimap := Minimap.ScaleMinimap(Minimap.GetCleanImage(), 1);
    img := TImage.Create(700 + cleanMinimap.Width, 440);
    img.DrawImage(map, [10, 20]);

    with cleanMinimap.Center do
      if RSClient.Mode = ERSMode.FIXED then
        p := Point(X, Y).Offset(0, 8).Rotate(-Minimap.GetCompassAngle(False), [X,Y]);

    cleanMinimap.DrawColor := $FFFFFF;
    cleanMinimap.DrawBoxFilled([p.X - 1, p.Y - 1, p.X + 1, p.Y + 1]);

    img.FontName := 'Consolas';
    img.FontSize := 18;
    img.FontAntialiasing := True;

    img.DrawColor := $FFFFFF;
    for i := 0 to High(lines) do
    begin
      if print then WriteLn(lines[i]);
      img.DrawText(lines[i], [430, cleanMinimap.Height + 20 + 20 * i]);
    end;

    img.DrawImage(cleanMinimap, [520, 10]);

    img.Show();
  finally
    Free();
  end;

  Target.UnFreezeImage();
end;

var
(*
## Map variable
Global {ref}`TRSMap` variable.
*)
  Map: TRSMap;
