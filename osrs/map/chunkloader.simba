(*
# MapLoader
This file is responsible for loading chunk maps for TRSMap.
It was made from scratch but heavily inspired in the original
TRSWalker by Slacky and it's future iterations made by Olly.

```{note}
Most things in this file are for internal use only and you shouldn't use them directly
nor modify them if you don't quite understand them.
```

Credits: Torwent
*)

{$DEFINE SRLT_CHUNKLOADER_INCLUDED}
{$IFNDEF SRLT_OSR}
  {$I SRLT/osrs.simba}
{$ENDIF}

type
(*
(TRSMapChunk)=
## type TRSMapChunk
```pascal
TRSMapChunk = record
  Chunk: TBox;
  Planes: TIntegerArray;
end;
```
Helper record to store chunk data with a name associated with.
*)
  TRSMapChunk = record
    Chunk: TBox;
    Planes: TIntegerArray;
  end;

function Chunk(b: TBox; planes: TIntegerArray): TRSMapChunk;
begin
  Result.Chunk := b;
  Result.Planes := planes;
end;

function Chunk(b: TBox; plane: Integer): TRSMapChunk; overload;
begin
  Result := Chunk(b, [plane]);
end;

type
(*
(ERSMap)=
## type ERSMap
```pascal
ERSMap = (NORMAL, HEIGHT, COLLISION);
```
Enum of map types.
*)
  ERSMap = (NORMAL, HEIGHT, COLLISION);

(*
(ERSMapJSON)=
## type ERSMapJSON
```pascal
ERSMapJSON = (OBJECTS, NPCS);
```
Enum of map json types.
*)
  ERSJSON = (OBJECTS, NPCS);

(*
(TRSChunkLoader)=
## type TRSChunkLoader
```pascal
TRSChunkLoader = record
  Cache: String;
end;
```
ChunkLoader record, this is what's responsible for loading a "chunks" map.
*)
  TRSChunkLoader = record
    Name: String;
    Cache: String;
  end;

(*
## TRSChunkLoader.Setup
```pascal
procedure TRSChunkLoader.Setup(name, cache: String);
```
This is responsible for setting up the TRSChunkLoader.
```{note}
This is an internal method. Don't use it if you don't know what you are doing.
```
*)
procedure TRSChunkLoader.Setup(name, cache: String);
begin
  Self.Name := name;
  Self.Cache := cache;
end;
