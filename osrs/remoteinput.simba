(*
# RemoteInput
Remote Input is an external plugin which provides, well, "remote" input.

In other words, it's the tool SRLT uses so Simba doesn't use your real mouse and
keyboard while botting.

Remote input also gives you a full reflection environment to bot with if you
desire but in the case of SRLT, it's used exclusively for input and you need to
either include a reflection library, implement one yourself or use the plugin
functions directly.

If you wish to completely disable remote input you can do so by adding the
following compiler directive before you include SRLT in your script:
```pascal
{$DEFINE SRLT_DISABLE_REMOTEINPUT}
```

You can find remote input source code here: https://github.com/Brandon-T/RemoteInput
*)
{$DEFINE SRLT_REMOTEINPUT_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

{.$DEFINE SRLT_DISABLE_REMOTEINPUT}

{$loadlib ../plugins/libremoteinput/libremoteinput}

type
(*
## TRemoteInput
Main record used to interact with the remote input plugin.
*)
  TRemoteInput = record
    EIOS: Pointer;
    Canvas: TExternalCanvas;
  end;

(*
## TRemoteInput.Setup
```pascal
procedure TRemoteInput.Setup();
```
Internal method used to setup {ref}`TRemoteInput`.
This is automatically called for you on the {ref}`RemoteInput variable`.
*)
procedure TRemoteInput.Setup();
const
  TIMEOUT: UInt64 := GetTickCount() + 2000;
begin
  if Target.TargetWindow.GetClassName() <> 'SunAwtCanvas' then Exit;

  RIInject(GetSimbaTargetPID());

  repeat
    Self.EIOS := EIOS_PairClient(GetSimbaTargetPID());
    if Self.EIOS <> nil then Break;
    Sleep(100);
  until GetTickCount() > TIMEOUT;

  if Self.EIOS = nil then
  begin
    WriteLn GetDebugLn('RemoteInput', 'Invalid target for RemoteInput, RemoteInput will not be used.', EErrorLevel.WARN);
    Exit;
  end;

  Target.SetPlugin({$MACRO LOADEDLIB(libremoteinput)}, ToStr(GetSimbaTargetPID()), Self.Canvas);
end;

(*
## TRemoteInput.LoseFocus
```pascal
procedure TRemoteInput.LoseFocus();
procedure TRemoteInput.LoseFocus(delay: Integer); overload;
```
Lose focus implementation for when you are using remote input.

Example:
```pascal
RemoteInput.LoseFocus();
```
*)
procedure TRemoteInput.LoseFocus();
var
  space: TBoxArray;
begin
  space := Target.Bounds.Expand(50).Invert(Target.Bounds.Expand(500));
  if Length(space) = 0 then Exit;

  Target.MouseMove(Space.Random());
  Target.MouseClick(EMouseButton.LEFT);
end;

procedure TRemoteInput.LoseFocus(delay: Integer); overload;
begin
  Sleep(delay);
  Self.LoseFocus();
end;


(*
## TRemoteInput.IsInputEnabled
```pascal
function TRemoteInput.IsInputEnabled(): Boolean;
```
Returns True/False if the user **REAL** input is enabled/disabled,
fully or partially, on the client.

Example:
```pascal
WriteLm RemoteInput.IsInputEnabled();
```
*)
function TRemoteInput.IsInputEnabled(): Boolean;
begin
  Result := EIOS_IsMouseInputEnabled(Self.EIOS) and EIOS_IsKeyboardInputEnabled(Self.EIOS);
end;


(*
## TRemoteInput.DisableRealInput
```pascal
procedure TRemoteInput.DisableRealInput();
```
Disables the user real input on the client for both the mouse and keyboard.

Example:
```pascal
RemoteInput.DisableRealInput();
```
*)
procedure TRemoteInput.DisableRealInput();
begin
  EIOS_SetMouseInputEnabled(Self.EIOS, False);
  EIOS_SetKeyboardInputEnabled(Self.EIOS, False);
end;

(*
## TRemoteInput.EnableRealInput
```pascal
procedure TRemoteInput.EnableRealInput();
```
Enables the user real input on the client for both the mouse and keyboard.

Example:
```pascal
RemoteInput.EnableRealInput();
```
*)
procedure TRemoteInput.EnableRealInput();
begin
  EIOS_SetMouseInputEnabled(Self.EIOS, True);
  EIOS_SetKeyboardInputEnabled(Self.EIOS, True);
end;

var
(*
## RemoteInput variable
Global {ref}`TRemoteInput` variable.
*)
  RemoteInput: TRemoteInput;
