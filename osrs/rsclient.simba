(*
# RSClient
Methods relating to targeting the RS client and detecting client states.
*)

{$DEFINE SRLT_RSCLIENT_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

type
(*
## ERSClient
```pascal
ERSClient = enum(UNKNOWN, LEGACY, RUNELITE, OFFICIAL);
```
Enums that represent the client type.
*)
  ERSClient = enum(UNKNOWN, LEGACY, RUNELITE, OFFICIAL);

(*
## ERSMode
```pascal
ERSMode = enum(UNKNOWN, FIXED, RESIZABLE_CLASSIC, RESIZABLE_MODERN);
```
Enums that represent the client mode.
*)
  ERSMode = enum(UNKNOWN, FIXED, RESIZABLE_CLASSIC, RESIZABLE_MODERN);

(*
## TRSClient
Record representing the RuneScape client.
*)
  TRSClient = record
    Client: ERSClient;
    Mode: ERSMode;
  end;

(*
## RSClient.GetClient
```pascal
function TRSClient.GetClient(): ERSClient;
```
Returns the client type being used.

Example:
```pascal
WriteLn RSClient.GetClient();
```
*)
function TRSClient.GetClient(): ERSClient;
begin
  with Target.TargetWindow do
  begin
    case GetClassName() of
      'JagRenderView', 'JagWindow': Exit(ERSClient.OFFICIAL);
    end;

    case GetRootWindow().GetTitle() of
      'Old School RuneScape': Result := ERSClient.LEGACY;
      'RuneLite': Result := ERSClient.RUNELITE;
    end;
  end;
end;


(*
## RSClient.GetMode
```pascal
function TRSClient.GetMode(): ERSMode;
```
Returns the client mode.

Example:
```pascal
WriteLn RSClient.GetMode();
```
*)
function TRSClient.GetMode(): ERSMode;
begin
  // Music tab in each mode there are different colors at W-4, H-21
  // Two colors each because tab can be active(red) or not(grey)
  case Target.GetColor([Target.Width-4, Target.Height-21]) of
    2435372, 658467: Result := ERSMode.FIXED;
    3555653, 922425: Result := ERSMode.RESIZABLE_MODERN;
    2896180, 790059: Result := ERSMode.RESIZABLE_CLASSIC;
  end;
end;

(*
## RSClient.WaitModeChange
```pascal
function TRSClient.WaitModeChange(time: Integer = 600; interval: Integer = -1): Boolean;
```
Waits `time` milliseconds for the client mode to change
*)
function TRSClient.WaitModeChange(time: Integer = 1200; interval: Integer = -1): Boolean;
var
  mode: ERSMode;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(
              ((mode := Self.GetMode()) <> Self.Mode) and (mode <> ERSMode.UNKNOWN),
              interval, time
            );
end;



(*
## RSClient.IsLoggedIn
```pascal
function TRSClient.IsLoggedIn(): Boolean;
```
Returns true/false whether there's a player logged in or not.

Example:
```pascal
WriteLn RSClient.IsLoggedIn();
```
*)
function TRSClient.IsLoggedIn(): Boolean;
begin
  Result := Self.GetMode() <> ERSMode.UNKNOWN;
end;

(*
## RSClient.WaitLoggedIn
```pascal
function TRSClient.WaitLoggedIn(time: Integer = 2000; interval: Integer = -1): Boolean;
```
Waits `time` milliseconds for the players to be logged in.

Example:
```pascal
WriteLn RSClient.WaitLoggedIn();
```
*)
function TRSClient.WaitLoggedIn(time: Integer = 2000; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsLoggedIn(), interval, time);
end;

(*
## RSClient.LoseFocus()
```pascal
procedure TRSClient.LoseFocus();
procedure TRSClient.LoseFocus(delay: Int32);
```
Loses focus if available. Maybe useful for antiban.
You can optionally delay losing focus by passing in a `delay`.
*)
procedure TRSClient.LoseFocus();
begin
  WriteLn(GetDebugLn('RSClient', 'LoseFocus method is not implemented.', EErrorLevel.WARN));
end;

procedure TRSClient.LoseFocus(delay: UInt32); overload;
begin
  Sleep(delay);
  Self.LoseFocus();
end;

var
(*
## RSClient variable
Global {ref}`TRSClient` variable.
*)
  RSClient: TRSClient;
