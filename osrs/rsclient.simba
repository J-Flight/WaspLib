(*
# RSClient
Methods relating to targeting the RS client and detecting client states.
*)

{$DEFINE SRLT_RSCLIENT_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

type
(*
## RSClient Enums
```pascal
ERSClient = enum(UNKNOWN, LEGACY, RUNELITE, OFFICIAL);
ERSMode = enum(UNKNOWN, FIXED, RESIZABLE_CLASSIC, RESIZABLE_MODERN);
```
Enums that represent both the client type and the client mode.
*)
  ERSClient = enum(UNKNOWN, LEGACY, RUNELITE, OFFICIAL);
  ERSMode = enum(UNKNOWN, FIXED, RESIZABLE_CLASSIC, RESIZABLE_MODERN);

(*
(TRSClient)=
## type TRSClient
Record representing the RuneScape client.
*)
  TRSClient = record
    Client: ERSClient;
    Mode: ERSMode;
  end;

(*
## RSClient.DetectMode()
```pascal
function TRSClient.DetectMode(): ERSMode;
```
Detects the client mode.
*)
function TRSClient.DetectMode(): ERSMode;
begin
  // Music tab in each mode there are different colors at W-4, H-21
  // Two colors each because tab can be active(red) or not(grey)
  case Target.GetColor([Target.Width-4, Target.Height-21]) of
    2435372, 658467: Result := ERSMode.FIXED;
    3555653, 922425: Result := ERSMode.RESIZABLE_MODERN;
    2896180, 790059: Result := ERSMode.RESIZABLE_CLASSIC;
  end;
end;

(*
## RSClient.IsLoggedIn
```pascal
function TRSClient.IsLoggedIn(): Boolean;
```
Returns true/false whether there's a player logged in or not.

Example:
```pascal
WriteLn RSClient.IsLoggedIn();
```
*)
function TRSClient.IsLoggedIn(): Boolean;
begin
  Result := Self.DetectMode() <> ERSMode.UNKNOWN;
end;

(*
## RSClient.WaitLoggedIn
```pascal
function TRSClient.WaitLoggedIn(const time: Integer = 2000; interval: Integer = -1): Boolean;
```
Waits `time` milliseconds for the players to be logged in.

Example:
```pascal
WriteLn RSClient.WaitLoggedIn();
```
*)
function TRSClient.WaitLoggedIn(const time: Integer = 2000; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsLoggedIn(), interval, time);
end;

(*
## RSClient.LoseFocus()
```pascal
procedure TRSClient.LoseFocus();
procedure TRSClient.LoseFocus(delay: Int32);
```
Loses focus if available. Maybe useful for antiban.
You can optionally delay losing focus by passing in a `delay`.
*)
procedure TRSClient.LoseFocus();
begin
  {$IFDEF SRLT_REMOTEINPUT_INCLUDED}
  RemoteInput.LoseFocus();
  Exit;
  {$ENDIF}
  WriteLn(GetDebugLn('RSClient', 'LoseFocus method is not implemented.', EErrorLevel.WARN));
end;

procedure TRSClient.LoseFocus(delay: UInt32); overload;
begin
  Sleep(delay);
  Self.LoseFocus();
end;

var
  RSClient: TRSClient;
