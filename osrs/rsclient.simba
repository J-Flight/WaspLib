

{$DEFINE WL_RSCLIENT_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

{$IFDEF WL_TEST}{$DEFINE WL_DISABLE_FAKE_INPUT}{$ENDIF}

type

  ERSClient = enum(UNKNOWN, LEGACY, RUNELITE, OFFICIAL);


  ERSMode = enum(UNKNOWN, FIXED, RESIZABLE, MODERN_COMPACT, MODERN_WIDE);


  ERSPopoutPanel = enum(DISABLED, CLOSED, OPEN);


  TRSClient = record
    Client: ERSClient;
    Mode: ERSMode;
    Canvas: TExternalCanvas;
  end;


function TRSClient.GetClient(): ERSClient;
begin
  with GetSimbaTargetWindow() do
  begin
    case GetClassName() of
      'JagRenderView', 'JagWindow': Exit(ERSClient.OFFICIAL);
    end;

    case GetRootWindow().GetTitle() of
      'Old School RuneScape': Result := ERSClient.LEGACY;
      else if GetRootWindow().GetTitle().Contains('RuneLite') then
        Result := ERSClient.RUNELITE;
    end;
  end;
end;



function TRSClient._Bounds(img: TImage): TBox;
var
  x1, x2, y2: Integer;
begin
  if img.Pixel[0, img.Height-1] <> $0 then
    Exit(Target.Bounds);

  for x1 := 1 to img.Width-1 do
    if img.Pixel[x1, 150] <> $0 then
      Break;

  for x2 := img.Width-1 downto x1 do
    if img.Pixel[x2, 150] <> $0 then
      Break;

  if img.Height-1 < 503 then
  begin
    with GetSimbaTargetWindow().GetBounds() do
      GetSimbaTargetWindow().SetBounds([X1, Y1, X2, Y1+503]);
    Result := [x1, 0, x2, 503];
  end
  else
  begin
    for y2 := img.Height-1 downto 0 do
      if img.Pixel[x1, y2] <> $0 then
        Break;
    Result := [x1, 0, x2, y2];
  end;
end;

function TRSClient._Bounds(): TBox; overload;
begin
  Result := Self._Bounds(Target.GetImage());
end;


function TRSClient.GetPopoutPanelState(img: TImage): ERSPopoutPanel;
var
  x: Integer;
begin
  img.Crop([img.Width - 331, img.Height-2, img.Width-1, img.Height-1]);

  //find tab border color.
  for x := img.Width-1 downto 0 do
    if img.Pixel[x, 0] = $010000 then
      Break;

  case x of
    0..3, 15..17: Result := ERSPopoutPanel.OPEN;
    270..273, 285..287: Result := ERSPopoutPanel.CLOSED;
    else Result := ERSPopoutPanel.DISABLED;
  end;
end;

function TRSClient.GetPopoutPanelState(): ERSPopoutPanel; overload;
var
  img: TImage;
  b: TBox;
begin
  img := Target.GetImage();
  b := Self._Bounds(img);
  img.Crop(b);
  Result := Self.GetPopoutPanelState(img);
end;



property TRSClient.Bounds: TBox;
var
  img: TImage;
  b: TBox;
begin
  if Self.Client <> ERSClient.OFFICIAL then
    Exit(Target.Bounds);

  img := Target.GetImage();
  b := Self._Bounds(img);

  img.Crop(b);

  case Self.GetPopoutPanelState(img) of
    ERSPopoutPanel.DISABLED: Result := b;
    ERSPopoutPanel.CLOSED:   Result := [b.X1, b.Y1, b.X2 - 42, b.Y2];
    ERSPopoutPanel.OPEN:     Result := [b.X1, b.Y1, b.X2 - 312, b.Y2];
  end;
end;


function TRSClient.GetMode(): ERSMode;
var
  bounds: TBox;
begin
  if Self.Client = ERSClient.UNKNOWN then
    Exit;

  bounds := Self.Bounds;

  // Music tab in each mode there are different colors at W-4, H-21
  // Two colors each because tab can be active(red) or not(grey)
  case Target.GetColor(bounds.BottomRight.Offset(-3,-20)) of
    $25292C, $0A0C23: Result := ERSMode.FIXED;
    $2C3134, $0C0E2B: Result := ERSMode.RESIZABLE;
    $364145, $0E1339:
    begin
      if bounds.Width >= 948 then
        Result := ERSMode.MODERN_WIDE
      else
        Result := ERSMode.MODERN_COMPACT;
    end;
  end;
end;


function TRSClient.ModeChanged(): Boolean;
var
  current: ERSMode;
begin
  current := Self.GetMode();
  Result := (current <> Self.Mode) and (current <> ERSMode.UNKNOWN);
end;


function TRSClient.WaitModeChange(time: Integer = 1200; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.ModeChanged(), interval, time);
end;




function TRSClient.IsLoggedIn(): Boolean;
begin
  Result := Self.GetMode() <> ERSMode.UNKNOWN;
end;


function TRSClient.WaitLoggedIn(time: Integer = 2000; interval: Integer = -1): Boolean;
begin
  if interval < 0 then interval := RandomMode(100, 50, 1500);
  Result := SleepUntil(Self.IsLoggedIn(), interval, time);
end;

var

  RSClient: TRSClient;
