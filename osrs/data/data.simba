(*
# Data
This page is about fetching OSRS data with WaspLib.
WaspLib has several tools to get information about items, npcs, weapons, ...
*)

{$DEFINE WL_DATA_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TItemData
Record responsible for providing item information in WaspLib.
*)
  TItemData = record
    DefinitionsJSON, PricesJSON: TJSONItem;
    Filename: String;
    Timeout: UInt64;
    Disabled: Boolean;
    const CacheDir: String = WLEnv.CacheDir + 'data' + PATH_SEP;
    const ZIP: String = {$MACRO DIR} + 'items.zip';
    const PRICES_URL: String = 'https://prices.runescape.wiki/api/v1/osrs/latest';
  end;

(*
## EItemDataKey
```pascal
EItemDataKey = enum(ID..PARAMS);
```
Enum representing item definition keys.
*)
  EItemDataKey = enum(
    ID,
    NAME,
    RESIZE_X,
    RESIZE_Y,
    RESIZE_Z,
    XAN_2D,
    YAN_2D,
    ZAN_2D,
    COST,
    TRADEABLE,
    STACKABLE,
    INVENTORY_MODEL,
    WEAR_POS_1,
    WEAR_POS_2,
    WEAR_POS_3,
    MEMBERS,
    COLOR_FIND,
    COLOR_REPLACE,
    ZOOM_2D,
    X_OFFSET_2D,
    Y_OFFSET_2D,
    AMBIENT,
    CONTRAST,
    OPTIONS,
    INTERFACE_OPTIONS,
    MALE_MODEL_0,
    MALE_MODEL_1,
    MALE_MODEL_2,
    MALE_OFFSET,
    MALE_HEAD_MODEL,
    MALE_HEAD_MODEL_2,
    FEMALE_MODEL_0,
    FEMALE_MODEL_1,
    FEMALE_MODEL_2,
    FEMALE_OFFSET,
    FEMALE_HEAD_MODEL,
    FEMALE_HEAD_MODEL_2,
    CATEGORY,
    NOTED_ID,
    NOTED_TEMPLATE,
    TEAM,
    WEIGHT,
    SHIFT_CLICK_DROP_INDEX,
    BOUGHT_ID,
    BOUGHT_TEMPLATE_ID,
    PLACEHOLDER_ID,
    PLACEHOLDER_TEMPLATE_ID,
    PARAMS
  );

procedure TItemData.Free();
begin
  if Self.PricesJSON = nil then Exit;
  Self.PricesJSON.Free();
  Self.PricesJSON := nil;
end;

procedure TItemData.UpdateFile();
var
  t: UInt64;
  files: TStringArray;
  i: Integer;
begin
  files := DirList(Self.CacheDir + 'prices' + PATH_SEP).Sorted();
  for i := 0 to High(files)-1 do FileDelete(files[i]);

  if files <> [] then
  begin
    Self.Filename := files.Last;
    Self.Timeout := StrToInt64(PathExtractNameWithoutExt(Self.Filename), Self.Timeout);
  end;

  t := Time();

  if Self.Timeout < t then
  begin
    if Self.Filename <> '' then
    begin
      WriteLn GetDebugLn('ItemData', 'Data cached is old and will be updated.');
      FileDelete(Self.Filename);
    end;

    Self.Timeout := t + ONE_HOUR;
    Self.Filename := Self.CacheDir  + 'prices' + PATH_SEP + ToStr(Self.Timeout) + '.json';
    HTTPClient.GetFile(Self.PRICES_URL, Self.Filename);
  end;
end;

procedure TItemData.Reload();
var
  current: String;
begin
  if Self.Disabled then Exit;

  current := Self.Filename;
  Self.UpdateFile();
  if current = Self.Filename then Exit;

  Self.Free();

  try
    Self.PricesJSON := LoadJSON(Self.Filename);
  except
    FileDelete(Self.Filename);
    Self.Disabled := True;
  end;
end;

procedure TItemData.Setup();
begin
  if not DirCreate(Self.CacheDir + 'prices' + PATH_SEP) then
    raise GetDebugLn('ItemData', 'Failed to create cache directory: ' + Self.CacheDir + 'prices' + PATH_SEP);
  if not DirCreate(Self.CacheDir + 'items' + PATH_SEP) then
    raise GetDebugLn('ItemData', 'Failed to create cache directory: ' + Self.CacheDir + 'items' + PATH_SEP);

  Self.DefinitionsJSON := NewJSONObject();
  AddOnTerminate(@Self.DefinitionsJSON.Free);
  AddOnterminate(@Self.Free);
end;


(*
## ItemData.GetDefinition
```pascal
function TItemData.GetDefinition(itemID: String): TJSONItem;
```
This is mostly for internal use but you may use it for whatever you wish.

This returns a `TJSONItem` of the item definition.

Item definitions are items information stored in the game cache, things like:
- Item ID
- Item name
- Item is tradeable
- Item is stackable
- Item is members
- ...

WaspLib includes a zip file with item definitions for all non "null" items as .json files
in `WaspLib\osrs\data\items.zip`.

Example:
```pascal
id := ItemFinder.Database.Get('abyssal whip', 'item', 'id');
json := ItemData.GetDefinition(id);
parser := json.ToParser();
WriteLn parser.ToString();
parser.Free();
```
*)
function TItemData.GetDefinition(itemID: String): TJSONItem;
var
  path, filename: String;
begin
  if Self.DefinitionsJSON.GetObject(itemID, Result) then Exit;

  path := Self.CacheDir  + 'items' + PATH_SEP;
  filename := path + itemID + '.json';
  if not FileExists(filename) then
    if not ZipExtractEntry(Self.ZIP, itemID +'.json', path) then
      raise  GetDebugLn('ItemData', 'Couldn''t find ' + itemID + '.json');

  Result := LoadJSON(filename);
  Self.DefinitionsJSON.Add(itemID, Result);
end;

(*
## ItemData.GetTradeableID
```pascal
function TItemData.GetTradeableID(item: TRSItem): String;
```
Mostly for internal use but you may use it as you see fit.

Some items in the game have versions of themselves that are not tradeable and
can't be used to fetch item prices, such as degraded items, ornamented items, etc.

This function checks every id associated with the specified `item` and checks
the item definition of each one (check {ref}`ItemData.GetDefinition`) for the
tradeable key.

The first tradeable id found is returned.

Example:
```pascal
WriteLn ItemData.GetTradeableID('Rune scimitar'); //rune scimitar has 2 ids and one is not tradeable.
```
*)
function TItemData.GetTradeableID(item: TRSItem): String;
var
  ids: TStringArray;
  id: String;
  json: TJSONItem;
begin
  if item.IsNumeric then ids := [item]
  else ids := ItemFinder.Database.GetAll(item.ToLower(), 'item', 'id');

  for id in ids do
  begin
    json := Self.GetDefinition(id);
    if json.Item[Ord(EItemDataKey.TRADEABLE)].AsBool then
      Exit(id);
  end;
end;


(*
## ItemData.GetPrice
```pascal
function TItemData.GetPrice(item: TRSItem): Integer;
```
Method used to return the average price of the specified `item`.

Example:
```pascal
WriteLn ItemData.GetPrice('Abyssal whip');
```
*)
function TItemData.GetPrice(item: TRSItem): Integer;
var
  id: String;
  json: TJSONItem;
  lo, hi: Integer;
begin
  id := Self.GetTradeableID(item);
  if id = '' then Exit;

  case item of
    '995', '996', '997', '998', '999',
    '1000', '1001', '1002', '1003', '1004': Exit(1);
  end;

  Self.Reload();
  if Self.Disabled then Exit;
  if not Self.PricesJSON.Item[0].GetObject(id, json) then Exit;

  hi := json.Item[0].AsInt; //"high" key
  lo := json.Item[2].AsInt; //"lo" key

  if lo = hi then Exit(lo);
  if lo = 0 then Exit(hi);
  if hi = 0 then Exit(lo);

  Result := (hi + lo) div 2;
end;


(*
## ItemData.GetLowAlch()
```pascal
function TItemData.GetLowAlch(item: TRSItem): Integer;
```
Method used to get the the low alchemy value of an item.

Example:
```pascal
WriteLn ItemData.GetLowAlch('Magic longbow');
```
*)
function TItemData.GetLowAlch(item: TRSItem): Integer;
var
  ids: TStringArray;
  id: String;
  json: TJSONItem;
  value: Integer;
begin
  if item.IsNumeric then ids := [item]
  else ids := ItemFinder.Database.GetAll(item.ToLower(), 'item', 'id');

  for id in ids do
  begin
    json := Self.GetDefinition(id);
    value := json.Item[Ord(EItemDataKey.COST)].AsInt; //8 is "cost" key
    if value > 0 then
      Exit(Round(value * 0.4));
  end;
end;

(*
## ItemData.GetHighAlch()
```pascal
function TItemData.GetHighAlch(item: TRSItem): Integer;
```
Method used to get the the high alchemy value of an item.

Example:
```pascal
WriteLn ItemData.GetHighAlch('Magic longbow');
```
*)
function TItemData.GetHighAlch(item: TRSItem): Integer;
var
  ids: TStringArray;
  id: String;
  json: TJSONItem;
  value: Integer;
begin
  if item.IsNumeric then ids := [item]
  else ids := ItemFinder.Database.GetAll(item.ToLower(), 'item', 'id');

  for id in ids do
  begin
    json := Self.GetDefinition(id);
    value := json.Item[Ord(EItemDataKey.COST)].AsInt; //8 is "cost" key
    if value > 0 then
      Exit(Round(value * 0.6));
  end;
end;

function TItemData.IsStackable(item: TRSItem): Boolean;
var
  ids: TStringArray;
  id: String;
  json: TJSONItem;
  stackable: Boolean;
begin
  if item.IsNumeric then ids := [item]
  else ids := ItemFinder.Database.GetAll(item.ToLower(), 'item', 'id');
  for id in ids do
  begin
    json := Self.GetDefinition(id);
    stackable := json.Item[Ord(EItemDataKey.STACKABLE)].AsBool;
    if stackable then
      Exit(stackable);
  end;
end;

var
(*
## ItemData variable
Global {ref}`TItemData` variable.
*)
  ItemData: TItemData;

type
(*
## TGearData
Type responsible for retrieving gear data.
"Gear" refers to as any equippable item in the game.
*)
  TGearData = record
    Data: TJSONItem;
  end;

(*
## GearData.Setup
```pascal
procedure TGearData.Setup();
```
Internal method to setup TGearData.
*)
procedure TGearData.Setup();
begin
  if Self.Data <> nil then Exit;
  Self.Data := LoadJSON({$macro DIR} + 'gear.json');
  AddOnTerminate(@Self.Data.Free);
end;

(*
## GearData.GetArray
```pascal
function TGearData.GetArray(index: Integer): TJSONItem;
function TGearData.GetArray(key: String): TJSONItem; overload;
```
Method to fetch json arrays from gear.json.

```{note}
Using this requires knowledge of the structure of gear.json
```
*)
function TGearData.GetArray(index: Integer): TJSONItem;
begin
  Self.Setup();
  Result := Self.Data.Item[index];
end;

function TGearData.GetArray(key: String): TJSONItem; overload;
begin
  Self.Setup();
  if key = 'secondary_ammo' then key := 'ammo';
  Result := Self.Data.Item[key];
end;

(*
## GearData.GetItems
```pascal
function TGearData.GetItems(key: Integer): TRSItemArray;
function TGearData.GetItems(key: String): TRSItemArray; overload;
```
Method to fetch items under a key in gear.json.
*)
function TGearData.GetItems(key: Integer): TRSItemArray;
var
  i: Int32;
begin
  Self.Setup();
  for i := 0 to Self.Data.Item[key].Count-1 do
    Result += Self.Data.Item[key].Item[i].AsString;
end;

function TGearData.GetItems(key: String): TRSItemArray; overload;
var
  i: Int32;
begin
  Self.Setup();
  if key = 'secondary_ammo' then key := 'ammo';
  for i := 0 to Self.Data.Item[key].Count-1 do
    Result += Self.Data.Item[key].Item[i].AsString;
end;

var
(*
## GearData variable
Global {ref}`TGearData` variable.
*)
  GearData: TGearData;
