

{$DEFINE WL_MOUSEZOOM_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type

  TRSMouseZoom = record
    ZoomLevel: Integer;
    Enabled, SettingChecked: Boolean;
    const MAX_ZOOM: Integer = 768;
  end;


function TRSMouseZoom.GetNext(value: Integer; down: Boolean): Integer;
begin
  if down then Exit(Max(0, value-26));
  Result := Min(value+24, Self.MAX_ZOOM);
end;

function TRSMouseZoom.GetNext(value: Integer; amount: Integer = 1; down: Boolean = True): Integer; overload;
var
  i: Integer;
begin
  Result := value;
  for i := 1 to amount do
    Result := Self.GetNext(Result, down);
end;


function TRSMouseZoom.Level2Slider(value: Integer = -1): Integer;
begin
  if value < 0 then
  begin
    value := Options.GetZoomLevel();
    if value < 0 then Exit;
  end;

  Result := Floor(value/8);

  //The following levels do not exist on the slider, probably due to roundings.
  //The scale of 0-100 is made up by us so we are bound to rounding issues.
  if Result >= 13 then Result += 1;
  if Result >= 37 then Result += 1;
  if Result >= 63 then Result += 1;
  if Result >= 87 then Result += 1;
end;


function TRSMouseZoom.Slider2Level(value: Integer = -1): Integer;
begin
  if value < 0 then
  begin
    value := Options.GetZoomLevel();
    if value < 0 then Exit;
  end;

  //handling "dead" levels of the zoom slider.
  //Despite we using a 0..100 range, the slider only has 97 positions.
  case value of
    13.. 36: Dec(value);
    37.. 62: Dec(value, 2);
    63.. 86: Dec(value, 3);
    87..100: Dec(value, 4);
  end;

  Result := value * 8;
end;



procedure TRSMouseZoom.Scroll(amount: Integer = 1; down: Boolean; forceMove: Boolean = True);
{$IFNDEF WL_DISABLE_FAKE_INPUT}
var
  inputState: Boolean;
{$ENDIF}
begin
  Self.ZoomLevel := Self.GetNext(Self.ZoomLevel, amount, down);
  Options.ZoomLevel := Self.Level2Slider(Self.ZoomLevel);

  {$IFNDEF WL_DISABLE_FAKE_INPUT}
  inputState := RSClient.IsInputEnabled();
  if inputState then RSClient.DisableRealInput();
  {$ENDIF}

  Mouse.Scroll(MSInterface.Bounds, amount, down, forceMove);

  {$IFNDEF WL_DISABLE_FAKE_INPUT}
  if inputState then RSClient.EnableRealInput();
  {$ENDIF}
end;

procedure TRSMouseZoom.Scroll(amount: Integer = 1; forceMove: Boolean = True); overload;
{$IFNDEF WL_DISABLE_FAKE_INPUT}
var
  inputState: Boolean;
{$ENDIF}
begin
  {$IFNDEF WL_DISABLE_FAKE_INPUT}
  inputState := RSClient.IsInputEnabled();
  if inputState then RSClient.DisableRealInput();
  {$ENDIF}

  Self.Scroll(Floor(Sqrt(Power(amount,2))), amount < 0, forceMove);

  {$IFNDEF WL_DISABLE_FAKE_INPUT}
  if inputState then RSClient.EnableRealInput();
  {$ENDIF}
end;



procedure TRSMouseZoom.MaxZoom(down: Boolean = True);
var
  scrolls: Integer;
begin
  if down then scrolls := Floor(Self.ZoomLevel/26) + Random(3, 6)
  else scrolls := Floor((Self.MAX_ZOOM - Self.ZoomLevel)/24) + Random(3, 6);
  Self.Scroll(scrolls, down, True);
end;


procedure TRSMouseZoom.MaxZoomBlind(down: Boolean = True);
var
  scrolls: Integer;
begin
  if down then
    scrolls := Floor(Self.MAX_ZOOM/26) + Random(3, 6)
  else
    scrolls := Floor(Self.MAX_ZOOM/24) + Random(3, 6);

  Self.Scroll(scrolls, down, True);
end;


function TRSMouseZoom.GetZoomLevel(): Integer;
begin
  if (Self.ZoomLevel > -1) then
    Exit(Self.ZoomLevel);

  if (Options.ZoomLevel > -1) then
  begin
    Self.ZoomLevel := Self.Slider2Level(Options.ZoomLevel);
    Exit(Self.ZoomLevel);
  end;

  case Random(3) of
    0: Options.SetZoomLevel(Random(101));
    1: Self.MaxZoomBlind(RandomBoolean(0.5));
    2: Self.ZoomLevel := Self.Slider2Level(Options.GetZoomLevel());
  end;

  Result := Self.ZoomLevel;
end;



function TRSMouseZoom.SetZoomLevel(level: Integer): Boolean;
var
  rslevel, amount: Integer;
begin
  if not Self.Enabled then
    Exit(Options.SetZoomLevel(level));

  if Self.ZoomLevel = -1 then
  begin
    Self.GetZoomLevel();

    if Self.ZoomLevel = -1 then
      raise GetDebugLn('RSMouseZoom', 'Something went wrong while setting up the zoom level.');
  end;

  rslevel := Self.Slider2Level(level);

  if InRange(rslevel, Self.ZoomLevel-26, Self.ZoomLevel+24) then
    Self.MaxZoom(Biometrics.RandomBoolean());

  amount := rslevel - Self.ZoomLevel;

  if Self.ZoomLevel > rslevel then
    Self.Scroll(Floor(amount/26))
  else
    Self.Scroll(Floor(amount/24));

  Result := InRange(Options.ZoomLevel, level-4, level+4);
end;

var

  RSMouseZoom: TRSMouseZoom;
