(*
# DotFilters
Methods to handle DotFilters. Dot filters are filters that filter in or out ERSMinimapDots.
*)

{$DEFINE WL_DOTFILTERS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
(TRSDotFilter)=
## type TRSDotFilter
```pascal
TRSDotFilter = record
  Bounds: TPointArray;
  Circle: TCircle;
  Inside: Boolean;

  Timeout: Boolean;
  Timer: TCountDown;
end;
```
Type used to filter minimap dots.
*)
  TRSDotFilter = record
    Poly   : TPolygon;
    Circle : TCircle;
    Inside : Boolean;
    Timeout: Boolean;
    Timer  : TCountDown;
  end;


(*
## TRSDotFilter.Create
```pascal
function TRSDotFilter.Create(bounds: TPolygon; c: TCircle; inside: Boolean; time: Int32 = -1): TRSDotFilter; static;
```
Static method to create a TRSDotFilter.
*)
function TRSDotFilter.Create(bounds: TPolygon; c: TCircle; inside: Boolean; time: Int32 = -1): TRSDotFilter; static;
var
  timer: TCountDown;
begin
  timer.Start(time);
  Result := [bounds, c, inside, (time > 0), timer];
end;

(*
## TRSDotFilter.IsExpired
```pascal
function TRSDotFilter.IsExpired(): Boolean;
```
Checks if a TRSDotFilter is already expired by checking it's timer.
*)
function TRSDotFilter.IsExpired(): Boolean;
begin
  Result := (Self.Timeout and Self.Timer.IsFinished);
end;

(*
## TRSDotFilter.IsValid
```pascal
function TRSDotFilter.IsValid(p: TPoint): Boolean;
```
Checks if a point is valid accordint to the current TRSDotFilter;
*)
function TRSDotFilter.IsValid(p: TPoint): Boolean;
var
  inPoly, inCircle: Boolean;
begin
  if Self.Poly <> [] then inPoly := Self.Poly.Contains(p);
  if Self.Circle <> [] then inCircle := Self.Circle.Contains(p);

  if Self.Inside then
    Result := inPoly or inCircle
  else
    Result := not inPoly and not inCircle;
end;

type
(*
(TRSDotFilterArray)=
## type TRSDotFilterArray
Type used to manage and interact with arrays of TRSDotFilters.
*)
  TRSDotFilterArray = array of TRSDotFilter;

(*
## TRSDotFilterArray.Setup
```pascal
procedure TRSDotFilterArray.Setup(bounds: TPolygon; circle: TCircle; inside: Boolean; time: Int32 = -1);
procedure TRSDotFilterArray.SetupBounds(bounds: TPolygon; inside: Boolean; time: Int32 = -1);
procedure TRSDotFilterArray.SetupCircle(circle: TCircle; inside: Boolean; time: Int32 = -1);
```
Creates and adds a TRSDotFilter to the current TRSDotFilterArray.
*)
procedure TRSDotFilterArray.Setup(bounds: TPolygon; circle: TCircle; inside: Boolean; time: Int32 = -1);
begin
  Self += TRSDotFilter.Create(bounds, circle, inside, time);
end;

procedure TRSDotFilterArray.SetupBounds(bounds: TPolygon; inside: Boolean; time: Int32 = -1);
var
  c: TCircle;
begin
  Self.Setup(bounds, c, inside, time);
end;

procedure TRSDotFilterArray.SetupCircle(circle: TCircle; inside: Boolean; time: Int32 = -1);
var
  bounds: TPolygon := [];
begin
  Self.Setup(bounds, circle, inside, time);
end;


(*
## TRSDotFilterArray.ClearExpired
```pascal
procedure TRSDotFilterArray.ClearExpired();
```
Clears expired TRSDotFilter from the current TRSDotFilterArray.
You usually don't need to call this directly, but you can if you want.
Other methods already take care of this by default for you regardless.
*)
procedure TRSDotFilterArray.ClearExpired();
var
  i: Int32;
begin
  for i := High(Self) downto 0 do
    if Self[i].IsExpired() then
      Delete(Self, i, 1);
end;


(*
## TRSDotFilterArray.IsValid
```pascal
function TRSDotFilterArray.IsValid(dot: TPoint; clearExpired: Boolean = True): Boolean;
```
Checks if a dot/point is valid in any of the TRSDotFilters in the current array.
By default, expired TRSDotFilters are cleared from the array while this runs.
*)
function TRSDotFilterArray.IsValid(dot: TPoint; clearExpired: Boolean = True): Boolean;
var
  i: Int32;
begin
  for i := High(Self) downto 0 do
  begin
    if clearExpired and Self[i].IsExpired() then
    begin
      Delete(Self, i, 1);
      Continue;
    end;

    if Self[i].IsValid(dot) then
      Exit(True);
  end;
end;

(*
## TRSDotFilterArray.FilterDots
```pascal
function TRSDotFilterArray.FilterDots(dots: TPointArray): TPointArray;
```
Filter the dots/points passed into this according to our current TRSDotFilters.
*)
function TRSDotFilterArray.FilterDots(dots: TPointArray): TPointArray;
var
  dot: TPoint;
begin
  for dot in dots do
    if Self.IsValid(dot, True) then
      Result += dot;
end;

(*
## TRSMinimap.GetFilteredDot
```pascal
function TRSMinimap.GetFilteredDotArray(dot: ERSMinimapDot; dotFilters: TRSDotFilterArray): TPointArray;
function TRSMinimap.GetFilteredDot(dot: ERSMinimapDot; dotFilters: TRSDotFilterArray): TPoint;
```
Retrieves and filters minimap dots according to the specified TRSDotFilters.
*)
function TRSMinimap.GetFilteredDotArray(dots: ERSMinimapDots; dotFilters: TRSDotFilterArray): TPointArray;
var
  tpa, flat: TPointArray;
begin
  for tpa in Self.GetDots(dots) do
    flat += tpa;
  Result := dotFilters.FilterDots(flat);
end;

function TRSMinimap.GetFilteredDot(dots: ERSMinimapDots; dotFilters: TRSDotFilterArray): TPoint;
var
  tpa: TPointArray;
begin
  tpa := Self.GetFilteredDotArray(dots, dotFilters);
  if tpa <> [] then
    Result := tpa[0];
end;

