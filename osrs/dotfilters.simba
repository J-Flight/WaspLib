

{$DEFINE WL_DOTFILTERS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type

  TRSDotFilter = record
    Poly   : TPolygon;
    Circle : TCircle;
    Inside : Boolean;

    Timeout: Boolean;
    Timer  : TCountDown;
  end;



function TRSDotFilter.Create(bounds: TPolygon; c: TCircle; inside: Boolean; time: Int32 = -1): TRSDotFilter; static;
var
  timer: TCountDown;
begin
  timer.Start(time);
  Result := [bounds, c, inside, (time > 0), timer];
end;


function TRSDotFilter.IsExpired(): Boolean;
begin
  Result := (Self.Timeout and Self.Timer.IsFinished);
end;


function TRSDotFilter.IsValid(p: TPoint): Boolean;
var
  inPoly, inCircle: Boolean;
begin
  if Self.Poly <> [] then inPoly := Self.Poly.Contains(p);
  if Self.Circle <> [] then inCircle := Self.Circle.Contains(p);

  if Self.Inside then
    Result := inPoly or inCircle
  else
    Result := not inPoly and not inCircle;
end;

type

  TRSDotFilterArray = array of TRSDotFilter;


procedure TRSDotFilterArray.Setup(bounds: TPolygon; circle: TCircle; inside: Boolean; time: Int32 = -1);
begin
  Self += TRSDotFilter.Create(bounds, circle, inside, time);
end;

procedure TRSDotFilterArray.SetupBounds(bounds: TPolygon; inside: Boolean; time: Int32 = -1);
var
  c: TCircle;
begin
  Self.Setup(bounds, c, inside, time);
end;

procedure TRSDotFilterArray.SetupCircle(circle: TCircle; inside: Boolean; time: Int32 = -1);
var
  bounds: TPolygon := [];
begin
  Self.Setup(bounds, circle, inside, time);
end;



procedure TRSDotFilterArray.ClearExpired();
var
  i: Int32;
begin
  for i := High(Self) downto 0 do
    if Self[i].IsExpired() then
      Delete(Self, i, 1);
end;



function TRSDotFilterArray.IsValid(dot: TPoint; clearExpired: Boolean = True): Boolean;
var
  i: Int32;
begin
  for i := High(Self) downto 0 do
  begin
    if clearExpired and Self[i].IsExpired() then
    begin
      Delete(Self, i, 1);
      Continue;
    end;

    if Self[i].IsValid(dot) then
      Exit(True);
  end;
end;


function TRSDotFilterArray.FilterDots(dots: TPointArray): TPointArray;
var
  dot: TPoint;
begin
  for dot in dots do
    if Self.IsValid(dot, True) then
      Result += dot;
end;


function TRSMinimap.GetFilteredDotArray(dot: ERSMinimapDot; dotFilters: TRSDotFilterArray): TPointArray;
begin
  Result := dotFilters.FilterDots(Self.GetDots(dot));
end;

function TRSMinimap.GetFilteredDot(dot: ERSMinimapDot; dotFilters: TRSDotFilterArray): TPoint;
var
  dots: TPointArray;
begin
  dots := Self.GetFilteredDotArray(dot, dotFilters);
  if dots <> [] then
    Result := dots[0];
end;

