(*
## Overrides
Several final overrides to add some final behaviour to certain methods.
This is the very last file being included in the library.
*)

{$DEFINE SRLT_OVERRIDES_INCLUDED}
{$INCLUDE_ONCE SRLT/osrs.simba}

function TRSClient.IsLoggedIn(): Boolean; override;
var
  mode: ERSMode;
begin
  mode := Self.GetMode();
  Result := mode <> ERSMode.UNKNOWN;

  if (mode <> ERSMode.UNKNOWN) and (mode <> Self.Mode) then
  begin
    Self.Mode := mode;
    WriteLn(GetDebugLn('RSClient', 'Client mode changed: ' + ToStr(Self.Mode), EErrorLevel.SUCCESS));
    SetupInterfaces();
  end;

  if Result then
  begin
    if not MainScreen.HighestPitch then
      MainScreen.SetHighestPitch();

    if not Options.MaxBrightness then
    begin
      Options.SetMaxBrightness();
      //Since we might have options open, take the time to setup the zoom level.
      if (Options.ZoomLevel = -1) and Options.IsOpen() and (Options.GetTab() = ERSOptionsTab.DISPLAY) then
        Options.GetZoomLevel();
    end;

    if not Options.RoofsHidden then
      Options.HideRoofs();

    if XPBar.Tracker.Current = 0 then
      XPBar.Read();
  end;
end;

procedure TRSClient.LoseFocus(); override;
begin
  {$IFDEF SRLT_REMOTEINPUT_INCLUDED}
  RemoteInput.LoseFocus();
  Exit;
  {$ENDIF}
  inherited;
end;

function TRSGameTabs.GetCurrent(): ERSGameTab; override;
begin
  Result := inherited;
  if Result <> ERSGameTab.NONE then Exit;

  if Bank.IsOpen() then Exit(ERSGameTab.INVENTORY);

  if not HouseOptions.IsOpen() then Exit;
  Result := ERSGameTab.OPTIONS;
  if RSMouseZoom.SettingChecked then Exit;
  if Options.GetTab() <> ERSOptionsTab.DISPLAY then Exit;

  RSMouseZoom.Enabled := not Target.HasColor($0000C8, 0, 1, GameTab.Bounds);
  RSMouseZoom.SettingChecked := True;

  if not RSMouseZoom.Enabled then
  begin
    RSMouseZoom.ZoomLevel := -1;
    Options.ZoomLevel := -1;
  end;
end;


(*
### HouseOptions.Open override
```pascal
function TRSHouseOptions.Open(): Boolean; override;
```
Attempts to open the house options on the options gametab.

Since {ref}`HouseOptions` depends on {ref}`Options`, an override is necessary.

Example:
```pascal
WriteLn HouseOptions.Open();
```
*)
function TRSHouseOptions.Open(): Boolean; override;
begin
  if Self.IsOpen() then Exit(True);
  if not Options.Open() or not Options.OpenTab(ERSOptionsTab.CONTROLS) then Exit;

  Options.Buttons[ERSOptionsButton.HOUSE].Click();
  Result := Self.WaitOpen();
end;

(*
### WorldSwitcher.Open override
```pascal
function TRSWorldSwitcher.Open(waitLoad: Boolean = True): Boolean; override;
```
Attempts to open the world switcher.

Since {ref}`WorldSwitcher` depends on {ref}`Logout`, this override is necessary.

Example:
```pascal
WriteLn WorldSwitcher.Open();
```
*)
function TRSWorldSwitcher.Open(waitLoad: Boolean = True): Boolean; override;
begin
  if not Logout.Open() then Exit;
  if WorldSwitcher._IsOpen() then Exit(True);
  Logout.Buttons[ERSLogoutButton.WORLD_SWITCHER].Click();
  Result := inherited;
end;
