

{$DEFINE WL_OVERRIDES_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}


function TRSClient.IsLoggedIn(): Boolean; override;
var
  mode: ERSMode;
begin
  mode := Self.GetMode();
  Result := mode <> ERSMode.UNKNOWN;

  if (mode <> ERSMode.UNKNOWN) and (mode <> Self.Mode) then
  begin
    Self.Mode := mode;
    WriteLn(GetDebugLn('RSClient', 'Client mode changed: ' + ToStr(Self.Mode), ELogLevel.SUCCESS));
    SetupInterfaces();
  end;

  {$IFNDEF WL_TEST}
  if Result then
  begin
    if not MainScreen.HighestPitch then
      MainScreen.SetHighestPitch();

    if not Options.MaxBrightness then
    begin
      Options.SetMaxBrightness();
      //Since we might have options open, take the time to setup the zoom level.
      if (Options.ZoomLevel = -1) and Options.IsOpen() and (Options.GetTab() = ERSOptionsTab.DISPLAY) then
        Options.GetZoomLevel();
    end;

    if not Options.RoofsHidden then
      Options.HideRoofs();

    if XPBar.Tracker.Current = 0 then
      XPBar.Read();
  end;
  {$ENDIF}
end;

procedure TRSClient.LoseFocus(); override;
begin
  {$IFDEF WaspLib_REMOTEINPUT_INCLUDED}
  RemoteInput.LoseFocus();
  Exit;
  {$ENDIF}
  inherited;
end;


function TRSGameTabs.GetCurrent(): ERSGameTab; override;
begin
  Result := inherited;
  if Result <> ERSGameTab.NONE then Exit;

  if Bank.IsOpen() then Exit(ERSGameTab.INVENTORY);

  if not HouseOptions.IsOpen() then Exit;
  Result := ERSGameTab.OPTIONS;
  if RSMouseZoom.SettingChecked then Exit;
  if Options.GetTab() <> ERSOptionsTab.DISPLAY then Exit;

  RSMouseZoom.Enabled := not Target.HasColor($0000C8, 0, 1, GameTab.Bounds);
  RSMouseZoom.SettingChecked := True;

  if not RSMouseZoom.Enabled then
  begin
    RSMouseZoom.ZoomLevel := -1;
    Options.ZoomLevel := -1;
  end;
end;


function TRSGameTabs.Open(tab: ERSGameTab; fkeyProbability: Single = -1): Boolean; override;
begin
  if Self.IsOpen(tab) then Exit(True);

  //TODO: add deposit box and Store
  if MSInterface.IsOpen() and (Bank.IsOpen()) then
    MSInterface.Close();

  Result := inherited(tab, fkeyProbability);
end;


function TRSHouseOptions.Open(): Boolean; override;
begin
  if Self.IsOpen() then Exit(True);
  if not Options.Open() or not Options.OpenTab(ERSOptionsTab.CONTROLS) then Exit;

  Options.Buttons[ERSOptionsButton.HOUSE].Click();
  Result := Self.WaitOpen();
end;


function TRSWorldSwitcher.Open(waitLoad: Boolean = True): Boolean; override;
begin
  if not Logout.Open() then Exit;
  if WorldSwitcher._IsOpen() then Exit(True);
  Logout.Buttons[ERSLogoutButton.WORLD_SWITCHER].Click();
  Result := inherited;
end;


function TRSMainScreen.IsVisible(pt: TPoint): Boolean; override;
begin
  Result := Self.Bounds.Contains(pt) and Self.Mask[pt.Y, pt.X];

  if Result and (RSClient.Mode = ERSMode.FIXED) then Exit;

  if Chat.IsOpen() and Chat.Bounds.Contains(pt) then Exit(False);
  if not GameTabs.IsOpen(ERSGameTab.NONE) and GameTab.Bounds.Contains(pt) then Exit(False);
  if Bank.IsOpen() and Bank.Bounds.Contains(pt) then Exit(False);
end;

function TRSMainScreen.Filter(tpa: TPointArray): TPointArray; override;
var
  pt: TPoint;
begin
  for pt in tpa do
    if Self.Bounds.Contains(pt) and Self.Mask[pt.Y, pt.X] then
      Result += pt;

  if Chat.IsOpen() then
    Result := Result.ExcludeBox(Chat.Bounds);

  if not GameTabs.IsOpen(ERSGameTab.NONE) then
    Result := Result.ExcludeBox(GameTab.Bounds);

  if Bank.IsOpen() then
    Result := Result.ExcludeBox(Bank.Bounds);
end;

procedure TAntiban.WalkingTasks(); override;
begin
  case Random(0, 500) of //only about 1% chance of antiban while walking
    0:
    begin
      if (Random(20) <= 17) then Self.RandomChatTab();
    end;

    1..5:
    begin
      if (Random(10) <= 3) then Self.SmallCameraRotation();
    end;

    6..10:
    begin
      if (Random(10) <= 3) then Self.RandomRightClick()
      else Self.SmallRandomMouse();
    end;

    10, 14:
    begin
      if (Random(10) <= 9) then Self.RandomTab();
    end;
  end;
end;


function TRSChat.LeveledUp(): Boolean; override;
var
  b: TBox;
  i: Int32;
  str: String;
begin
  Result := Self.HasOption('Congratulations', True, Self.GetColors([ERSChatColor.NAVY]));
  if not Result then Exit;

  b := Self.Bounds;
  b.Y1 += 60;
  b.Y2 -= 75;

  str := OCR.Recognize(b, RSFonts.QUILL_8, [0], 0);
  str := Trim(str.Between('Your ', ' level').ToLower());

  for i := 0 to Ord(High(ERSSkill)) do
    if str in ToStr(ERSSkill(i)).After('ERSSkill.').ToLower() then
      Break;

  if ERSSkill(i) < High(ERSSkill) then //total never has level ups...
    Stats.IncrementCachedLevel(ERSSkill(i));

  SaveScreenshotEx('levelups', Self.Bounds);
end;
