(*
# Biometrics
Biometrics related methods that are unique to the current player being used.

For your convenience you can use {ref}`TBiometrics` methods through the {ref}`Biometrics variable`.
*)

{$DEFINE WL_BIOMETRICS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## EBiometric
```pascal
EBiometric = enum(
  MULTIPLIER,
  SLEEP_H, SLEEP_M, SLEEP_S, SLEEP_LENGTH, BREAKS,
  MIN_CLICKTIME, MAX_CLICKTIME, MOUSE_SPEED, MOUSE_GRAVITY, MOUSE_WIND,
  FKEYS, ESCAPE, CHAT_KEYBOARD,
  CHOOSEOPTION,
  SPAM_CLICK,
  PATTERN,
  BANK_CONSUME,
  RATING, LIKES, DISLIKES
);
```
Enum that represent biometrics affected by the user user unique player seed.
*)
  EBiometric = enum(
    MULTIPLIER,
    SLEEP_H, SLEEP_M, SLEEP_S, SLEEP_LENGTH, BREAKS,
    MIN_CLICKTIME, MAX_CLICKTIME, MOUSE_SPEED, MOUSE_GRAVITY, MOUSE_WIND,
    FKEYS, ESCAPE, CHAT_KEYBOARD,
    CHOOSEOPTION,
    SPAM_CLICK,
    PATTERN,
    BANK_CONSUME,
    RATING, LIKES, DISLIKES
  );

(*
## TBiometrics
Record responsible for biometrics and beiometric behaviour.
*)
  TBiometrics = record
    Index: Integer;
    Hash: TByteArray;
  end;

(*
## TBiometrics.GetHash
```pascal
function TBiometrics.GetHash(): TByteArray;
```
Get the current unique hash `TBiometrics.Hash` being used.
If none is set yet one will be set.
If the currently used player changed, we also reset the hash.

If there's no Profiles availble we will use a random hash.

Example:
```pascal
WriteLn Biometrics.GetHash();
```
*)
function TBiometrics.GetHash(): TByteArray;
var
  i: Integer;
  hash: String;
begin
  if Self.Index <> ProfileIndex then Self.Hash := [];
  if Self.Hash <> [] then Exit(Self.Hash);

  if not InRange(ProfileIndex, 0, High(Profiles))   then
  begin
    for i := 0 to Ord(High(EBiometric)) do
      Self.Hash += Random(256);

    hash := String.CreateFromBytes(Self.Hash);
    WriteLn GetDebugLn('Biometrics', 'Random hash created: ' + hash, ELogLevel.WARN);
    WriteLn GetDebugLn('Biometrics', 'Add an account for a permanent one.', ELogLevel.WARN);

    Exit(Self.Hash);
  end;

  hash := HashString(EHashAlgo.SHA1, Profiles[ProfileIndex].Name + Profiles[ProfileIndex].Username);
  WriteLn GetDebugLn('Biometrics', 'Current profile seed: ' + hash, ELogLevel.SUCCESS);

  Self.Hash := hash.ToBytes();
  Result := Self.Hash;
end;

(*
## Biometrics.GetBiometric
```pascal
function TBiometrics.GetBiometric(biometric: EBiometric): Integer;
```
Get the value that corresponds to the specified `biometric`.
The value is between 0 and 255.

Example:
```pascal
WriteLn Biometrics.GetBiometric(EBiometric.FKEYS);
```
*)
function TBiometrics.GetBiometric(biometric: EBiometric): Integer;
begin
  Result := Self.GetHash[biometric];
end;

(*
## Biometrics.GetProbability
```pascal
function TBiometrics.GetProbability(biometric: EBiometric): Single;
```
Get a probability from the current hash that is represented by `biometric`.
The probability is between 0.0 and 1.0.

Example:
```pascal
WriteLn Biometrics.GetProbability(EBiometric.FKEYS);
```
*)
function TBiometrics.GetProbability(biometric: EBiometric): Single;
begin
  Result := Self.GetBiometric(biometric) / 255;
end;


(*
## Biometrics.Random
```pascal
function TBiometrics.RandomDouble(input: Double): Double;
function TBiometrics.RandomInteger(input: Integer): Integer;
```
These generate a unique random number based on your `input` and your current Hash.

Example:
```pascal
FoodAmount := Biometrics.Random(7);
```
*)
function TBiometrics.RandomDouble(input: Double): Double;
const
  DEV: Double := input * Self.GetProbability(EBiometric.MULTIPLIER);
begin
  Result := GaussRand(input, DEV);
end;

function TBiometrics.RandomInteger(input: Integer): Integer;
begin
  Result := Round(Self.RandomDouble(input));
end;

(*
## Biometrics.RandomMode
```pascal
function TBiometrics.RandomModeDouble(input, minimum, maximum: Double): Double;
function TBiometrics.RandomModeInteger(input, minimum, maximum: Integer): Integer; overload;
```
Generate a unique random number based on your `input` and your current Hash
with a `minimum` minimum and `maximum` maximum value.

Example:
```pascal
FoodAmount := Biometrics.RandomMode(7, 3, 15);
```
*)
function TBiometrics.RandomModeDouble(input, minimum, maximum: Double): Double;
const
  DEV: Double := input * Self.GetProbability(EBiometric.MULTIPLIER);
begin
  Result := Min(Max(minimum, GaussRand(RandomMode(input, minimum, maximum), DEV)), maximum);
end;

function TBiometrics.RandomModeInteger(input, minimum, maximum: Integer): Integer;
begin
  Result := Round(Self.RandomModeDouble(input, minimum, maximum));
end;


(*
## Biometrics.RandomBoolean
```pascal
function TBiometrics.RandomBoolean(): Boolean;
function TBiometrics.RandomBoolean(behaviour: EBiometric): Boolean; overload;
function TBiometrics.RandomBoolean(probability: Double): Boolean; overload;
```
Returns a random boolean that is influenced by the current `TBiometrics.Hash`.

Example:
```pascal
UseBankEarly := Biometrics.RandomBoolean();
WriteLn UseBankEarly;
```
*)
function TBiometrics.RandomBoolean(): Boolean;
begin
  Result := RandomBoolean(Self.RandomDouble(0.5));
end;

function TBiometrics.RandomBoolean(behaviour: EBiometric): Boolean; overload;
begin
  Result := RandomBoolean(Self.GetProbability(behaviour));
end;

function TBiometrics.RandomBoolean(probability: Double): Boolean; overload;
begin
  Result := RandomBoolean(Self.RandomDouble(probability));
end;


(*
## Biometrics.GetSleepHour
```pascal
function TBiometrics.GetSleepHour(): String;
```
Gives you a unique sleep hour for the current player being used that can be
anywhere from 23:00:00 to 04:00:00.

Example:
```pascal
WriteLn Biometrics.SetSleepHour();
```
*)
function TBiometrics.GetSleepHour(): String;
var
  sleep: Double;
begin
  sleep := 23;
  sleep += 4     * Self.GetProbability(EBiometric.SLEEP_H) * ONE_HOUR;
  sleep += 59.99 * Self.GetProbability(EBiometric.SLEEP_M) * ONE_MINUTE;
  sleep += 59.99 * Self.GetProbability(EBiometric.SLEEP_S) * ONE_SECOND;

  if sleep > ONE_DAY then sleep -= ONE_DAY;
  Result := FormatMilliseconds(Round(sleep), 'h:m:s');
end;

(*
## Biometrics.GetSleepLength
```pascal
function TBiometrics.GetSleepLength(): Single;
```
Gives you a unique sleep length for the current player being used that can be
anywhere from 6 to 10 hours.

Example:
```pascal
WriteLn Biometrics.GetSleepLength();
```
*)
function TBiometrics.GetSleepLength(): Single;
begin
  Result := 6 + 4 * Self.GetProbability(EBiometric.SLEEP_LENGTH);
end;


(*
## Biometrics.Sleep
```pascal
procedure TBiometrics.Sleep(time: UInt32);
procedure TBiometrics.Sleep(minimum, maximum: UInt32; weight: ERandomDir = ERandomDir.MEAN); overload;
```
Halts the script for `time` milliseconds influenced by your current player.

Example:
```pascal
Biometrics.Sleep(3000);
```
*)
procedure TBiometrics.Sleep(time: UInt32);
begin
  Sleep(Max(0, Self.RandomInteger(time)));
end;

procedure TBiometrics.Sleep(minimum, maximum: UInt32; weight: ERandomDir = ERandomDir.MEAN); overload;
var
  a, b: UInt32;
begin
  a := Max(0, Self.RandomModeInteger(minimum, minimum, maximum));
  b := Max(0, Self.RandomModeInteger(maximum, minimum, maximum));
  Sleep(a, b, weight);
end;


(*
## Biometrics.Click
```pascal
procedure TBiometrics.Click(button: EMouseButton; clicks: UInt32 = 3);
```
Clicks with `button` and has a chance to spam click up to `clicks` times which
by default is `3`.
While spam clicking there's a chance to wiggle the mouse a little bit.

Example:
```pascal
Biometrics.Click(EMouseButton.LEFT);
```
*)
procedure TBiometrics.Click(button: EMouseButton; clicks: UInt32 = 3; probability: Single = 0.08);
var
  i: Integer;
begin
  Mouse.Click(button);
  if not Self.RandomBoolean(probability) then Exit;

  for i := 1 to Self.RandomModeInteger(clicks div 2, 1, clicks) do
  begin
    Mouse.Click(Target.MouseXY.Random(5), button);
    Sleep(0, 100, ERandomDir.LEFT);
  end;
end;

var
(*
## Biometrics variable
Global {ref}`TBiometrics` variable.
*)
  Biometrics: TBiometrics;
