
{$DEFINE WL_MAPJSON_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
  TMapObjectJSON = record
    Data: TJSONItem;
  end;


function TMapObjectJSON.GetFile(chunk: TPoint; plane: Integer): TJSONParser;
var
  filename, cachename: String;
begin
  if Map.Loader._UnzipQueue > 0 then
    if not SleepUntil(Map.Loader._UnzipQueue <= 0, 100, 30000) then
      raise GetDebugLn('MapJSON', 'Unzipping files timed out.');

  filename := PATH_SEP + ToStr(chunk.X) + '-' + ToStr(chunk.Y) + '.json';
  cachename := Map.Loader.CacheDir + 'objects' + PATH_SEP + ToStr(plane) + filename;

  if FileExists(cachename) then
  begin
    Result := new TJSONParser();
    Result.Load(cachename);
  end;
end;


function TMapObjectJSON.GetJSON(chunks: TPointArray; plane: Integer): TJSONItem;
var
  i, j, n, l: Integer;
  json: TJSONItem;
  id: Integer;
begin
  Result := new TJSONArray;

  for i := 0 to High(chunks) do
  begin
    json := Self.GetFile(chunks[i], plane);

    if json = nil then Continue;

    for j := 0 to json.Count-1 do
    begin
      id := json.Item[j].Item[0].AsInt;
      for n := 0 to Result.Count-1 do
        if Result.Item[n].Item[0].AsInt = id then
        begin
          for l := 0 to json.Item[j].Item[5].Count-1 do
            Result.Item[n].Item[5].AddArray('', json.Item[j].Item[5].Item[l].Clone());
          Continue(2);
        end;
      Result.Add('', json.Item[j].Clone());
    end;
  end;
end;


procedure TMapObjectJSON.Load(regions: array of TRSMapRegion = []);
var
  region: TRSMapRegion;
  json: TJSONItem;
  i, j, n, id: Integer;
begin
  if regions = [] then regions := Map.Loader.Regions;

  for region in regions do
  begin
    json := Self.GetJSON(region.Chunks, region.Plane);

    for i := 0 to json.Count-1 do
    begin
      id := json.Item[i].Item[0].AsInt;
      for j := 0 to Self.Data.Count-1 do
        if Self.Data.Item[j].Item[0].AsInt = id then
        begin
          for n := 0 to json.Item[i].Item[5].Count-1 do
            Self.Data.Item[j].Item[5].AddArray('', json.Item[i].Item[5].Item[n].Clone());
          Continue(2);
        end;
      Self.Data.Add('', json.Item[i].Clone());
    end;
  end;
end;



function TMapObjectJSON.GetByName(name: String; amount: Integer = 0): TJSONItem;
var
  i, found: Integer;
begin
  if Self.Data.Count = 0 then Self.Load();

  Result := new TJSONArray();
  for i := 0 to  Self.Data.Count-1 do
    if Self.Data.Item[i].Item[1].AsString = name then
    begin
      Result.AddObject('', Self.Data.Item[i].Clone());
      if Inc(found) = amount then Exit;
    end;

  if found = 0 then
    raise GetDebugLn('Object with name ' + name + ' doesn''t exist on the loaded maps.');
end;


function TMapObjectJSON.GetByID(id: Integer): TJSONItem;
var
  i: Integer;
begin
  if Self.Data.Count = 0 then Self.Load();

  for i := 0 to  Self.Data.Count-1 do
    if Self.Data.Item[i].Item[0].AsInt = id then
      Exit(Self.Data.Item[i].Clone());
  raise GetDebugLn('Object with ID ' + ToStr(id) + ' doesn''t exist on the loaded maps.');
end;


function TMapObjectJSON.GetByAction(action: String; amount: Integer = 0): TJSONItem;
var
  i, j, found: Integer;
begin
  if Self.Data.Count = 0 then Self.Load();

  Result := new TJSONArray();
  for i := 0 to  Self.Data.Count-1 do
    for j := 0 to Self.Data.Item[i].Item[4].Count-1 do
      if Self.Data.Item[i].Item[4].Item[j].AsString = action then
      begin
        Result.AddObject('', Self.Data.Item[i].Clone());
        if Inc(found) = amount then Exit;
        Continue(2);
      end;

  if found = 0 then
    raise GetDebugLn('Object with action ' + action + ' doesn''t exist on the loaded maps.');
end;


procedure TMapObjectJSON.Print();
begin
  if Self.Data.Count = 0 then Self.Load();
  WriteLn Self.Data.Format([EJSONFormatOption.NO_QUOTE_MEMBERS, EJSONFormatOption.SINGLE_LINE_ARR]);
end;


var
  ObjectsJSON: TMapObjectJSON;

type
  TMapNPCJSON = record
    Data: TJSONItem;
  end;


function TMapNPCJSON.GetFile(chunk: TPoint; plane: Integer): TJSONParser;
var
  filename, cachename: String;
begin
  if Map.Loader._UnzipQueue > 0 then
    if not SleepUntil(Map.Loader._UnzipQueue <= 0, 100, 30000) then
      raise GetDebugLn('MapJSON', 'Unzipping files timed out.');

  filename := PATH_SEP + ToStr(chunk.X) + '-' + ToStr(chunk.Y) + '.json';
  cachename := Map.Loader.CacheDir + 'npcs' + PATH_SEP + ToStr(plane) + filename;

  if not FileExists(cachename) then
    Exit(nil);

  Result := new TJSONParser();
  Result.Load(cachename);
end;


function TMapNPCJSON.GetJSON(chunks: TPointArray; plane: Integer): TJSONItem;
var
  i, j, n, l: Integer;
  json: TJSONItem;
  id: Integer;
begin
  Result := new TJSONArray();

  for i := 0 to High(chunks) do
  begin
    json := Self.GetFile(chunks[i], plane);
    if json = nil then Continue;

    for j := 0 to json.Count-1 do
    begin
      id := json.Item[j].Item[0].AsInt;
      for n := 0 to Result.Count-1 do
        if Result.Item[n].Item[0].AsInt = id then
        begin
          for l := 0 to json.Item[j].Item[7].Count-1 do
            Result.Item[n].Item[7].AddArray('', json.Item[j].Item[7].Item[l].Clone());
          Continue(2);
        end;
      Result.Add('', json.Item[j].Clone());
    end;
  end;
end;


procedure TMapNPCJSON.Load(regions: array of TRSMapRegion = []);
var
  region: TRSMapRegion;
  json: TJSONItem;
  i, j, n, id: Integer;
begin
  if regions = [] then regions := Map.Loader.Regions;

  for region in regions do
  begin
    json := Self.GetJSON(region.Chunks, region.Plane);

    for i := 0 to json.Count-1 do
    begin
      id := json.Item[i].Item[0].AsInt;
      for j := 0 to Self.Data.Count-1 do
        if Self.Data.Item[j].Item[0].AsInt = id then
        begin
          for n := 0 to json.Item[i].Item[7].Count-1 do
            Self.Data.Item[j].Item[7].AddArray('', json.Item[i].Item[7].Item[n].Clone());
          Continue(2);
        end;
      Self.Data.Add('', json.Item[i].Clone());
    end;
  end;
end;



function TMapNPCJSON.Get(name: String; amount: Integer = 0): TJSONItem;
var
  i, found: Integer;
begin
  if Self.Data.Count = 0 then Self.Load();

  Result := new TJSONArray();
  for i := 0 to  Self.Data.Count-1 do
    if Self.Data.Item[i].Item[1].AsString = name then
    begin
      Result.AddObject('', Self.Data.Item[i].Clone());
      if Inc(found) = amount then Exit;
    end;

  if found = 0 then
    raise GetDebugLn('Object with name ' + name + ' doesn''t exist on the loaded maps.');
end;


function TMapNPCJSON.GetByID(id: Integer): TJSONItem;
var
  i: Integer;
begin
  if Self.Data.Count = 0 then Self.Load();

  for i := 0 to  Self.Data.Count-1 do
    if Self.Data.Item[i].Item[0].AsInt = id then
      Exit(Self.Data.Item[i].Clone());
  raise GetDebugLn('Object with ID ' + ToStr(id) + ' doesn''t exist on the loaded maps.');
end;


function TMapNPCJSON.GetByAction(action: String; amount: Integer = 0): TJSONItem;
var
  i, j, found: Integer;
begin
  if Self.Data.Count = 0 then Self.Load();

  Result := new TJSONArray();
  for i := 0 to  Self.Data.Count-1 do
    for j := 0 to Self.Data.Item[i].Item[5].Count-1 do
      if Self.Data.Item[i].Item[5].Item[j].AsString = action then
      begin
        Result.AddObject('', Self.Data.Item[i].Clone());
        if Inc(found) = amount then Exit;
        Continue(2);
      end;

  if found = 0 then
    raise GetDebugLn('Object with action ' + action + ' doesn''t exist on the loaded maps.');
end;


procedure TMapNPCJSON.Print();
begin
  if Self.Data.Count = 0 then Self.Load();

  WriteLn Self.Data.Format([EJSONFormatOption.NO_QUOTE_MEMBERS, EJSONFormatOption.SINGLE_LINE_ARR]);
end;

var
  NPCsJSON: TMapNPCJSON;
