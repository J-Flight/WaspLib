

{$DEFINE WL_RSOBJECTS_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
  TRSObject = record
    UpText: TStringArray;
    Size: TVector3;
    Coordinates: TPointArray;
    Rotations: TIntegerArray;
    Finder: TColorFinder;
    Track: Boolean;
    Walker: PRSWalker;
  end;

  TRSObjectArray = array of TRSObject;

procedure TRSObject.Setup(size: TVector3; coordinates: TPointArray);
begin
  Self.Coordinates := coordinates;
  SetLength(Self.Rotations, Length(coordinates));
  Self.Size := size;
end;

procedure TRSObject.Setup(json: TJSONItem); overload;
var
  i: Integer;
  colors: TColorArray;
  best: TBestColor;
begin
  if json.Typ <> EJSONType.OBJ then
    raise GetDebugLn('TRSObject', 'JSON Object expected, got ' + ToStr(json.Typ) + '.');

  Self.UpText := [json.Item[1].AsString];

  //5 is coordinates key in trsmap jsons
  for i := 0 to json.Item[5].Count-1 do
    Self.Coordinates += [json.Item[5].Item[i].Item[0].AsInt, json.Item[5].Item[i].Item[1].AsInt];

  //6 is size key in trsmap jsons
  Self.Size.X := json.Item[6].Item[0].AsInt * 0.8;
  Self.Size.Y := json.Item[6].Item[1].AsInt * 0.8;
  Self.Size.Z := json.Item[6].Item[2].AsInt / 40;

  //7 is rotations key in trsmap jsons
  for i := 0 to json.Item[7].Count-1 do
    Self.Rotations += json.Item[7].Item[i].AsInt;

  while Length(Self.Rotations) < Length(Self.Coordinates) do
    Self.Rotations += Self.Rotations[High(Self.Rotations)];

  //8 is colors key in trsmap jsons
  for i := 0 to json.Item[8].Count-1 do
    colors += json.Item[8].Item[i].AsInt;

  best := GetBestColor(EColorSpace.HSV, colors);
  Self.Finder.Colors += [best.Color, best.Tolerance, EColorSpace.HSV, best.Mods];
  Self.Walker := @Map.Walker;
end;

procedure TRSObjectArray.Setup(json: TJSONItem); overload;
var
  i: Integer;
begin
  if json.Typ <> EJSONType.ARR then
    raise GetDebugLn('TRSObject', 'JSON Array expected, got ' + ToStr(json.Typ) + '.');

  SetLength(Self, json.Count);
  for i := 0 to High(Self) do
    Self[i].Setup(json.Item[i]);
end;


function TRSObject.GetCuboidArray(me: TPoint; angle: Single = $FFFF): TCuboidArray;
var
  weights: TDoubleArray;
  pt: TPoint;
  h, diff: Single;
  i: Integer;
  dist: Double;
begin
  if angle = $FFFF then angle := Minimap.GetCompassAngle(False);

  h := Self.Walker^.Height(me);

  for i := 0 to High(Self.Coordinates) do
  begin
    pt := Self.Coordinates[i];
    dist := me.DistanceTo(pt);
    if dist <= 85 then
    begin
      weights += dist;
      diff := -(h-Self.Walker^.Height(pt));
      with Self.Walker^.Point2MMVec(me, pt, angle) do
        Result += Minimap.Vector2MSCuboid([X + 0.15*diff, Y + 0.11*diff, 0], Self.Size, angle - DegToRad(Self.Rotations[i]),  [0,0,diff]);
    end;
  end;

  if Result <> [] then
    Result.Sort(weights, True);
end;


function TRSObject.FindOnMainScreen(cuboidArray: TCuboidArray): T2DPointArray;
var
  i: Integer;
  tpa: TPointArray;
begin
  if Self.Finder <> Default(TColorFinder) then
  begin
    Self.Finder.Find(Result, cuboidArray);
    Exit;
  end;

  for i := 0 to High(cuboidArray) do
  begin
    tpa := cuboidArray[i].ShapeFill();
    if tpa <> [] then
      Result += tpa;
  end;
end;


function TRSObject.FindEx(me: TPoint; out cuboids: TCuboidArray; out atpa: T2DPointArray): Boolean;
begin
  cuboids := Self.GetCuboidArray(me);
  if cuboids = [] then Exit;
  atpa := Self.FindOnMainScreen(cuboids);

  Result := atpa <> [];
end;


function TRSObject.Find(out atpa: T2DPointArray): Boolean;
var
  cuboids: TCuboidArray;
begin
  Result := Self.FindEx(Self.Walker^.Position(), cuboids, atpa);
end;

function TRSObject.FindFrom(position: TPoint; out atpa: T2DPointArray): Boolean;
var
  cuboids: TCuboidArray;
begin
  Result := Self.FindEx(position, cuboids, atpa);
end;


function TRSObject._UpTextCheck(out shouldExit: Boolean): Boolean;
var
  text: String;
begin
  shouldExit := True;

  if (RSClient.Mode = ERSMode.FIXED) and MSInterface.IsOpen() then
    Exit;

  if Self.UpText <> [] then
    Self.Walker^.TargetUpText := Copy(Self.UpText);

  text := MainScreen.UpText;

  if text.Contains('>') and not Self.Walker^.ActionUpText.Contains(['>']) then
  begin
    ChooseOption.Close();
    Exit;
  end;

  if (Self.UpText <> []) and text.ContainsAny(Self.UpText) then
    Exit(True);

  shouldExit := False;
end;


function TRSObject._HoverHelper(attempts: Integer): Boolean;
var
  shouldExit: Boolean;
  attempt: Integer;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  Result := Self._UpTextCheck(shouldExit);
  if shouldExit then Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0] // 0 for the closest one.
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa.Random();

      Mouse.Move(tpa.RandomMean());

      if Self.UpText = [] then Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then Exit(True);

    if attempt <> (attempts - 1) then Continue;

    angle := Minimap.GetCompassAngle();
    Minimap.SetCompassAngle(angle-50, angle+50);
  end;
end;


function TRSObject._WalkHoverHelper(attempts: Integer): Boolean;
var
  shouldExit: Boolean;
  attempt: Integer;
  atpa: T2DPointArray;
  tpa, path: TPointArray;
  me, closest: TPoint;
begin
  Result := Self._UpTextCheck(shouldExit) or Self.Walker^.RedClicked;
  if shouldExit then Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0]
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa.Random();

      Mouse.Move(tpa.RandomMean());

      if Self.UpText = [] then Exit(True);
    end;

    if MainScreen.IsUpText(Self.UpText) then Exit(True);

    me := Self.Walker^.Position();
    closest := Self.Walker^.GetClosestPointEx(me, Self.Coordinates, path);

    if path = [] then
    begin
      path := Self.Walker^.WebGraph^.FindObjectPath(me, closest);
      if path = [] then
        raise GetDebugLn('TRSObject', 'Can''t path to object.');
    end;

    if me.DistanceTo(closest) > 50 then
    begin
      Self.Walker^.WebWalkEx(me, closest, 30, 0.15);
      Continue;
    end;

    if attempt <> (attempts - 1) then Continue;

    if me.DistanceTo(closest) > 25 then
    begin
      Self.Walker^.WebWalkEx(me, closest, 25, 0.15);
      Continue;
    end;

    Minimap.SetCompassAngle(Minimap.GetCompassAngle(), 50);
  end;
end;


function TRSObject._PreHoverHelper(me: TPoint; attempts: Integer = 2): Boolean;
var
  attempt: Integer;
  atpa: T2DPointArray;
begin
  for attempt := 0 to attempts do
  begin
    if not Self.FindFrom(me, atpa) then Continue;
    ASync.MouseMove(atpa.Random().Random());
    Exit(True);
  end;
end;



function TRSObject._ClickHelper(leftClick: Boolean): Boolean;
begin
  Self.Walker^.TargetUpText := [];
  Self.Walker^.ActionUpText := [];

  if Self.Walker^.RedClicked then
  begin
    Self.Walker^.RedClicked := False;
    Exit(True);
  end;

  if ChooseOption.IsOpen() then
  begin
    if (Self.UpText <> []) and ChooseOption.Select(Self.UpText) then
      Exit(True);
    ChooseOption.Close();
    Exit;
  end;

  if leftClick and Biometrics.RedClick(EMouseButton.LEFT, 2) then
    Exit(True);

  Result := not leftClick and (Self.UpText <> []) and ChooseOption.Select(Self.UpText);
end;


function TRSObject._SelectHelper(action: TStringArray): Boolean;
begin
  Self.Walker^.TargetUpText := [];
  Self.Walker^.ActionUpText := [];

  if Self.Walker^.RedClicked then
  begin
    Self.Walker^.RedClicked := False;
    Exit(True);
  end;

  if ChooseOption.IsOpen() and ChooseOption.Select(action) then
    Exit(True);

  if MainScreen.IsUpText(action) then
    Exit(Biometrics.RedClick(EMouseButton.LEFT, 2));

  Result := ChooseOption.Select(action);
end;



function TRSObject.Hover(attempts: Integer = 2): Boolean;
begin
  if ChooseOption.IsOpen() then
  begin
    if (Self.UpText <> []) and ChooseOption.Find(Self.UpText) then
      Exit(True);
    ChooseOption.Close();
  end;

  if Self.Walker = nil then
    raise GetDebugLn('TRSObject', 'Walker pointer missing.');
  if Self.Coordinates = [] then
    raise GetDebugLn('TRSObject', 'Coordinates missing.');
  if Length(Self.Coordinates) <> Length(Self.Rotations) then
    raise GetDebugLn('TRSObject', 'Coordinates and Rotations don''t match.');

  //TODO:
  //if not Self.Walker^.MakePointVisible(Self.Coordinates) then Exit;

  Result := Self._HoverHelper(attempts);
end;


function TRSObject.WalkHover(attempts: Integer = 2): Boolean;
var
  me, closest: TPoint;
  path: TPointArray;
  hasPath: Boolean;
begin
  if ChooseOption.IsOpen() then
  begin
    if (Self.UpText <> []) and ChooseOption.Find(Self.UpText) then
      Exit(True);
    ChooseOption.Close();
  end;

  if Self.UpText <> [] then
    Self.Walker^.TargetUpText := Copy(Self.UpText);

  me :=  Self.Walker^.Position();
  closest := Self.Walker^.GetClosestPointEx(me, Self.Coordinates, path);

  //if the point is not reachable with the webgraph (like a banker behind a booth) then pick nearest node as target
  if path = [] then
  begin
    path := Self.Walker^.WebGraph^.FindObjectPath(me, closest);
    if path = [] then
      raise GetDebugLn('TRSObject', 'Can''t path to object.');
    hasPath := True;
  end;

  // check if doors need to be passed to reach target
  if hasPath or Self.Walker^.WebGraph^.WalkableClusters.InSameTPA(me, closest) then
  begin
    if not Self.Walker^.MakePointVisible(closest) and not Self.Walker^.WebWalkEx(me, closest, 30, 0.15) then
      Exit;
  end
  else
  if not Self.Walker^.WebWalk(closest, 30, 0.15) then
    Exit;

  Result := Self._WalkHoverHelper(attempts);
end;



function TRSObject.Click(leftClick: Boolean = True; attempts: Integer = 2): Boolean;
begin
  Result := Self.Hover(attempts) and Self._ClickHelper(leftClick);
end;


function TRSObject.Select(action: TStringArray; attempts: Integer = 2): Boolean;
begin
  Self.Walker^.ActionUpText := action;
  Result := Self.Hover(attempts) and Self._SelectHelper(action);
  Self.Walker^.ActionUpText := [];
end;


function TRSObject.WalkClick(leftClick: Boolean = True; attempts: Integer = 2): Boolean;
begin
  if Self.Walker = nil then
    raise GetDebugLn('TRSObject', 'Walker pointer missing.');
  if Self.Coordinates = [] then
    raise GetDebugLn('TRSObject', 'Coordinates missing.');
  if Length(Self.Coordinates) <> Length(Self.Rotations) then
    raise GetDebugLn('TRSObject', 'Coordinates and Rotations don''t match.');

  Result := Self.WalkHover(attempts) and Self._ClickHelper(leftClick);
  Self.Walker^.TargetUpText := [];
end;


function TRSObject.WalkSelect(action: TStringArray; attempts: Integer = 2): Boolean;
begin
  if Self.Walker = nil then
    raise GetDebugLn('TRSObject', 'Walker pointer missing.');
  if Self.Coordinates = [] then
    raise GetDebugLn('TRSObject', 'Coordinates missing.');
  if Length(Self.Coordinates) <> Length(Self.Rotations) then
    raise GetDebugLn('TRSObject', 'Coordinates and Rotations don''t match.');

  Self.Walker^.ActionUpText := action;

  Result := Self.WalkHover(attempts) and Self._SelectHelper(action);

  Self.Walker^.TargetUpText := [];
  Self.Walker^.ActionUpText := [];
end;


function TRSObject.DistanceTo(pt: TPoint): Double;
var
  dist: Double;
  i: Integer;
begin
  Result := $FFFFFF;
  for i := 0 to High(Self.Coordinates) do
  begin
    dist := Self.Coordinates[i].DistanceTo(pt);
    if dist < Result then
      Result := dist;
  end;
end;

function TRSObjectArray.ClosestIndex(pt: TPoint): Integer;
var
  closest, dist: Double;
  i, j: Integer;
begin
  closest := $FFFFFF;
  for i := 0 to High(Self) do
    for j := 0 to High(Self[i].Coordinates) do
    begin
      dist := Self[i].Coordinates[j].DistanceTo(pt);
      if dist >= closest then Continue;

      closest := dist;
      Result := i;
    end;
end;


procedure TImage.DrawObject(obj: TRSObject);
var
  atpa: T2DPointArray;
  cuboids: TCuboidArray;
  i: Integer;
begin
  if not obj.FindEx(obj.Walker^.Position(), cuboids, atpa) then Exit;

  Self.DrawColor := $00FFFF;
  for i := 0 to High(cuboids) do
  begin
    Self.DrawTPA(cuboids[i].Bottom.Corners.Connect().Grow(1));
    Self.DrawTPA(cuboids[i].Top.Corners.Connect().Grow(1));
  end;

  Self.DrawColor := Colors.Random();
  Self.DrawATPA(atpa);

  Self.DrawColor := $FFFFFF;
  for i := 0 to High(cuboids) do
    Self.DrawTPA(cuboids[i].Edges());
end;

procedure ShowOnTarget(obj: TRSObject); overload;
var
  img: TImage;
begin
  img := Target.GetImage();
  img.DrawObject(obj);
  img.Show();
end;


function ToString(constref obj: TRSObject): String; override;
begin
  Result := '[' + ToString(obj.UpText) + ', ' +
                  ToString(obj.Size) + ', ' +
                  ToString(obj.Coordinates) + ', ' +
                  ToString(obj.Rotations) + ', ' +
                  ToString(obj.Finder) + ', ' +
                  ToString(obj.Track) + ']';
end;
