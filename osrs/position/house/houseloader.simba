(*
# HouseLoader
{ref}`HouseLoader` is what's responsible for mapping a user's {ref}`House` for
WaspLib to be able to interact with it.

All {ref}`THouseLoader` methods are helper methods for the {ref}`TRSHouse` and
you shouldn't have to call them for anything.
*)
{$DEFINE WL_HOUSELOADER_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## THouseLoader
Helper record used by the {ref}`TRSHouse` to load and/or map a POH.
*)
  THouseLoader = record
    Downscale, LayoutIndex: Integer;
    Map, Collision, DownscaledMap: TImage;

    Rooms: THouseRoomMatrix;

    //helpers:
    TeleportRooms: TTeleportRoomMatrix;

    RoomImages, IconImages: array [EHouseRoom] of TImage;

    Selected: record
      Matrix, Map: TPoint;
    end;
    HouseBounds: TBox;

    Location: EHouseLocation;
    Decoration: EHouseDecoration;
    Colors: THouseColor;
    Config: TConfigJSON;

    const SIZE: Integer = 32;
    const AMOUNT: Integer = 13;
    const ROOMS_IMAGE: TImage = ImageFromString('IMG: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');
    const ICONS_IMAGE: TImage = ImageFromString('IMG:');
  end;

procedure THouseLoader.DrawMap(room: THouseRoom; p: TPoint); forward;

procedure THouseLoader.SetColors(decoration: EHouseDecoration);
begin
  Self.Decoration := decoration;
  Self.Colors := decoration.GetColors();
end;

procedure THouseLoader.SetupConfig();
begin
  if (Self.Config.Data <> nil) and (Self.LayoutIndex = PlayerIndex) then
    Exit;
  Self.LayoutIndex := PlayerIndex;
  Self.Config.Setup('house' + PATH_SEP + ToStr(PlayerIndex));

  if Self.Config.Data = nil then
  begin
    Self.Location := EHouseLocation.RIMMINGTON;
    Self.SetColors(EHouseDecoration.WOOD);
    SetLength(Self.Rooms, Self.AMOUNT, Self.AMOUNT);
    SetLength(Self.TeleportRooms, Self.AMOUNT, Self.AMOUNT);
    Self.DrawMap([EHouseRoom.GARDEN, 0, [EHouseObject.EXIT]], [Self.AMOUNT div 2, Self.AMOUNT div 2]);

    Self.Config.Item['EHouseObject'].AsInt     := Ord(High(EHouseObject));
    Self.Config.Item['EHouseTeleport'].AsInt   := Ord(High(EHouseTeleport));
    Self.Config.Item['Location'].AsInt         := Ord(Self.Location);
    Self.Config.Item['Decoration'].AsInt       := Ord(Self.Decoration);
    Self.Config.Item['Rooms'].AsString         := String.CreateFromBytes(CompressBytes(Self.Rooms.ToBytes()));
    Self.Config.Item['TeleportRooms'].AsString := String.CreateFromBytes(CompressBytes(Self.TeleportRooms.ToBytes()));
    Self.Config.SaveConfig();
  end;

  Self.Config.Lock.Enter();
  Self.Location := EHouseLocation(Self.Config.Item['Location'].AsInt);
  Self.SetColors(EHouseDecoration(Self.Config.Item['Decoration'].AsInt));

  Self.Rooms := THouseRoomMatrix.CreateFromBytes(DecompressBytes(Self.Config.Item['Rooms'].AsString.ToBytes()));
  Self.TeleportRooms := TTeleportRoomMatrix.CreateFromBytes(DecompressBytes(Self.Config.Item['TeleportRooms'].AsString.ToBytes()));
  Self.Config.Lock.Leave();
end;

(*
## THouseLoader.Init()
```pascal
procedure THouseLoader.Init();
```
Internal method automatically called for your when you use `TScriptForm.CreateHouseBuilder()`.
You don't usually have to call it yourself.
*)
procedure THouseLoader.Init();
begin
  Self.SetupConfig();

  Self.Selected.Map := [Self.AMOUNT div 2 * Self.SIZE, Self.AMOUNT div 2 * Self.SIZE];
  Self.Selected.Matrix := [Self.AMOUNT div 2, Self.AMOUNT div 2];
  Self.HouseBounds := [Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2];

  Self.Map := new TImage(Self.SIZE * Self.AMOUNT, Self.SIZE * Self.AMOUNT);
  Self.DownscaledMap := new TImage();
end;

procedure THouseLoader.Setup(downscale: Integer);
var
  empty, walls, windows: TPointArray;
  tmp: T2DPointArray;
begin
  Self.Downscale := downscale;
  Self.DownscaledMap := Self.Map.Downsample(Self.Downscale);

  walls := Self.Map.FindColor($EEEEEE, 0);
  windows := Self.Map.FindColor($0000EE, 0);
  empty := Self.Map.FindColor($0, 0);

  tmp := windows.Cluster(1);
  tmp.ExcludeSize(5, EComparator.__LT__);
  windows := tmp.Merge();

  Self.Collision := new TImage(Self.Map.Width, Self.Map.Height);
  Self.Collision.ReplaceColor($0, $FFFFFF);
  Self.Collision.DrawColor := $0;
  Self.Collision.DrawTPA(walls + empty + windows);
end;


function THouseLoader.GetColor(room: EHouseRoom): Integer;
begin
  if room.IsOutdoors() then Exit(Self.Colors.Outdoors);
  Result := Self.Colors.Indoors;
end;

(*
## THouseLoader.GetRoomImageBox()
```pascal
function THouseLoader.GetRoomImageBox(room: EHouseRoom): TBox;
```
Internal method used to get the box of the {ref}`EHouseRoom` you pass in.

This box is a box of the following image:

![poh rooms](../../../osr/walker/poh.png)

Example:
```pascal
{$I WaspLib/optional/handlers/poh.simba}
begin
  WriteLn POH.Map.GetRoomImageBox(EHouseRoom.SUPERIOR_GARDEN);
end;
```
*)
function THouseLoader.GetRoomImageBox(room: EHouseRoom): TBox;
var
  i: Integer;
begin
  i := Ord(room);
  Result := [i * Self.SIZE, 0, i * Self.SIZE + Self.SIZE - 1, Self.SIZE-1];
end;

(*
## THouseLoader.GetRoomImage()
```pascal
function THouseLoader.GetRoomImage(room: EHouseRoom; color: Integer = -1): TImage;
```
Internal method used to retrieve a image of the {ref}`EHouseRoom` you pass in.

Example:
```pascal
{$I WaspLib/optional/handlers/poh.simba}
var
  img: TImage;
begin
  img := POH.Map.GetRoomImage(EHouseRoom.SUPERIOR_GARDEN);
  img.Show();
end;
```
*)
function THouseLoader.GetRoomImage(room: EHouseRoom): TImage;
begin
  if Self.RoomImages[room] = nil then
    Self.RoomImages[room] := Self.ROOMS_IMAGE.Copy(Self.GetRoomImageBox(room));

  Result := Self.RoomImages[room].Copy();
  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;

function THouseLoader.GetIconImage(room: EHouseRoom): TImage;
begin
  if Self.IconImages[room] = nil then
    Self.IconImages[room] := Self.ICONS_IMAGE.Copy(Self.GetRoomImageBox(room));

  Result := Self.IconImages[room].Copy();
  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;


(*
## THouseLoader.WriteRoom()
```pascal
procedure THouseLoader.WriteRoom(room: EHouseRoom; index: TPoint);
```
Internal method used to write a room to `THouseLoader.Rooms` cache.
This uses an `TPoint` as a room `index` in a 2D array of {ref}`EHouseRoom`.

Unless you know what you are doing, you definitly should not use this for anything.

Example:
```pascal
POH.Map.WriteRoom(EHouseRoom.SUPERIOR_GARDEN, [3,3]);
```
*)
procedure THouseLoader.WriteRoom(room: THouseRoom; index: TPoint);
begin
  Self.Rooms[index.Y,index.X] := room;
  case room.Room of
    EHouseRoom.PORTAL_CHAMBER, EHouseRoom.SUPERIOR_GARDEN, EHouseRoom.PORTAL_NEXUS:;
    else Self.TeleportRooms[index.Y,index.X] := [];
  end;

  Self.Config.Item['Rooms'].AsString := String.CreateFromBytes(CompressBytes(Self.Rooms.ToBytes()));
  Self.Config.Item['TeleportRooms'].AsString := String.CreateFromBytes(CompressBytes(Self.TeleportRooms.ToBytes()));
  Self.Config.SaveConfig();
end;

(*
## THouseLoader.ReadRoom()
```pascal
function THouseLoader.ReadRoom(index: TPoint): EHouseRoom;
```
Internal method used to read a cached room in `THouseLoader.Rooms`.
This uses an `TPoint` as a room `index`.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

Example:
```pascal
WriteLn POH.Map.ReadRoom([3,3]);
```
*)
function THouseLoader.ReadRoom(index: TPoint): THouseRoom;
begin
  Result := Self.Rooms[index.Y,index.X];
end;

(*
## THouseLoader.PrintRooms()
```pascal
procedure THouseLoader.PrintRooms();
```
Debugging helper method used to read a cached rooms in `THouseLoader.Rooms`.
This will print the whole cache nicely formated in a way that is human friendly like you were looking at the house map.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

```{note}
:class: dropdown
It's a extremely useful debugging tool when paired with `POH.Map.Map.Show()`.
```

Example:
```pascal
POH.Setup();
POH.Map.PrintRooms();
```
*)
procedure THouseLoader.PrintRooms();
var
  str: String;
  i, j: Integer;
begin
  str := '[' + LINE_SEP;
  for i := 0 to High(Self.Rooms) do
  begin
    for j := 0 to High(Self.Rooms[i]) do
    begin
      if j = 0 then
      begin
        str += '  [';
      end;
        str += ToStr(Self.Rooms[i][j]);
      if j < High(Self.Rooms[i]) then
        str += ', ';
    end;
      str += ', ' + LINE_SEP;
  end;
  str += ']';
  WriteLn str;
end;


(*
## THouseLoader.DrawMap()
```pascal
procedure THouseLoader.DrawMap(img: TImage; room: EHouseRoom; p: TPoint);
procedure THouseLoader.DrawMap(room: EHouseRoom; color: Integer; p: TPoint); overload;
```
Methods used to draw the POH map and cache the rooms drawn in `THouseLoader.Rooms`.

Example:
```pascal
POH.Map.DrawMap(EHouseRoom.SUPERIOR_GARDEN, POH.GrassColor, [3,3]);
POH.Map.Show();
POH.Map.PrintRooms();
```
*)
procedure THouseLoader.DrawMap(img: TImage; room: THouseRoom; index: TPoint); overload;
begin
  Self.WriteRoom(room, index);

  img := img.RotateClockWise(room.Rotation);
  Self.Map.DrawImage(img, [Self.SIZE * index.X, Self.SIZE * index.Y]);

  if (index.X > Self.HouseBounds.X1) and (index.X < Self.HouseBounds.X2) and
     (index.Y > Self.HouseBounds.Y1) and (index.Y < Self.HouseBounds.Y2) then
    Exit;

  if index.X <= Self.HouseBounds.X1 then Self.HouseBounds.X1 := index.X-1;
  if index.X >= Self.HouseBounds.X2 then Self.HouseBounds.X2 := index.X+1;
  if index.Y <= Self.HouseBounds.Y1 then Self.HouseBounds.Y1 := index.Y-1;
  if index.Y >= Self.HouseBounds.Y2 then Self.HouseBounds.Y2 := index.Y+1;

  img := Self.GetRoomImage(EHouseRoom.UNKNOWN);
  for index.Y := Max(Self.HouseBounds.Y1, 0) to Min(Self.HouseBounds.Y2, Self.AMOUNT-1) do
    for index.X := Max(Self.HouseBounds.X1, 0) to Min(Self.HouseBounds.X2, Self.AMOUNT-1) do
    begin
      if Self.ReadRoom(index).Room <> EHouseRoom.UNKNOWN then Continue;
      Self.Map.DrawImage(img, [Self.SIZE * index.X, Self.SIZE * index.Y]);
    end;
end;

procedure THouseLoader.DrawMap(room: THouseRoom; p: TPoint);
begin
  Self.DrawMap(Self.GetRoomImage(room.Room), room, p);
end;


procedure THouseLoader.Redraw();
var
  img: TImage;
  index: TPoint;
  room: THouseRoom;
begin
  for index.Y := Max(Self.HouseBounds.Y1, 0) to Min(Self.HouseBounds.Y2, Self.AMOUNT-1) do
    for index.X := Max(Self.HouseBounds.X1, 0) to Min(Self.HouseBounds.X2, Self.AMOUNT-1) do
    begin
      room := Self.ReadRoom(index);
      img := Self.GetRoomImage(room.Room).RotateClockWise(room.Rotation);
      Self.Map.DrawImage(img, [Self.SIZE * index.X, Self.SIZE * index.Y]);
    end;
end;
