(*
# HouseLoader
{ref}`HouseLoader` is what's responsible for mapping a user's {ref}`House` for
WaspLib to be able to interact with it.

All {ref}`THouseLoader` methods are helper methods for the {ref}`TRSHouse` and
you shouldn't have to call them for anything.

When loaded either by {ref}`HouseFormTab` or via the
{ref}`HouseViewer`, it's map should look something like this:
```{figure} ../../images/houseloadermap.png
```
And this map should look like whatever the account's POH looks like on the
minimap as that's how we will be able to navigate it.
*)
{$DEFINE WL_HOUSELOADER_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## THouseLoader
Helper record used by the {ref}`TRSHouse` to load and/or map a POH.
*)
  THouseLoader = record
    Downscale, LayoutIndex: Integer;
    Map, Collision, DownscaledMap: TImage;

    Rooms: THouseRoomMatrix;

    //helpers:
    TeleportRooms: TTeleportRoomMatrix;

    RoomImages, IconImages: array [EHouseRoom] of TImage;
    HouseBounds: TBox;

    Location: EHouseLocation;
    Decoration: EHouseDecoration;
    Colors: THouseColor;
    Config: TConfigJSON;

    const SIZE: Integer = 32;
    const AMOUNT: Integer = 13;
    const ROOMS_IMAGE: TImage = ImageFromString('IMG:AQAAAOACAAAgAAAAAAAAABD8MQcAAAAACdIAAAEAAAAAWeIKAAAAAD3UAAABAAAAAwAAAAAAAABsBAAAAAAAAAFZ4goAAAAAUkkDAAEAAAAAWeIKAAAAAA2hAAABAAAAAFniCgAAAAAIAAAAAAAAABD8MQcAAAAAlkkDAAEAAAABWeIKAAAAAFIHNQABiVBORw0KGgoAAAANSUhEUgAAAuAAAAAgCAIAAADcy1rDAAADy0lEQVR4nO3cbW7bQAyEYd//sLpCC7QFkgKWsjaXHM34FfwnQfKQYfZjgDp9/Gp+jrPn8fh6Fb5mqYfvzrfXHfq/hb/y+rT+u5/u+XQ/m+Yv278rP8uu+VS+RvW4nG+vrsNd50ZS/xVn5SmYS5u88hxrZ9AN8YESf38H+Pgf6/fhAyUC5m/vr+XUN/0/l2ijH9B/s09AUZZIOCDw8Qt+Hz5QImD+9r77Be/ePwFFhQ+USDgg8PELfh8+UCJg/va++wXv3j8BRYUPlEg4IPDxC34fPlAiYP72vvsF794/AUWFD5RIOCDw8Qt+Hz5QImD+9r77Be/ePwFFhQ+USDgg8PELfh8+UCJg/va++wXv3j8BRYUPlEg4IPDv57/3F4mS/vvwgRKp68fJd7/g3fu3DyjNv4A+fKDE2cWAj7/qnwSUiw/PqCef7D9A+/B/JdwvGHz8O/sEFBU+UCJhgeJrfQLKdQkCCj5+n09AUeEDJRIWKL7WJ6BclyCg4OP3+QQUFT5QImGB4mt9Asp1CQIKPn6fT0C5xr39gDdJuc8n0T92vUk2dD5Ovvv+te7fff7+65OAIvXZYFrfff2cB4s3qHV/14P/s+++f637d5+///okoEh9NpjWd18/BJR4333/WvfvPn//9UlAkfpsMK3vvn5CA8rKPz/d2d/1JOxf6/7d5++/PgkoUp8NpvXd109uQLn48P7+ridh/1r37z5///VJQJH6bDCt775+CCi39Hc9CfvXun/3+fuvTwKK1GeDaX339UNAuaW/60nYv9b9u8/ff30SUKQ+G0zru6+fWkA57vpnxgSUL999/1r37z5///VpH1D68IESqRck/py/8B+1nX3vj98ycICufL7Sw8p83g8oARcMPn7FJ6Co8IESCQsUX+sTUK5LEFDw8ft8AooKHyiRsEDxtT4B5boEAQUfv88noKjwgRIJCxRf6xNQrksQUPDx+3z7gNL8A/ThAyUm3kSG/3n+8f+7Xxdfkv6ff36ht0qJXX7q+nHyzS9g+/4JKCp8oETCAYGPX/D78IESAfO3990vePf+CSgqfKBEwgGBj1/w+/CBEgHzt/fdL3j3/gkoKnygRMIBgY9f8PvwgRIB87f33S949/4JKCp8oETCAYGPX/D78IESAfO3990vePf+CSgqfKBEwgGBj1/w+/CBEgHzt/fdL3j3/gkoKnygRMIBgY9f8PvwgRIB87f33S949/4DAsrz59U/gzx5lnpY/rvK+f7x8Vv8lVod5ou1ZPvXZD4yf6XWrqfivzqHjrk59m+yfn4DNNyWUpQ+wxoAAAAASUVORK5CYII=');
    const ICONS_IMAGE: TImage = ImageFromString('IMG:');
  end;

procedure THouseLoader.DrawMap(room: THouseRoom; p: TPoint); forward;

procedure THouseLoader.SetColors(decoration: EHouseDecoration);
begin
  Self.Decoration := decoration;
  Self.Colors := decoration.GetColors();
end;

procedure THouseLoader.SetupConfig();
var
  str: String;
begin
  if (Self.Config.Data <> nil) and (Self.LayoutIndex = PlayerIndex) then
    Exit;
  Self.LayoutIndex := PlayerIndex;
  Self.Config.Setup('house' + PATH_SEP + ToStr(PlayerIndex));

  if Self.Config.Data.Count = 0 then
  begin
    Self.Location := EHouseLocation.RIMMINGTON;
    Self.SetColors(EHouseDecoration.WOOD);
    SetLength(Self.Rooms, Self.AMOUNT, Self.AMOUNT);
    SetLength(Self.TeleportRooms, Self.AMOUNT, Self.AMOUNT);
    Self.DrawMap([EHouseRoom.GARDEN, 0, [EHouseObject.EXIT]], [Self.AMOUNT div 2, Self.AMOUNT div 2]);

    Self.Config.Item['EHouseObject'].AsInt     := Ord(High(EHouseObject));
    Self.Config.Item['EHouseTeleport'].AsInt   := Ord(High(EHouseTeleport));
    Self.Config.Item['Location'].AsInt         := Ord(Self.Location);
    Self.Config.Item['Decoration'].AsInt       := Ord(Self.Decoration);
    Self.Config.Item['TeleportMode'].AsInt     := 0;
    Self.Config.SaveConfig();
    Exit;
  end;

  Self.Config.Lock.Enter();
  Self.Location := EHouseLocation(Self.Config.Item['Location'].AsInt);
  Self.SetColors(EHouseDecoration(Self.Config.Item['Decoration'].AsInt));

  str := DecompressString(Self.Config.Item['Rooms'].AsString);
  Self.Rooms := THouseRoomMatrix.CreateFromBytes(str.ToBytes());

  str := DecompressString(Self.Config.Item['TeleportRooms'].AsString);
  Self.TeleportRooms := TTeleportRoomMatrix.CreateFromBytes(str.ToBytes());

  Self.Config.Lock.Leave();

  Self.Redraw();
end;

(*
## THouseLoader.Init
```pascal
procedure THouseLoader.Init();
```
Internal method automatically called for your when you use `TScriptForm.CreateHouseBuilder()`.
You don't usually have to call it yourself.
*)
procedure THouseLoader.Init();
begin
  Self.Map := new TImage(Self.SIZE * Self.AMOUNT, Self.SIZE * Self.AMOUNT);
  Self.SetupConfig();

  Self.HouseBounds := [Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2];

  Self.DownscaledMap := new TImage();
end;

procedure THouseLoader.Setup(downscale: Integer);
var
  empty, walls, windows: TPointArray;
  tmp: T2DPointArray;
begin
  Self.Downscale := downscale;
  Self.DownscaledMap := Self.Map.Downsample(Self.Downscale);

  walls := Self.Map.FindColor($EEEEEE, 0);
  windows := Self.Map.FindColor($0000EE, 0);
  empty := Self.Map.FindColor($0, 0);

  tmp := windows.Cluster(1);
  tmp.ExcludeSize(5, EComparator.__LT__);
  windows := tmp.Merge();

  Self.Collision := new TImage(Self.Map.Width, Self.Map.Height);
  Self.Collision.ReplaceColor($0, $FFFFFF);
  Self.Collision.DrawColor := $0;
  Self.Collision.DrawTPA(walls + empty + windows);
end;


function THouseLoader.GetColor(room: EHouseRoom): Integer;
begin
  if room.IsOutdoors() then Exit(Self.Colors.Outdoors);
  Result := Self.Colors.Indoors;
end;

(*
## THouseLoader.GetRoomImageBox
```pascal
function THouseLoader.GetRoomImageBox(room: EHouseRoom): TBox;
```
Internal method used to get the box of the {ref}`EHouseRoom` you pass in.

This box is a box of the following image:
```{figure} ../../images/rooms_image.png
```

Example:
```pascal
{$I WaspLib/osrs.simba}
begin
  WriteLn House.Loader.GetRoomImageBox(EHouseRoom.SUPERIOR_GARDEN);
end;
```
*)
function THouseLoader.GetRoomImageBox(room: EHouseRoom): TBox;
var
  i: Integer;
begin
  i := Ord(room);
  Result := [i * Self.SIZE, 0, i * Self.SIZE + Self.SIZE - 1, Self.SIZE-1];
end;

(*
## THouseLoader.GetRoomImage
```pascal
function THouseLoader.GetRoomImage(room: EHouseRoom): TImage;
```
Internal method used to retrieve a image of the {ref}`EHouseRoom` you pass in.

Example:
```pascal
{$I WaspLib/osrs.simba}
var
  img: TImage;
begin
  img := House.Loader.GetRoomImage(EHouseRoom.ACHIEVEMENT_GALLERY);
  img.Show();
end;
```
```{figure} ../../images/achievement_gallery_img.png
```
*)
function THouseLoader.GetRoomImage(room: EHouseRoom): TImage;
begin
  if Self.RoomImages[room] = nil then
    Self.RoomImages[room] := Self.ROOMS_IMAGE.Copy(Self.GetRoomImageBox(room));

  Result := Self.RoomImages[room].Copy();
  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;

(*
## THouseLoader.GetIconImage
```pascal
function THouseLoader.GetIconImage(room: EHouseRoom): TImage;
```
Internal method used to retrieve a image of the {ref}`EHouseRoom` with it's
icons.
The only purpose of this is for debugging or displaying a room for a user as
having a room with it's icons drawn makes it much easier to identify the room
visually for a human.

Example:
```pascal
{$I WaspLib/osrs.simba}
var
  img: TImage;
begin
  img := House.Loader.GetIconImage(EHouseRoom.ACHIEVEMENT_GALLERY);
  img.Show();
end;
```
```{figure} ../../images/achievement_gallery_icons.png
```
*)
function THouseLoader.GetIconImage(room: EHouseRoom): TImage;
begin
  if Self.IconImages[room] = nil then
    Self.IconImages[room] := Self.ICONS_IMAGE.Copy(Self.GetRoomImageBox(room));

  Result := Self.IconImages[room].Copy();
  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;


(*
## THouseLoader.WriteRoom
```pascal
procedure THouseLoader.WriteRoom(room: EHouseRoom; index: TPoint);
```
Internal method used to write a room to `THouseLoader.Rooms` cache.
This uses an `TPoint` as a room `index` in a 2D array of {ref}`EHouseRoom`.

Unless you know what you are doing, you definitly should not use this for
anything.

If you do use this for some reason, keep in mind that `THouseLoader.Map` won't
get updated. The easier way is to updated it is to call
{ref}`THouseLoader.Redraw` which will redraw the whole map.
Read it's documentation for more information about it.

Example:
```pascal
House.Loader.WriteRoom(EHouseRoom.SUPERIOR_GARDEN, [3,3]);
```
*)
procedure THouseLoader.WriteRoom(room: THouseRoom; index: TPoint);
begin
  Self.Rooms[index.Y,index.X] := room;
  case room.Room of
    EHouseRoom.PORTAL_CHAMBER, EHouseRoom.SUPERIOR_GARDEN, EHouseRoom.PORTAL_NEXUS:;
    else Self.TeleportRooms[index.Y,index.X] := [];
  end;

  Self.Config.Item['Rooms'].AsString := CompressString(String.CreateFromBytes(Self.Rooms.ToBytes()));
  Self.Config.Item['TeleportRooms'].AsString := CompressString(String.CreateFromBytes(Self.TeleportRooms.ToBytes()));
  Self.Config.SaveConfig();
end;

(*
## THouseLoader.ReadRoom
```pascal
function THouseLoader.ReadRoom(index: TPoint): EHouseRoom;
```
Internal method used to read a cached room in `THouseLoader.Rooms`.
This uses an `TPoint` as a room `index`.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

Example:
```pascal
WriteLn House.Loader.ReadRoom([3,3]);
```
*)
function THouseLoader.ReadRoom(index: TPoint): THouseRoom;
begin
  Result := Self.Rooms[index.Y,index.X];
end;

(*
## THouseLoader.PrintRooms
```pascal
procedure THouseLoader.PrintRooms();
```
Debugging helper method used to read a cached rooms in `THouseLoader.Rooms`.
This will print the whole cache nicely formated in a way that is human friendly like you were looking at the house map.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

```{note}
:class: dropdown
It's a extremely useful debugging tool when paired with `House.Loader.Map.Show()`.
```

Example:
```pascal
House.Setup();
House.Loader.PrintRooms();
```
*)
procedure THouseLoader.PrintRooms();
var
  str: String;
  i, j: Integer;
begin
  str := '[' + LINE_SEP;
  for i := 0 to High(Self.Rooms) do
  begin
    for j := 0 to High(Self.Rooms[i]) do
    begin
      if j = 0 then
      begin
        str += '  [';
      end;
        str += ToStr(Self.Rooms[i][j]);
      if j < High(Self.Rooms[i]) then
        str += ', ';
    end;
      str += ', ' + LINE_SEP;
  end;
  str += ']';
  WriteLn str;
end;


(*
## THouseLoader.DrawMap
```pascal
procedure THouseLoader.DrawMap(img: TImage; room: EHouseRoom; p: TPoint);
procedure THouseLoader.DrawMap(room: EHouseRoom; color: Integer; p: TPoint); overload;
```
Methods used to draw the POH map and cache the rooms drawn in `THouseLoader.Rooms`.

Example:
```pascal
House.Loader.DrawMap(EHouseRoom.SUPERIOR_GARDEN, POH.GrassColor, [3,3]);
House.Loader.Show();
House.Loader.PrintRooms();
```
*)
procedure THouseLoader.DrawMap(img: TImage; room: THouseRoom; index: TPoint); overload;
begin
  Self.WriteRoom(room, index);

  img := img.RotateClockWise(room.Rotation);
  Self.Map.DrawImage(img, [Self.SIZE * index.X, Self.SIZE * index.Y]);

  if (index.X > Self.HouseBounds.X1) and (index.X < Self.HouseBounds.X2) and
     (index.Y > Self.HouseBounds.Y1) and (index.Y < Self.HouseBounds.Y2) then
    Exit;

  if index.X <= Self.HouseBounds.X1 then Self.HouseBounds.X1 := index.X-1;
  if index.X >= Self.HouseBounds.X2 then Self.HouseBounds.X2 := index.X+1;
  if index.Y <= Self.HouseBounds.Y1 then Self.HouseBounds.Y1 := index.Y-1;
  if index.Y >= Self.HouseBounds.Y2 then Self.HouseBounds.Y2 := index.Y+1;

  img := Self.GetRoomImage(EHouseRoom.UNKNOWN);
  for index.Y := 0 to Self.AMOUNT-1 do
    for index.X := 0 to Self.AMOUNT-1 do
    begin
      if Self.ReadRoom(index).Room <> EHouseRoom.UNKNOWN then Continue;
      Self.Map.DrawImage(img, [Self.SIZE * index.X, Self.SIZE * index.Y]);
    end;
end;

procedure THouseLoader.DrawMap(room: THouseRoom; p: TPoint);
begin
  Self.DrawMap(Self.GetRoomImage(room.Room), room, p);
end;


(*
## THouseLoader.Redraw
```pascal
procedure THouseLoader.Redraw();
```
Redraws `THouseLoader.Map` based on the information being held at
`THouseLoader.Rooms`.
This redraws the the whole house map from scratch so if you just want to draw a
single room, there's lighter ways to do do it, such as:
```pascal
var
  index: TPoint;
  img: TImage;
begin
  index := [5,5];
  img := House.Loader.GetRoomImage(EHouseRoom.ACHIEVEMENT_GALLERY).RotateClockWise(3);
  House.Loader.Map.DrawImage(img, [House.Loader.SIZE * index.X, House.Loader.SIZE * index.Y]);
end;
```
*)
procedure THouseLoader.Redraw();
var
  img: TImage;
  index: TPoint;
  room: THouseRoom;
begin
  for index.Y := 0 to Self.AMOUNT-1 do
    for index.X := 0 to Self.AMOUNT-1 do
    begin
      room := Self.ReadRoom(index);
      img := Self.GetRoomImage(room.Room).RotateClockWise(room.Rotation);
      Self.Map.DrawImage(img, [Self.SIZE * index.X, Self.SIZE * index.Y]);
    end;
end;
