(*
# HouseMap
{ref}`HouseMap` is what's responsible for mapping a user's {ref}`House` for
WaspLib to be able to interact with it.

All {ref}`THouseLoader` methods are helper methods for the {ref}`TRSHouse` and
you shouldn't have to call them for anything.
*)
{$DEFINE WL_HOUSELOADER_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## THouseLoader
Helper record used by the {ref}`TRSHouse` to load and/or map a POH.
*)
  THouseLoader = record
    Downscale, LayoutIndex: Integer;
    Map, Collision, DownscaledMap: TImage;

    Rooms: THouseRoomMatrix;

    //helpers:
    TeleportRooms: TTeleportRoomMatrix;

    RoomsImage, IconBitmap: TImage;
    RoomImages, IconBitmaps: array [EHouseRoom] of TImage;

    Selected: record
      Matrix, Map: TPoint;
    end;
    HouseBounds: TBox;

    Location: EHouseLocation;
    Decoration: EHouseDecoration;
    Colors: THouseColor;
    Config: TConfigJSON;

    IsSetup: Boolean;

    const SIZE: Integer = 32;
    const AMOUNT: Integer = 13;
  end;

(*
## THouseLoader.Free()
```pascal
procedure THouseLoader.Free();
```
Internal method automatically called for your on script termination.
You do not have to call it yourself.
*)
procedure THouseLoader.Free();
begin
  Self.Rooms := [];
  Self.TeleportRooms := [];
  Self.IsSetup := False;
end;

procedure THouseLoader.DrawMap(room: THouseRoom; p: TPoint); forward;

procedure THouseLoader.SetColors(decoration: EHouseDecoration);
begin
  Self.Decoration := decoration;
  Self.Colors := decoration.GetColors();
end;

procedure THouseLoader.SetupConfig();
begin
  if (Self.Config.Data <> nil) and (Self.LayoutIndex = PlayerIndex) then
    Exit;
  Self.LayoutIndex := PlayerIndex;
  Self.Config.Setup('house' + PATH_SEP + ToStr(PlayerIndex));

  if Self.Config.Data = nil then
  begin
    Self.Location := EHouseLocation.RIMMINGTON;
    Self.SetColors(EHouseDecoration.WOOD);
    SetLength(Self.Rooms, Self.AMOUNT, Self.AMOUNT);
    SetLength(Self.TeleportRooms, Self.AMOUNT, Self.AMOUNT);
    Self.DrawMap([EHouseRoom.GARDEN, 0, [EHouseObject.EXIT]], [Self.AMOUNT div 2, Self.AMOUNT div 2]);

    Self.Config.Item['EHouseObject'].AsInt     := Ord(High(EHouseObject));
    Self.Config.Item['EHouseTeleport'].AsInt   := Ord(High(EHouseTeleport));
    Self.Config.Item['Location'].AsInt         := Ord(Self.Location);
    Self.Config.Item['Decoration'].AsInt       := Ord(Self.Decoration);
    Self.Config.Item['Rooms'].AsString         := String.CreateFromBytes(CompressBytes(Self.Rooms.ToBytes()));
    Self.Config.Item['TeleportRooms'].AsString := String.CreateFromBytes(CompressBytes(Self.TeleportRooms.ToBytes()));
    Self.Config.SaveConfig();
  end;

  Self.Config.Lock.Enter();
  Self.Location := EHouseLocation(Self.Config.Item['Location'].AsInt);
  Self.SetColors(EHouseDecoration(Self.Config.Item['Decoration'].AsInt));

  Self.Rooms := THouseRoomMatrix.CreateFromBytes(DecompressBytes(Self.Config.Item['Rooms'].AsString.ToBytes()));
  Self.TeleportRooms := TTeleportRoomMatrix.CreateFromBytes(DecompressBytes(Self.Config.Item['TeleportRooms'].AsString.ToBytes()));
  Self.Config.Lock.Leave();
end;

(*
## THouseLoader.Init()
```pascal
procedure THouseLoader.Init();
```
Internal method automatically called for your when you use `TScriptForm.CreateHouseBuilder()`.
You don't usually have to call it yourself.
*)
procedure THouseLoader.Init();
begin
  Self.SetupConfig();

  Self.Selected.Map := [Self.AMOUNT div 2 * Self.SIZE, Self.AMOUNT div 2 * Self.SIZE];
  Self.Selected.Matrix := [Self.AMOUNT div 2, Self.AMOUNT div 2];
  Self.HouseBounds := [Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2];

  Self.Map := new TImage(Self.SIZE * Self.AMOUNT, Self.SIZE * Self.AMOUNT);
  Self.DownscaledMap := new TImage();

  Self.RoomsImage := new TImage({$MACRO DIR} + 'house.png');
  Self.IconBitmap := new TImage({$MACRO DIR} + 'houseicons.png');

  AddOnTerminate(@Self.Free);
  Self.IsSetup := True;
end;

procedure THouseLoader.Setup(downscale: Integer);
var
  empty, walls, windows: TPointArray;
  tmp: T2DPointArray;
begin
  Self.Downscale := downscale;
  Self.DownscaledMap := Self.Map.Downsample(Self.Downscale);

  walls := Self.Map.FindColor($EEEEEE, 0);
  windows := Self.Map.FindColor($0000EE, 0);
  empty := Self.Map.FindColor($0, 0);

  tmp := windows.Cluster(1);
  tmp.ExcludeSize(5, EComparator.__LT__);
  windows := tmp.Merge();

  Self.Collision := new TImage(Self.Map.Width, Self.Map.Height);
  Self.Collision.ReplaceColor($0, $FFFFFF);
  Self.Collision.DrawColor := $0;
  Self.Collision.DrawTPA(walls + empty + windows);
end;


function THouseLoader.GetColor(room: EHouseRoom): Integer;
begin
  if room.IsOutdoors() then Exit(Self.Colors.Outdoors);
  Result := Self.Colors.Indoors;
end;

(*
## THouseLoader.GetRoomBitmapBox()
```pascal
function THouseLoader.GetRoomBitmapBox(room: EHouseRoom): TBox;
```
Internal method used to get the box of the {ref}`EHouseRoom` you pass in.

This box is a box of the following image:

![poh rooms](../../../osr/walker/poh.png)

Example:
```pascal
{$I WaspLib/optional/handlers/poh.simba}
begin
  WriteLn POH.Map.GetRoomBitmapBox(EHouseRoom.SUPERIOR_GARDEN);
end;
```
*)
function THouseLoader.GetRoomBitmapBox(room: EHouseRoom): TBox;
var
  i: Integer;
begin
  i := Ord(room);
  Result := [i * Self.SIZE, 0, i * Self.SIZE + Self.SIZE - 1, Self.SIZE-1];
end;

(*
## THouseLoader.GetRoomBitmap()
```pascal
function THouseLoader.GetRoomBitmap(room: EHouseRoom; color: Integer = -1): TImage;
```
Internal method used to retrieve a bitmap of the {ref}`EHouseRoom` you pass in.

Example:
```pascal
{$I WaspLib/optional/handlers/poh.simba}
var
  bmp: TImage;
begin
  bmp := POH.Map.GetRoomBitmap(EHouseRoom.SUPERIOR_GARDEN);
  bmp.Debug();
  bmp.Free();
end;
```
*)
function THouseLoader.GetRoomBitmap(room: EHouseRoom): TImage;
begin
  if Self.RoomImages[room] = nil then
    Self.RoomImages[room] := Self.RoomsImage.Copy(Self.GetRoomBitmapBox(room));

  Result := Self.RoomImages[room].Copy();
  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;

function THouseLoader.GetIconBitmap(room: EHouseRoom): TImage;
begin
  if Self.IconBitmaps[room] = nil then
    Self.IconBitmaps[room] := Self.IconBitmap.Copy(Self.GetRoomBitmapBox(room));

  Result := Self.IconBitmaps[room].Copy();
  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;


(*
## THouseLoader.WriteRoom()
```pascal
procedure THouseLoader.WriteRoom(room: EHouseRoom; index: TPoint);
```
Internal method used to write a room to `THouseLoader.Rooms` cache.
This uses an `TPoint` as a room `index` in a 2D array of {ref}`EHouseRoom`.

Unless you know what you are doing, you definitly should not use this for anything.

Example:
```pascal
POH.Map.WriteRoom(EHouseRoom.SUPERIOR_GARDEN, [3,3]);
```
*)
procedure THouseLoader.WriteRoom(room: THouseRoom; index: TPoint);
begin
  Self.Rooms[index.Y,index.X] := room;
  case room.Room of
    EHouseRoom.PORTAL_CHAMBER, EHouseRoom.SUPERIOR_GARDEN, EHouseRoom.PORTAL_NEXUS:;
    else Self.TeleportRooms[index.Y,index.X] := [];
  end;

  Self.Config.Item['Rooms'].AsString := String.CreateFromBytes(CompressBytes(Self.Rooms.ToBytes()));
  Self.Config.Item['TeleportRooms'].AsString := String.CreateFromBytes(CompressBytes(Self.TeleportRooms.ToBytes()));
  Self.Config.SaveConfig();
end;

(*
## THouseLoader.ReadRoom()
```pascal
function THouseLoader.ReadRoom(index: TPoint): EHouseRoom;
```
Internal method used to read a cached room in `THouseLoader.Rooms`.
This uses an `TPoint` as a room `index`.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

Example:
```pascal
WriteLn POH.Map.ReadRoom([3,3]);
```
*)
function THouseLoader.ReadRoom(index: TPoint): THouseRoom;
begin
  Result := Self.Rooms[index.Y,index.X];
end;

(*
## THouseLoader.PrintRooms()
```pascal
procedure THouseLoader.PrintRooms();
```
Debugging helper method used to read a cached rooms in `THouseLoader.Rooms`.
This will print the whole cache nicely formated in a way that is human friendly like you were looking at the house map.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

```{note}
:class: dropdown
It's a extremely useful debugging tool when paired with `POH.Map.Map.Debug()`.
```

Example:
```pascal
POH.Setup();
POH.Map.PrintRooms();
```
*)
procedure THouseLoader.PrintRooms();
var
  str: String;
  i, j: Integer;
begin
  str := '[' + LINE_SEP;
  for i := 0 to High(Self.Rooms) do
  begin
    for j := 0 to High(Self.Rooms[i]) do
    begin
      if j = 0 then
      begin
        str += '  [';
      end;
        str += ToStr(Self.Rooms[i][j]);
      if j < High(Self.Rooms[i]) then
        str += ', ';
    end;
      str += ', ' + LINE_SEP;
  end;
  str += ']';
  WriteLn str;
end;


(*
## THouseLoader.DrawMap()
```pascal
procedure THouseLoader.DrawMap(bmp: TImage; room: EHouseRoom; p: TPoint);
procedure THouseLoader.DrawMap(room: EHouseRoom; color: Integer; p: TPoint); overload;
```
Methods used to draw the POH map and cache the rooms drawn in `THouseLoader.Rooms`.

Example:
```pascal
POH.Map.DrawMap(EHouseRoom.SUPERIOR_GARDEN, POH.GrassColor, [3,3]);
POH.Map.Debug();
POH.Map.PrintRooms();
```
*)
procedure THouseLoader.DrawMap(img: TImage; room: THouseRoom; index: TPoint); overload;
begin
  Self.WriteRoom(room, index);

  img := img.RotateClockWise(room.Rotation);
  Self.Map.DrawImage(img, [Self.SIZE * index.X, Self.SIZE * index.Y]);

  if (index.X > Self.HouseBounds.X1) and (index.X < Self.HouseBounds.X2) and
     (index.Y > Self.HouseBounds.Y1) and (index.Y < Self.HouseBounds.Y2) then
    Exit;

  if index.X <= Self.HouseBounds.X1 then Self.HouseBounds.X1 := index.X-1;
  if index.X >= Self.HouseBounds.X2 then Self.HouseBounds.X2 := index.X+1;
  if index.Y <= Self.HouseBounds.Y1 then Self.HouseBounds.Y1 := index.Y-1;
  if index.Y >= Self.HouseBounds.Y2 then Self.HouseBounds.Y2 := index.Y+1;

  img := Self.GetRoomBitmap(EHouseRoom.UNKNOWN);
  for index.Y := Max(Self.HouseBounds.Y1, 0) to Min(Self.HouseBounds.Y2, Self.AMOUNT-1) do
    for index.X := Max(Self.HouseBounds.X1, 0) to Min(Self.HouseBounds.X2, Self.AMOUNT-1) do
    begin
      if Self.ReadRoom(index).Room <> EHouseRoom.UNKNOWN then Continue;
      Self.Map.DrawImage(img, [Self.SIZE * index.X, Self.SIZE * index.Y]);
    end;
end;

procedure THouseLoader.DrawMap(room: THouseRoom; p: TPoint);
var
  bmp: TImage;
begin
  bmp := Self.GetRoomBitmap(room.Room);
  Self.DrawMap(bmp, room, p);
end;


procedure THouseLoader.Redraw();
var
  img: TImage;
  index: TPoint;
  room: THouseRoom;
begin
  for index.Y := Max(Self.HouseBounds.Y1, 0) to Min(Self.HouseBounds.Y2, Self.AMOUNT-1) do
    for index.X := Max(Self.HouseBounds.X1, 0) to Min(Self.HouseBounds.X2, Self.AMOUNT-1) do
    begin
      room := Self.ReadRoom(index);
      img := Self.GetRoomBitmap(room.Room).RotateClockWise(room.Rotation);
      Self.Map.DrawImage(img, [Self.SIZE * index.X, Self.SIZE * index.Y]);
    end;
end;
