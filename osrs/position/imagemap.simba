(*
# Image Map
This file is responsible for the TImageMap positioning system.
It's heavily based on [slacky](https://slacky.one/)'s original TRSWalker and
while it might look different the logic related to positioning should be the
exact same.

The way it works is that you load it with an image (.png or .bmp) and you can
retrive your position on that image by finding the most similar place to your
{ref}`Minimap` on the image.
*)

{$DEFINE WL_IMAGEMAP_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
(*
## TRSMapSample
Record used to customize the sample retrieved from the minimap for TRSMap.
*)
  TRSMapSample = record
    Amount, Radius: Int32;
  end;

(*
## TRSImageMap
Record responsible for positioning.
*)
  TRSImageMap = record
    Map, DownscaledMap: TImage;

    Walker: TRSWalker;
    Similarity: Single;
    Cache: TMatchTemplateCache;
    Sample: TRSMapSample;
    IsSetup: Boolean;
    Downscale: Integer;
    Graph: TWebGraph;
  end;

function TRSImageMap.Position(): TPoint; forward;

(*
## ImageMap.Setup
```pascal
procedure TRSImageMap.Setup(path: String; downscale: UInt32 = 8);
```
Sets up a {ref}`TRSImageMap`.
*)
procedure TRSImageMap.Setup(path: String; downscale: UInt32 = 8);
var
  img, sample: TImage;
begin
  if Self.Sample.Amount = 0 then Self.Sample.Amount := 3;
  if Self.Sample.Radius = 0 then Self.Sample.Radius := 65;
  Self.Downscale := downscale;

  Self.Map := new TImage(path);
  Self.DownscaledMap := Self.Map.Downsample(Self.Downscale);

  img := Minimap.GetCleanImage();
  sample := Minimap.ScaleMinimap(img, Self.Downscale, Self.Sample.Radius);

  Self.Cache := TMatchTemplateCache.Create(Self.DownscaledMap, sample, ETMFormula.TM_CCOEFF_NORMED);
  Self.Cache.FreeOnTerminate := True;

  if not Self.IsSetup then
  begin
    Self.Walker.Setup(@Self.Position, nil, nil, @Self.Graph, Self.Map);
    Self.Walker.Name := 'ImageMap.Walker';
    Self.IsSetup := True;
  end;
end;

(*
## ImageMap.ScaledSearch
```pascal
function TRSImageMap.ScaledSearch(img: TImage): TPointArray;
```
Internal TRSImageMap method used to get an initial TPointArray of possible positions.

This is performed in a downscaled map with a downscaled minimap.

This is very innacurate by itself but by ruling down most of the map
in a downscaled search before doing a full sized search speed has a dramatic boost.

You probably won't ever need to call this directly.
*)
function TRSImageMap.ScaledSearch(img: TImage): TPointArray;
var
  sample: TImage;
  matrix: TSingleMatrix;
begin
  sample := Minimap.ScaleMinimap(img, Self.Downscale, Self.Sample.Radius);
  matrix := MatchTemplateMask(Self.Cache, sample.ToMatrix(), ETMFormula.TM_CCOEFF_NORMED);

  while Length(Result) < Self.Sample.Amount do
    with matrix.ArgMax() do
    begin
      Result += Offset(sample.Width div 2, Sample.Height div 2) * Self.Downscale;
      matrix.Fill([X - 5, Y - 5, X + 5, Y + 5], 0);
    end;

  Result := Result.Offset([Self.Downscale div 2, Self.Downscale div 2]);
end;

(*
## Map.FullSearch
```pascal
function TRSImageMap.FullSearch(template, map: TImage; position: TPoint; out match: Single): TPoint;
```
Internal TRSImageMap method used to get the player position.

This is used by {ref}`ImageMap.Position` to determine how likely is the
`position` passed in, our actual position.

This likelyhood is returned with `match` which ranges from `0.0` to `1.0`.

You probably won't ever need to call this directly.
*)
function TRSImageMap.FullSearch(template, map: TImage; position: TPoint; out match: Single): TPoint; static;
const
  TEMPL_SIZE = 25;
  SLICE_SIZE = TEMPL_SIZE + 45;
  SCALING = 2;
var
  slice, downscaledSlice, downscaledTemplate: TImage;
  matrix: TSingleMatrix;
  area: TBox;
begin
  area := [
    Max(0, position.X - SLICE_SIZE),
    Max(0, position.Y - SLICE_SIZE),
    Min(map.Width  - 1, position.X + SLICE_SIZE),
    Min(map.Height - 1, position.Y + SLICE_SIZE)
  ];

  slice := map.Copy(area);
  downscaledSlice := slice.Downsample(SCALING);
  downscaledTemplate := template.Downsample(SCALING);
  downscaledTemplate.Crop(TBox.Create(downscaledTemplate.Center, TEMPL_SIZE, TEMPL_SIZE));

  matrix := MatchTemplate(downscaledSlice, downscaledTemplate, ETMFormula.TM_CCOEFF_NORMED);
  with matrix.ArgMax() do
  begin
    match := matrix[Y, X];
    Result.X := area.X1 + (X + TEMPL_SIZE) * SCALING;
    Result.Y := area.Y1 + (Y + TEMPL_SIZE) * SCALING;
  end;
end;

(*
## ImageMap.Position
```pascal
function TRSImageMap.Position(): TPoint;
```
Returns the players current position on the loaded map image.

Example:
```pascal
WriteLn(ImageMap.Position());
WriteLn(ImageMap.Similarity); // Check to see the match percentage if needed
```
*)
function TRSImageMap.Position(): TPoint;
var
  clean: TImage;
  tpa: TPointArray;
  i: Integer;
  hit: TPoint;
  match: Single;
begin
  Self.Similarity := 0;

  clean := Minimap.GetCleanImage();
  tpa := Self.ScaledSearch(clean);

  for i := 0 to High(tpa) do
  begin
    hit := Self.FullSearch(clean, Self.Map, tpa[i], match);

    if match > Self.Similarity then
    begin
      Self.Similarity := match;
      Result := hit;
    end;
  end;
end;

(*
## ImageMap.DebugPosition
```pascal
function TRSImageMap.DebugPosition(): TPoint;
```
Debugs the player position in the currently loaded map image.

Example:
```pascal
Map.Setup(...);
while True do
  Map.DebugPosition();
```
*)
function TRSImageMap.DebugPosition(print: Boolean = True): TPoint;
  function _BoxStr(b: TBox): String;
  begin
    Result := Format('[%d, %d, %d, %d]', [b.X1, b.Y1, b.X2, b.Y2]);
  end;
var
  x1, y1, x2, y2, x, y, i: Int32;
  p, local: TPoint;
  img, map, cleanMinimap: TImage;
  time: Double;
  lines: TStringArray;
begin
  Target.FreezeImage();

  time   := PerformanceTime();
  Result := Self.Position();

  time   := PerformanceTime() - time;

  x1 := Max(0, local.X - 200);
  y1 := Max(0, local.Y - 200);
  x2 := Min(x1 + 400, Self.Map.Width  - 1);
  y2 := Min(y1 + 400, Self.Map.Height - 1);

  x := local.X - x1;
  y := local.Y - y1;

  lines := [
    'Position:',
    ' - Position: ' + Format('[%d, %d]', [Result.X, Result.Y]),
    '',
    'Certainty: '    + ToStr(Round(Self.Similarity, 3)),
    'Time: '         + ToStr(Round(time)) + ' ms'
  ];

  map := Self.Map.Copy([x1, y1, x2, y2]);
  map.DrawColor := $00FF00;
  map.DrawLine(Point(0, y), Point(x2 - x1, y));
  map.DrawLine(Point(x, 0), Point(x, y2 - y1));
  map.DrawColor := $FFFFFF;
  map.DrawBox([x - 2, y - 2, x + 2, y + 2]);

  cleanMinimap := Minimap.ScaleMinimap(Minimap.GetCleanImage(), 1);
  img := new TImage(700 + cleanMinimap.Width, 440);
  img.DrawImage(map, [10, 20]);
  with cleanMinimap.Center do
    if RSClient.Mode = ERSMode.FIXED then
      p := Point(X, Y).Offset(0, 8).Rotate(-Minimap.GetCompassAngle(False), [X,Y]);

  cleanMinimap.DrawColor := $FFFFFF;
  cleanMinimap.DrawBoxFilled([p.X - 1, p.Y - 1, p.X + 1, p.Y + 1]);

  {$IFDEF WINDOWS}
  img.FontName := 'Consolas';
  {$ENDIF}
  img.FontSize := 18;
  img.FontAntialiasing := True;

  img.DrawColor := $FFFFFF;
  for i := 0 to High(lines) do
  begin
    if print then WriteLn(lines[i]);
    img.DrawText(lines[i], [430, cleanMinimap.Height + 20 + 20 * i]);
  end;

  img.DrawImage(cleanMinimap, [520, 10]);
  img.Show();

  Target.UnFreezeImage();
end;
