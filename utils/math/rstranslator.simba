(*
# RSTranslator
This file is responsible for conversions or internal RuneScape values to values
that can be used by Simba and back.
*)

{$DEFINE WL_RSTRANSLATOR_INCLUDED}

type
(*
## TRSTranslator
Record responsible for conversions or internal RuneScape values to values
that can be used by Simba and back.
*)
  TRSTranslator = record
    const TileSize: Integer = 4;
    const TileArea: Integer = 16;
    const MaxHeight: Integer = 6048;
    const Planes: Integer = 3;

    RSMap: record
      const ChunkSide: Integer = 64;
      const Dimensions: TPoint = [100,200];
      const Scope: TBox = [16, 19, 66, 196];
    end;

    Map: record
      const ChunkSide: Integer = 256;
      const Dimensions: TPoint = [2560, 5120];
      const Scope: TBox = [4096, 4864, 16896, 50176];
    end;
  end;

(*
## RSTranslator.MapWidth
```pascal
property TRSTranslator.MapWidth: UInteger;
```
Returns the full width in pixels of the OldSchool RuneScape map.

Example:
```pascal
WriteLn RSTranslator.MapWidth;
```
*)
property TRSTranslator.MapWidth: Integer;
begin
  Result := Self.RSMap.Scope.Width * Self.Map.ChunkSide;
end;

(*
## RSTranslator.MapHeight
```pascal
property TRSTranslator.MapHeight: Integer;
```
Returns the full height in pixels of the OldSchool RuneScape map.

Example:
```pascal
WriteLn RSTranslator.MapHeight;
```
*)
property TRSTranslator.MapHeight: Integer;
begin
  Result := Self.RSMap.Scope.Height * Self.Map.ChunkSide;
end;


(*
## RSTranslator.Global2Chunk
```pascal
function TRSTranslator.Global2Chunk(p: TPoint): TPoint;
function TRSTranslator.Global2Chunk(b: TBox): TBox; overload;
```
Converts a "Global" coordinate to a chunk number.

Example:
```pascal
WriteLn RSTranslator.Global2Chunk(Point(2000, 2000));
```
*)
function TRSTranslator.Global2Chunk(p: TPoint): TPoint;
begin
  while p.X > Self.MapWidth do p.X -= Self.MapWidth;
  Result.X := Self.RSMap.Scope.X1 + Floor(p.X / Self.Map.ChunkSide);
  Result.Y := Self.RSMap.Scope.Y2 - Floor(p.Y / Self.Map.ChunkSide);
end;

function TRSTranslator.Global2Chunk(b: TBox): TBox; overload;
var
  s, f: TPoint;
begin
  s := Self.Global2Chunk([b.X1, b.Y1]);
  f := Self.Global2Chunk([b.X2, b.Y2]);
  Result := [s.X, s.Y, f.X, f.Y];
end;


(*
## RSTranslator.Chunk2Coordinate
```pascal
function TRSTranslator.Chunk2Coordinate(p: TPoint): TPoint;
function TRSTranslator.Chunk2Coordinate(b: TBox): TBox; overload;
```
Converts a "Chunk" number to the top left "Global" coordinate of that chunk.

Example:
```pascal
WriteLn RSTranslator.Chunk2Coordinate(Point(53, 50));
```
*)
function TRSTranslator.Chunk2Coordinate(p: TPoint): TPoint;
begin
  Result.X := p.X * Self.Map.ChunkSide - Self.Map.Scope.X1;
  Result.Y := Self.Map.Scope.Y2 - p.Y * Self.Map.ChunkSide;
end;

function TRSTranslator.Chunk2Coordinate(b: TBox): TBox; overload;
var
  s, f: TPoint;
begin
  s := Self.Chunk2Coordinate([b.X1, b.Y1]);
  f := Self.Chunk2Coordinate([b.X2+1, b.Y2-1]);
  Result := [s.X, s.Y, f.X-1, f.Y-1];
end;


function TRSTranslator.Height2Color(height: Single): Integer;
const
  H_VALUE := Self.MaxHeight / $FFFFFF;
begin
  Result := Round((height / H_VALUE) * 29.14);
end;

function TRSTranslator.Color2Height(color: Integer): Single;
const
  H_VALUE := Self.MaxHeight / $FFFFFF;
begin
  Result := (color*H_VALUE) / 29.14;
end;


function TRSTranslator.Normalize(p: TPoint): TPoint;
begin
  Result := [p.X - (p.X mod Self.TileSize), p.Y - (p.Y mod Self.TileSize) + (Self.TileSize div 2)];
end;

function TRSTranslator.NormalizeDoor(p: TPoint): TPoint;
begin
  Result := [p.X - (p.X mod Self.TileSize) + 1, p.Y - (p.Y mod Self.TileSize) + 1];
end;


//This normalizes to the nearest tile rather than the tile the current point is on. So if the coordinate gived would be on the fourth column, it returns the tile to the right of it rather that the tile the coordinate is on
//This should be used whenever you expect that there can be deviations to any side of the coordinate you want and want to prevent that if you go one pixel to the left, you end up with the tile to the left of the one you want

function TRSTranslator.NormalizeNearestTile(p: TPoint): TPoint;
begin
  if (p.X mod Self.TileSize) = 3 then
    Result := [p.X - (p.X mod Self.TileSize) + 4, p.Y - (p.Y mod Self.TileSize) + (Self.TileSize div 2)]
  else
    Result := [p.X - (p.X mod Self.TileSize), p.Y - (p.Y mod Self.TileSize) + (Self.TileSize div 2)];
end;


(*
## TRSTranslator.GetChunks
```pascal
function TRSTranslator.GetChunks(start, finish: TPoint): TPointArray; static;
```
Simple methods that will return all chunks in between a `start` and `finish` chunks.
This will also fix their order if required, as osrs chunks are oddly numbered from bottom to top on the Y axis.

Example:
```pascal
WriteLn RSTranslator.GetChunks([20,20], [22,22]);
//This will return:
//[[20, 20], [20, 21], [20, 22], [21, 20], [21, 21], [21, 22], [22, 20], [22, 21], [22, 22]];
```
*)
function TRSTranslator.GetChunks(start, finish: TPoint): TPointArray; static;
var
  x, y: Integer;
begin
  for x := Min(start.X, finish.X) to Max(start.X, finish.X) do
    for y := Min(start.Y, finish.Y) to Max(start.Y, finish.Y) do
      Result += [x,y];
end;

var
(*
## RSTranslator variable
Global {ref}`TRSTranslator` variable.
*)
  RSTranslator: TRSTranslator;
