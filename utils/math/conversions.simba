{$DEFINE SRLT_CONVERSIONS_INCLUDED}
{$include_once SRLT/utils.simba}

function String.CreateFromBytes(const bytes: TByteArray): String; static;
var
  len: Integer;
begin
  len := Length(Bytes) div SizeOf(Char);
  SetLength(Result, len);
  if len > 0 then
    Move(Bytes[0], Result[1], Length(Bytes));
end;

function TStringArray.ToBytes(): TByteArray;
begin
  Result := Self.Join(#0).ToBytes();
end;

function TStringArray.CreateFromBytes(const bytes: TByteArray): TStringArray; static;
var
  str: String;
  len: Integer;
begin
  if Length(bytes) = 0 then Exit;
  len := Length(bytes);

  SetLength(str, len);
  Move(bytes[0], str[1], len);

  Result := str.Split(#0, False);
  if str.EndsWith(#0) then Result += '';
end;


function T2DIntegerArray.ToBytes(): TByteArray;
var
  size, i, len, offset: Integer;
begin
  size := SizeOf(Int32);
  len := size;

  for i := 0 to High(Self) do
    Inc(len, size + Length(Self[i]) * size);

  SetLength(Result, len);
  Move(Length(Self), Result[0], size);
  offset := size;

  for i := 0 to High(Self) do
  begin
    len := Length(Self[i]);
    Move(len, Result[offset], size);
    Inc(offset, size);

    if len > 0 then
    begin
      Move(Self[i][0], Result[offset], len * size);
      Inc(offset, len * size);
    end;
  end;
end;

function T2DIntegerArray.CreateFromBytes(const bytes: TByteArray): T2DIntegerArray; static;
var
  size, i, len, row, offset: Integer;
begin
  len := Length(bytes);
  if len = 0 then Exit;
  size := SizeOf(Integer);
  Move(bytes[0], len, size);
  SetLength(Result, len);
  offset := size;

  for i := 0 to High(Result) do
  begin
    Move(bytes[offset], row, size);
    SetLength(Result[i], row);
    Inc(offset, size);

    if row > 0 then
    begin
      Move(bytes[offset], Result[i][0], row * size);
      Inc(offset, row * size);
    end;
  end;
end;



function TPointArray.ToBytes(): TByteArray;
var
  len: Integer;
begin
  len := Length(Self) * SizeOf(TPoint);
  if len = 0 then Exit;
  SetLength(Result, len);
  Move(Self[0], Result[0], len);
end;

function TPointArray.CreateFromBytes(const bytes: TByteArray): TPointArray; static;
var
  len: Integer;
begin
  len := Length(bytes);
  if len = 0 then Exit;
  SetLength(Result, len div SizeOf(TPoint));
  Move(bytes[0], Result[0], len);
end;


function T2DPointArray.ToBytes(): TByteArray;
var
  size, i, len, offset: Int32;
  bytes: TByteArray;
begin
  size := SizeOf(TPoint);
  len := SizeOf(Int32); // Start with the length of the outer array

  // Calculate the total size required for the byte array
  for i := 0 to High(Self) do
    Inc(len, SizeOf(Int32) + Length(Self[i]) * size);

  // Allocate the byte array
  SetLength(bytes, len);

  // Write the length of the outer array
  Move(Length(Self), bytes[0], SizeOf(Int32));
  offset := SizeOf(Int32);

  // Write each inner array
  for i := 0 to High(Self) do
  begin
    len := Length(Self[i]);
    Move(len, bytes[offset], SizeOf(Int32)); // Write the length of the inner array
    Inc(offset, SizeOf(Int32));

    if len > 0 then
    begin
      Move(Self[i][0], bytes[offset], len * size); // Write the inner array data
      Inc(offset, len * size);
    end;
  end;

  Result := bytes;
end;


function T2DPointArray.CreateFromBytes(const bytes: TByteArray): T2DPointArray; static;
var
  size, i, len, row, offset: Int32;
begin
  size := SizeOf(TPoint);

  // Read the length of the outer array
  Move(bytes[0], len, SizeOf(Int32));
  SetLength(Result, len);
  offset := SizeOf(Int32);

  // Read each inner array
  for i := 0 to High(Result) do
  begin
    Move(bytes[offset], row, SizeOf(Int32)); // Read the length of the inner array
    SetLength(Result[i], row);
    Inc(offset, SizeOf(Int32));

    if row > 0 then
    begin
      Move(bytes[offset], Result[i][0], row * size); // Read the inner array data
      Inc(offset, row * size);
    end;
  end;
end;
