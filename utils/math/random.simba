{$DEFINE WL_RANDOM_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
  ERandomDir = enum(LEFT, MEAN, RIGHT);

function RandomBoolean(): Boolean;
begin
  Result := Boolean(Random(0,1));
end;

function RandomBoolean(probability: Double): Boolean; overload;
begin
  Result := Random() <= probability;
end;

procedure Sleep(min, max: UInt32; dir: ERandomDir = ERandomDir.LEFT); overload;
begin
  case dir of
    ERandomDir.LEFT:  Sleep(RandomLeft(min, max));
    ERandomDir.MEAN:  Sleep(Random(min, max));
    ERandomDir.RIGHT: Sleep(RandomRight(min, max));
  end;
end;

function TPoint.RandomBetween(other: TPoint): TPoint;
var
  r: Double;
begin
  r := System.Random();
  Result.X := Self.X + Round(r * (other.X - Self.X));
  Result.Y := Self.Y + Round(r * (other.Y - Self.Y));
end;


function TPointArray.RandomMean(): TPoint;
var
  sorted: TPointArray;
begin
  if Length(Self) = 0 then Exit;
  Result := Self.SortFrom(Self.Mean())[RandomLeft(0, High(Self))];
end;


function TPolygon.RandomPoint(): TPoint;
var
  tris: TTriangleArray;
  areas: TIntegerArray;
  polyArea, rArea, accum: Double;
  i: Integer;
begin
  polyArea := Self.Area();
  tris := Self.Triangulate(0.02 * polyArea, 8);

  for i := 0 to High(tris) do
    areas += tris[i].Area;

  rArea := Random() * polyArea;
  accum := 0.0;

  for i := 0 to High(tris) do
  begin
    accum += areas[i];
    if rArea <= accum then
      Exit(tris[i].RandomPoint());
  end;

  WriteLn 'FALLING BACK!';
  Result := tris[0].a;
end;

function TPolygon.RandomPointCenter(): TPoint;
begin
  //WriteLn('TPolygon.RandomSkewedPoint() is not implemented yet. Using TPolygon.RandomPointCenter() instead.');
  Result := Self.RandomPointCenter();
end;



function TCircle.RandomSkewedPoint(from: TPoint): TPoint;
begin
  //WriteLn('TCircle.RandomSkewedPoint() is not implemented yet. Using TCircle.RandomPointCenter() instead.');
  Result := Self.RandomPointCenter();
end;

function TTriangle.RandomSkewedPoint(from: TPoint): TPoint;
begin
  //WriteLn('TTriangle.RandomSkewedPoint() is not implemented yet. Using TTriangle.RandomPointCenter() instead.');
  Result := Self.RandomPointCenter();
end;

function TPolygon.RandomSkewedPoint(from: TPoint): TPoint;
begin
  //WriteLn('TPolygon.RandomSkewedPoint() is not implemented yet. Using TPolygon.RandomPointCenter() instead.');
  Result := Self.RandomPointCenter();
end;

(*
## TQuad.RandomSkewedPoint
```pascal
function TQuad.RandomSkewedPoint(from: TPoint; force: Double = 0.35): TPoint;
```
Generates a random point within the bounds of the TQuad, the point generated is skewed towards towards the `from`-point.
The last parameter `force` defines how much the generated point is to be skewed towards or away from `from` - Expects value in the range 0..2

- force = 0: Result weighs heavily towrads the edge closest to `From`
- force = 1: Result in the middle of box is most common
- force = 2: Result weighs heavily towrads the edge furthest away from `From`
*)
function TQuad.RandomSkewedPoint(from: TPoint; force: Double = 0.35): TPoint;
var
  bounds: TBox;
  center, skewed: TPoint;
  r, angle, cutoff: Double;
begin
  bounds := Self.Bounds;

  if from.X < bounds.X1 then from.X := bounds.X1 else if from.X > bounds.X2 then from.X := bounds.X2;
  if from.Y < bounds.Y1 then from.Y := bounds.Y1 else if from.Y > bounds.Y2 then from.Y := bounds.Y2;

  center := Self.Mean;

  r := Hypot(from.X - center.X, from.Y - center.Y) * force;
  angle := ArcTan2(center.Y - from.Y, center.X - from.X);

  skewed.X := from.X + Round(Cos(angle) * r);
  skewed.Y := from.Y + Round(Sin(angle) * r);

  cutoff := RandCutoff;
  RandCutoff := 4.0;

  Result.X := Round(RandomMode(skewed.X, bounds.X1, bounds.X2));
  Result.Y := Round(RandomMode(skewed.Y, bounds.Y1, bounds.Y2));

  RandCutoff := cutoff;
end;

(*
## TBox.RandomSkewedPoint
```pascal
function TBox.RandomSkewedPoint(from: TPoint; force: Double = 0.35): TPoint;
```
Generates a random point within the bounds of the TBox, the point generated is skewed towards towards the `from`-point.
The last parameter `force` defines how much the generated point is to be skewed towards or away from `from` - Expects value in the range 0..2

- force = 0: Result weighs heavily towrads the edge closest to `From`
- force = 1: Result in the middle of box is most common
- force = 2: Result weighs heavily towrads the edge furthest away from `From`
*)
function TBox.RandomSkewedPoint(from: TPoint; force: Double = 0.35): TPoint;
var
  c: TPoint;
  cutoff, x, r: Double;
begin
  if from.x < Self.x1 then from.x := Self.x1 else if from.x > Self.x2 then from.x := Self.x2;
  if from.y < Self.y1 then from.y := Self.y1 else if from.y > Self.y2 then from.y := Self.y2;

  c :=  Point((Self.X2 + Self.X1) div 2, (Self.Y2 + Self.Y1) div 2);
  r := Hypot(from.x-c.x, from.y-c.y) * force;
  x := ArcTan2(c.y-from.y, c.x-from.x);

  from.x += Round(Cos(x) * r);
  from.y += Round(Sin(x) * r);

  cutoff := RandCutoff;
  RandCutoff := 4.0;
  Result.x := Round(RandomMode(from.x, Self.X1, Self.X2));
  Result.y := Round(RandomMode(from.y, Self.Y1, Self.Y2));
  RandCutoff := cutoff;
end;


function TCircle.RandomWeightedPoint(from: TPoint): TPoint;
begin
  //WriteLn('TCircle.RandomWeightedPoint() is not implemented yet. Using TCircle.RandomPointCenter() instead.');
  Result := Self.RandomPointCenter();
end;

(*
## RandomWeightedPoint
```pascal
function TTriangle.RandomWeightedPoint(from: TPoint; weight: Single = 10.0; bias: Single=1): TPoint;
function TPolygon.RandomWeightedPoint(from: TPoint; weight: Single = 10.0; bias: Single=1): TPoint;
function TQuad.RandomWeightedPoint(from: TPoint; weight: Single = 10.0; bias: Single=1): TPoint;
function TBox.RandomWeightedPoint(from: TPoint; weight: Single = 10.0; bias: Single=1): TPoint;
```
Generates a random point within the TTriangle, drawn towards a `from` point.

Parameters:
- from: The point towards which the distribution is drawn.
- weight: Controls the strength of attraction towards the `from` (higher values = stronger attraction).
  - weight = 0 gives a uniform distribution.
- bias: Introduces a Gaussian spread around the `from` (higher values = wider spread).
  - bias = 0 gives a purely weighted distribution towards the `from`.

Should expose weight and bias to the user if used as mouse distribution method. weight of 10 might be a little high.

Credits: slacky
*)
function TTriangle.RandomWeightedPoint(from: TPoint; weight: Single = 10.0; bias: Single=1): TPoint;
var
  r1, r2, r3, u, v, w, t, sum: Single;
  stdev,xr,yr: Single;
const
  eps := 0.0000001;
begin
  if (bias > 0) and (weight <> 0) then
  begin
    xr := Abs(Self.A.x - from.x) + Abs(Self.B.x - from.x) + Abs(Self.C.x - from.x);
    yr := Abs(Self.A.y - from.y) + Abs(Self.B.y - from.y) + Abs(Self.C.y - from.y);

    from.X += Round(GaussRand(0, xr/3 * bias) / weight);
    from.Y += Round(GaussRand(0, yr/3 * bias) / weight);
  end;

  if not (from in Self) then
    from := Self.NearestEdge(from);

  r1 := Random();
  r2 := Random();
  if r1 + r2 > 1 then
  begin
    r1 := 1 - r1;
    r2 := 1 - r2;
  end;

  r3 := Random();
  sum := 1 + weight * r3 + eps;
  u := r1 / sum;
  v := r2 / sum;
  w := (1 - r1 - r2) / sum;
  t := (weight * r3) / sum;

  with Self do
  begin
    Result.X := Round(u * A.X + v * B.X + w * C.X + t * from.X);
    Result.Y := Round(u * A.Y + v * B.Y + w * C.Y + t * from.Y);
  end;
end;

function TPolygon.RandomWeightedPoint(from: TPoint; weight: Single = 10.0; bias: Single = 1): TPoint;
var
  i: Integer;
  tri: TTriangleArray;
  xr,yr,b,sum, r, stdev, area: Single;
begin
  area := Self.Area();

  if bias > 0 then
  begin
    for i := 0 to High(Self) do xr += abs(Self[i].x - from.x);
    xr /= Length(self);

    for i := 0 to High(Self) do yr += abs(Self[i].y - from.y);
    yr /= Length(self);

    from.X += Round(GaussRand(0, xr * bias) / weight);
    from.Y += Round(GaussRand(0, yr * bias) / weight);
  end;

  if not Self.Contains(from) then
    from := Self.NearestEdge(from);

  for i := 0 to High(Self) do
    tri += TTriangle.Create(from, Self[i], Self[(i+1) mod Length(Self)]);

  r := Random() * area;
  sum := 0;
  for i := 0 to High(tri) do
  begin
    sum += tri[i].Area;
    if r < sum then
      Exit(tri[i].RandomWeightedPoint(from, weight, 0));
  end;
end;

function TQuad.RandomWeightedPoint(from: TPoint; weight: Single = 10.0; bias: Single=1): TPoint;
begin
  Result := TPolygon(Self.Corners).RandomWeightedPoint(from, weight, bias);
end;

function TBox.RandomWeightedPoint(from: TPoint; weight: Single = 10.0; bias: Single=1): TPoint;
begin
  Result := TPolygon(Self.Corners).RandomWeightedPoint(from, weight, bias);
end;




