(*
# Config
Configuration related types and methods. These can be used to save script and
library configurations in either JSON or INI formats.
*)
{$DEFINE WL_CONFIG_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

property TJSONItem.Key(index: Integer; name: String);
var
  item: TJSONItem;
begin
  if name <> Self.Key[index] then
  begin
    item := Self.Item[index].Clone();
    Self.Delete(Self.Item[index]);
    Self.Add(name, item);
  end;
end;

type
(*
## TConfigJSON
Type responsible for dealing with JSON configuration files.
*)
  TConfigJSON = record
    Path: String;
    Data: TJSONItem;
  end;

(*
## TConfigJSON.Setup
```pascal
procedure TConfigJSON.Setup(jsonFile: String);
```
Main method to setup your `TConfigJSON`
*)
procedure TConfigJSON.Setup(filename: String = SCRIPT_FILE);
var
  tmp: String;
begin
  Self.Path := WLEnv.ConfigsDir;

  if filename.Contains(PATH_SEP) then
  begin
    //if filename already had the configs path makes sure to not duplicate it.
    if filename.Contains(Self.Path) then
      filename := filename.After(Self.Path);

    tmp := PathExtractNameWithoutExt(filename);
    Self.Path += filename.Before(tmp);
    filename :=  tmp + '.json';
  end;

  if not DirCreate(Self.Path) then
    TerminateScript('Can''t create configs directory.');

  Self.Path += filename;

  if FileExists(Self.Path) then
    Self.Data := LoadJSON(Self.Path)
  else
    Self.Data := NewJSONObject();

  AddOnTerminate(@Self.Data.Free);
end;

(*
## TConfigJSON.SaveConfig
```pascal
procedure TConfigJSON.SaveConfig();
```
Used to save your `TConfigJSON`.
*)
procedure TConfigJSON.SaveConfig();
begin
  if not FileWrite(Self.Path, Self.Data.ToJSON()) then
    raise GetDebugLn('TConfigJSON.' + PathExtractNameWithoutExt(Self.Path), 'Failed to save config.');
end;

type
  TConfigINI  = record
    Path: String;
  end;
