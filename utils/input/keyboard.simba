{$DEFINE SRLT_KEYBOARD_INCLUDED}
{$IFNDEF SRLT_UTILS}
  {$I SRLT/utils.simba}
{$ENDIF}

type
  EKeycodeArray = array of EKeyCode;

  TKeyboard = record
    LastKey: EKeyCode;
    const ARROWS: EKeycodeArray = [EKeyCode.LEFT, EKeycode.UP, EKeycode.Right, EKeycode.DOWN];
    const FKEYS: EKeycodeArray = [EKeyCode.F1, EKeycode.F2, EKeycode.F3, EKeycode.F4, EKeycode.F5, EKeycode.F6, EKeycode.F7, EKeycode.F8, EKeycode.F9, EKeycode.F10, EKeycode.F11, EKeycode.F12];
    const MISC: EKeycodeArray = [EKeyCode.LCONTROL, EKeyCode.CONTROL, EKeyCode.SPACE, EKeyCode.SHIFT, EKeyCode.RSHIFT];
  end;

procedure TKeyboard.Setup();
begin
  Target.KeyOptions.MinPressTime := 30;
  Target.KeyOptions.MaxPressTime := 60;
end;

function TKeyboard.UseKeyboard(chance: Single): Boolean;
begin
  if chance = -1 then Exit(RandomBoolean());
end;

(*
## Keyboard.KeyDown
```pascal
procedure TKeyboard.KeyDown(Key: Integer);
```
Presses down the given virtual key.

Note: See `VK_` constants for values to pass it.
*)
procedure TKeyboard.KeyDown(const key: EKeyCode);
begin
  Target.KeyDown(key);
  Self.LastKey := key;
end;

(*
## Keyboard.KeyUp
```pascal
procedure TKeyboard.KeyUp(Key: Integer);
```
Releases the given virtual key.

Note: See `VK_` constants for values to pass it.
*)
procedure TKeyboard.KeyUp(const key: EKeyCode);
begin
  Target.KeyUp(key);
end;

(*
## Keyboard.PressKey
```pascal
procedure TKeyboard.PressKey(const key: Integer);
```
Presses the given virtual key.

Note: See `VK_` constants for values to pass it.
*)
procedure TKeyboard.PressKey(const key: EKeyCode);
begin
  Target.KeyPress(key);
  Self.LastKey := key;
end;


(*
## Keyboard.IsKeyDown
```pascal
procedure TKeyboard.IsKeyDown(Key: Integer);
```
Returns True if the given virtual key is currently down.

Note: See `VK_` constants for values to pass it.
*)
function TKeyboard.IsKeyDown(const key: EKeyCode): Boolean;
begin
  Result := Target.KeyPressed(key);
end;

(*
## Keyboard.Send
```pascal
procedure TKeyboard.Send(const Text: String; const KeyWait, KeyModWait, KeyPressWait: UInt32); overload;
procedure TKeyboard.Send(const Text: String); overload;
procedure TKeyboard.Send(const Text: String; KeyPressAfter: Integer); overload;
```
Writes the given text to whatever window is currently in focus.

First overload allows you to pass KeyWait, KeyModWait, and KeyPressWait, all are timing modifiers.
Last overload allows you to pass a long a key to be pressed after the text has been typed, for example ``VK_ENTER``.
*)
procedure TKeyboard.Send(const Text: String); overload;
var
  i: Integer;
begin
  for i := 1 to Length(text) do
  begin
    Target.KeySend(text[i]);
    Sleep(Random(Target.KeyOptions.MinPressTime+10, Target.KeyOptions.MaxPressTime+25));
  end;

  Self.LastKey := Target.KeyCodeFromChar(text[Length(text)]);
end;

procedure TKeyboard.Send(const text: String; keyPressAfter: EKeyCode); overload;
begin
  Self.Send(text);
  Sleep(30, 120, ERandomDir.LEFT);
  Self.PressKey(keyPressAfter);
end;

var
  Keyboard: TKeyboard;

begin
  Keyboard.Setup();
end;
