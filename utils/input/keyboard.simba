(*
# Keyboard
Methods to use the keyboard.
*)
{$DEFINE WL_KEYBOARD_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
  EKeycodeArray = array of EKeyCode;

(*
## TKeyboard
Main record responsible with handling {ref}`Keyboard` input.
*)
  TKeyboard = record
    LastKey: EKeyCode;
    const ARROWS: EKeycodeArray = [EKeyCode.LEFT, EKeycode.UP, EKeycode.Right, EKeycode.DOWN];
    const FKEYS: EKeycodeArray = [EKeyCode.F1, EKeycode.F2, EKeycode.F3, EKeycode.F4, EKeycode.F5, EKeycode.F6, EKeycode.F7, EKeycode.F8, EKeycode.F9, EKeycode.F10, EKeycode.F11, EKeycode.F12];
    const MISC: EKeycodeArray = [EKeyCode.LCONTROL, EKeyCode.CONTROL, EKeyCode.SPACE, EKeyCode.SHIFT, EKeyCode.RSHIFT];
  end;

(*
## Keyboard.Setup
```pascal
procedure TKeyboard.Setup();
```
Sets up internal {ref}`TKeyboard` values.

This is automatically called for you on the {ref}`Keyboard variable`.
*)
procedure TKeyboard.Setup();
begin
  Target.Options.KeyPressMin := 30;
  Target.Options.KeyPressMax := 60;
end;

(*
## Keyboard.KeyDown
```pascal
procedure TKeyboard.KeyDown(key: EKeyCode);
```
Presses down the given virtual key.
*)
procedure TKeyboard.KeyDown(key: EKeyCode);
begin
  Target.KeyDown(key);
  Self.LastKey := key;
end;

(*
## Keyboard.KeyUp
```pascal
procedure TKeyboard.KeyUp(key: EKeyCode);
```
Releases the given virtual key.
*)
procedure TKeyboard.KeyUp(key: EKeyCode);
begin
  Target.KeyUp(key);
end;

(*
## Keyboard.KeyPress
```pascal
procedure TKeyboard.KeyPress(key: EKeyCode);
```
Presses the given virtual key.
*)
procedure TKeyboard.KeyPress(key: EKeyCode);
begin
  Target.KeyPress(key);
  Self.LastKey := key;
end;


(*
## Keyboard.IsKeyDown
```pascal
procedure TKeyboard.IsKeyDown(Key: EKeyCode);
```
Returns True if the given virtual key is currently down.
*)
function TKeyboard.IsKeyDown(key: EKeyCode): Boolean;
begin
  Result := Target.KeyPressed(key);
end;

(*
## Keyboard.Send
```pascal
procedure TKeyboard.Send(text: String);
procedure TKeyboard.Send(text: String; keyPressAfter: EKeyCode); overload;
```
Writes the given text to whatever window is currently in focus.

First overload allows you to pass KeyWait, KeyModWait, and KeyPressWait, all are timing modifiers.
Last overload allows you to pass a long a key to be pressed after the text has been typed, for example ``VK_ENTER``.
*)
procedure TKeyboard.Send(text: String);
var
  i: Integer;
begin
  for i := 1 to Length(text) do
  begin
    Target.KeySend(text[i]);
    Sleep(Random(Target.Options.KeyPressMin+10, Target.Options.KeyPressMax+25));
  end;

  Self.LastKey := Target.KeyCodeFromChar(text[Length(text)]);
end;

procedure TKeyboard.Send(text: String; keyPressAfter: EKeyCode); overload;
begin
  Self.Send(text);
  Sleep(30, 120, ERandomDir.LEFT);
  Self.KeyPress(keyPressAfter);
end;


procedure TKeyboard.RandomKey();
begin
  case Random(100) of
    0..74:
    case Random(3) of
      0: Self.KeyPress(EKeyCode.LEFT);
      1: Self.KeyPress(EKeyCode.RIGHT);
      2: Self.KeyPress(EKeyCode.UP);
    end;
    75..89: Self.KeyPress(Self.FKEYS.Random());
    90..99: Self.KeyPress(Self.MISC.Random());
  end;
end;


var
(*
## Keyboard variable
Global {ref}`TKeyboard` variable.
*)
  Keyboard: TKeyboard;
