
{$DEFINE WL_KEYBOARD_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
  EKeycodeArray = array of EKeyCode;


  TKeyboard = record
    LastKey: EKeyCode;
    const ARROWS: EKeycodeArray = [EKeyCode.LEFT, EKeycode.UP, EKeycode.Right, EKeycode.DOWN];
    const FKEYS: EKeycodeArray = [EKeyCode.F1, EKeycode.F2, EKeycode.F3, EKeycode.F4, EKeycode.F5, EKeycode.F6, EKeycode.F7, EKeycode.F8, EKeycode.F9, EKeycode.F10, EKeycode.F11, EKeycode.F12];
    const MISC: EKeycodeArray = [EKeyCode.LCONTROL, EKeyCode.CONTROL, EKeyCode.SPACE, EKeyCode.SHIFT, EKeyCode.RSHIFT];
  end;


procedure TKeyboard.Setup();
begin
  Target.Options.KeyPressMin := 30;
  Target.Options.KeyPressMax := 60;
end;


procedure TKeyboard.KeyDown(key: EKeyCode);
begin
  Target.KeyDown(key);
  Self.LastKey := key;
end;


procedure TKeyboard.KeyUp(key: EKeyCode);
begin
  Target.KeyUp(key);
end;


procedure TKeyboard.KeyPress(key: EKeyCode);
begin
  Target.KeyPress(key);
  Self.LastKey := key;
end;



function TKeyboard.IsKeyDown(key: EKeyCode): Boolean;
begin
  Result := Target.KeyPressed(key);
end;


procedure TKeyboard.Send(text: String);
var
  i: Integer;
begin
  for i := 1 to Length(text) do
  begin
    Target.KeySend(text[i]);
    Sleep(Random(Target.Options.KeyPressMin+10, Target.Options.KeyPressMax+25));
  end;

  Self.LastKey := Target.KeyCodeFromChar(text[Length(text)]);
end;

procedure TKeyboard.Send(text: String; keyPressAfter: EKeyCode); overload;
begin
  Self.Send(text);
  Sleep(30, 120, ERandomDir.LEFT);
  Self.KeyPress(keyPressAfter);
end;


procedure TKeyboard.RandomKey();
begin
  case Random(100) of
    0..74:
    case Random(3) of
      0: Self.KeyPress(EKeyCode.LEFT);
      1: Self.KeyPress(EKeyCode.RIGHT);
      2: Self.KeyPress(EKeyCode.UP);
    end;
    75..89: Self.KeyPress(Self.FKEYS.Random());
    90..99: Self.KeyPress(Self.MISC.Random());
  end;
end;


var

  Keyboard: TKeyboard;
