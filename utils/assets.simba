(*
# Assets
Responsible for managing assets that WaspLib requires to run.
*)
{$DEFINE WL_ASSETS_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
  TWLAssets = record
    Fonts: record
      Path, Hash, Latest: String;
    end;

    Queue: Integer;
    Timeout: TCountDown;
    const DATA_REPO_URL: String = 'https://raw.githubusercontent.com/WaspScripts/wasp-data/refs/heads/main/';
  end;

procedure TWLAssets.Setup();
begin
  Self.Fonts.Path   := WLEnv.AssetsDir + 'fonts' + PATH_SEP + 'fonts.zip';
  Self.Fonts.Hash   := HashFile(EHashAlgo.MD5, Self.Fonts.Path);
  Self.Fonts.Latest := HTTPClient.Get(Self.DATA_REPO_URL + 'fonts/fonts.zip.hash').Trim();
end;

procedure TWLAssets.Download(constref result: TASyncHTTPResult);
begin
  if not InRange(result.Response.AsInteger, 200, 299) then
    raise GetDebugLn('WLAssets', result.Exception);

  Self.Queue -= 1;
end;

procedure TWLAssets.Update();
begin
  Self.Timeout.Start(1000);
  if Self.Fonts.Hash <> Self.Fonts.Latest then
  begin
    WriteLn GetDebugLn('WLAssets', 'Updating fonts.zip', ELogLevel.WARN);
    FileDelete(Self.Fonts.Path);
    Self.Queue += 1;
    Self.Timeout.Extend(60 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'fonts/fonts.zip', Self.Fonts.Path, @Self.Download);
  end;

  while Self.Queue > 0 do
  begin
    Sleep(100);

    if Self.Timeout.IsFinished then
    begin
      DirDelete(WLEnv.AssetsDir, True);
      raise GetDebugLn('WLAssets', 'Timed out downloading assets.');
    end;
  end;
end;

var
  WLAssets: TWLAssets;
