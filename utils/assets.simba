(*
# Assets
Responsible for managing assets that WaspLib requires to run.
*)
{$DEFINE WL_ASSETS_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
  EWLMapAsset = enum(MAP, COLLISION, HEIGHTMAP, OBJECTS, NPCS);
  EWLItemFinderAsset = enum(HASH, ID, ITEM, ZIP, MASKS);

  TWLAsset = record
    Path, Hash: String;
  end;

  TWLAssets = record
    Fonts, Gear, Weapons, ItemDefinitions, Consumables,
    SpellFinder, PrayerFinder, OverheadFinder,
    HouseLayoutFinder: TWLAsset;

    ItemFinder, Map: array [0..4] of TWLAsset;

    Queue: TStringArray;
    Timeout: TCountDown;
    const DATA_REPO_URL: String = 'https://raw.githubusercontent.com/WaspScripts/wasp-data/refs/heads/main/';
    const MAP_FILES: array [0..4] of String = ['map.zip', 'collision.zip', 'heightmap.zip', 'objects.zip', 'npcs.zip'];
    const ITEMFINDER_FILES: array [0..4] of String = ['data/hash.txt','data/id.txt','data/item.txt','items.zip','masks.zip'];
    const ITEMFINDER_DATA: String = WLEnv.AssetsDir + 'finders' + PATH_SEP + 'items' + PATH_SEP + 'data' + PATH_SEP;
  end;

procedure TWLAssets.Setup();
var
  i: Integer;
begin
  if not DirCreate(WLEnv.AssetsDir + 'fonts' + PATH_SEP) then
    raise GetDebugLn('WLAssets', 'Failed to create path: ' + WLEnv.AssetsDir + 'fonts' + PATH_SEP);
  if not DirCreate(WLEnv.AssetsDir + 'jsons' + PATH_SEP) then
    raise GetDebugLn('WLAssets', 'Failed to create path: ' + WLEnv.AssetsDir + 'jsons' + PATH_SEP);
  if not DirCreate(WLEnv.AssetsDir + 'finders' + PATH_SEP + 'items' + PATH_SEP + 'data' + PATH_SEP) then
    raise GetDebugLn('WLAssets', 'Failed to create path: ' + WLEnv.AssetsDir + 'finders' + PATH_SEP + 'items' + PATH_SEP + 'data' + PATH_SEP);
  if not DirCreate(WLEnv.AssetsDir + 'map' + PATH_SEP) then
    raise GetDebugLn('WLAssets', 'Failed to create path: ' + WLEnv.AssetsDir + 'map' + PATH_SEP);

  Self.Fonts.Path := WLEnv.AssetsDir + 'fonts' + PATH_SEP + 'fonts.zip';
  Self.Fonts.Hash := HashFile(EHashAlgo.MD5, Self.Fonts.Path);

  //JSON
  Self.Gear.Path := WLEnv.AssetsDir + 'jsons' + PATH_SEP + 'gear.json';
  Self.Gear.Hash := HashFile(EHashAlgo.MD5, Self.Gear.Path);

  Self.Weapons.Path := WLEnv.AssetsDir + 'jsons' + PATH_SEP + 'weapons.json';
  Self.Weapons.Hash := HashFile(EHashAlgo.MD5, Self.Weapons.Path);

  Self.ItemDefinitions.Path := WLEnv.AssetsDir + 'jsons' + PATH_SEP + 'item-definitions.zip';
  Self.ItemDefinitions.Hash := HashFile(EHashAlgo.MD5, Self.ItemDefinitions.Path);

  Self.Consumables.Path := WLEnv.AssetsDir + 'jsons' + PATH_SEP + 'consumables.json';
  Self.Consumables.Hash := HashFile(EHashAlgo.MD5, Self.Consumables.Path);

  //Map
  for i := 0 to 4 do
  begin
    Self.Map[i].Path := WLEnv.AssetsDir + 'map' + PATH_SEP + Self.MAP_FILES[i];
    Self.Map[i].Hash := HashFile(EHashAlgo.MD5, Self.Map[i].Path);
  end;

  //Finders
  for i := 0 to 4 do
  begin
    Self.ItemFinder[i].Path := WLEnv.AssetsDir + 'finders' + PATH_SEP + 'items' + PATH_SEP + Self.ITEMFINDER_FILES[i].Replace('/', PATH_SEP);
    Self.ItemFinder[i].Hash := HashFile(EHashAlgo.MD5, Self.ItemFinder[i].Path);
  end;

  Self.SpellFinder.Path := WLEnv.AssetsDir + 'finders' + PATH_SEP + 'spells.zip';
  Self.SpellFinder.Hash := HashFile(EHashAlgo.MD5, Self.SpellFinder.Path);

  Self.PrayerFinder.Path := WLEnv.AssetsDir + 'finders' + PATH_SEP + 'prayer.zip';
  Self.PrayerFinder.Hash := HashFile(EHashAlgo.MD5, Self.PrayerFinder.Path);

  Self.OverheadFinder.Path := WLEnv.AssetsDir + 'finders' + PATH_SEP + 'overheads.zip';
  Self.OverheadFinder.Hash := HashFile(EHashAlgo.MD5, Self.OverheadFinder.Path);

  Self.HouseLayoutFinder.Path := WLEnv.AssetsDir + 'finders' + PATH_SEP + 'house_layout.zip';
  Self.HouseLayoutFinder.Hash := HashFile(EHashAlgo.MD5, Self.HouseLayoutFinder.Path);
end;

procedure TWLAssets.Download(constref result: TASyncHTTPResult);
begin
  if not InRange(result.Response.AsInteger, 200, 299) then
    raise GetDebugLn('WLAssets', result.Exception);

  Self.Queue.Remove(result.Data);
end;

procedure TWLAssets.Update();
var
  i: Integer;
begin
  Self.Timeout.Start(100);
  if Self.Fonts.Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'fonts/fonts.zip.hash').Trim() then
  begin
    WriteLn GetDebugLn('WLAssets', 'Updating fonts.zip', ELogLevel.WARN);
    FileDelete(Self.Fonts.Path);
    Self.Queue += Self.Fonts.Path;
    Self.Timeout.Extend(30 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'fonts/fonts.zip', Self.Fonts.Path, @Self.Download);
  end;

  //JSON
  if Self.Gear.Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'jsons/gear.json.hash').Trim() then
  begin
    WriteLn GetDebugLn('WLAssets', 'Updating gear.json', ELogLevel.WARN);
    FileDelete(Self.Gear.Path);
    Self.Queue += Self.Gear.Path;
    Self.Timeout.Extend(30 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'jsons/gear.json', Self.Gear.Path, @Self.Download);
  end;

  if Self.Weapons.Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'jsons/weapons.json.hash').Trim() then
  begin
    WriteLn GetDebugLn('WLAssets', 'Updating weapons.json', ELogLevel.WARN);
    FileDelete(Self.Weapons.Path);
    Self.Queue += Self.Weapons.Path;
    Self.Timeout.Extend(30 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'jsons/weapons.json', Self.Weapons.Path, @Self.Download);
  end;

  if Self.ItemDefinitions.Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'jsons/item-definitions.zip.hash').Trim() then
  begin
    WriteLn GetDebugLn('WLAssets', 'Updating item-definitions.zip', ELogLevel.WARN);
    FileDelete(Self.ItemDefinitions.Path);
    Self.Queue += Self.ItemDefinitions.Path;
    Self.Timeout.Extend(30 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'jsons/item-definitions.zip', Self.ItemDefinitions.Path, @Self.Download);
  end;

  if Self.Consumables.Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'jsons/consumables.json.hash').Trim() then
  begin
    FileDelete(Self.Consumables.Path);
    Self.Queue += Self.Consumables.Path;
    Self.Timeout.Extend(30 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'jsons/consumables.json', Self.Consumables.Path, @Self.Download);
  end;

  //Map
  for i := 0 to 4 do
  begin
    if Self.Map[i].Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'map/' + Self.MAP_FILES[i] + '.hash').Trim() then
    begin
      WriteLn GetDebugLn('WLAssets', 'Updating map/' + Self.MAP_FILES[i], ELogLevel.WARN);
      FileDelete(Self.Map[i].Path);
      Self.Queue += Self.Map[i].Path;
      Self.Timeout.Extend(15 * ONE_SECOND);
      Async.HTTPGetFile(Self.DATA_REPO_URL + 'map/' + Self.MAP_FILES[i], Self.Map[i].Path, @Self.Download);
    end;
  end;

  //Finders
  for i := 0 to 4 do
  begin
    if Self.ItemFinder[i].Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'finders/items/' + Self.ITEMFINDER_FILES[i] + '.hash').Trim() then
    begin
      WriteLn GetDebugLn('WLAssets', 'Updating items/' + Self.ITEMFINDER_FILES[i], ELogLevel.WARN);
      FileDelete(Self.ItemFinder[i].Path);
      Self.Queue += Self.ItemFinder[i].Path;
      Self.Timeout.Extend(15 * ONE_SECOND);
      Async.HTTPGetFile(Self.DATA_REPO_URL + 'finders/items/' + Self.ITEMFINDER_FILES[i], Self.ItemFinder[i].Path, @Self.Download);
    end;
  end;

  if Self.SpellFinder.Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'finders/spells.zip.hash').Trim() then
  begin
    WriteLn GetDebugLn('WLAssets', 'Updating finders/spells.zip', ELogLevel.WARN);
    FileDelete(Self.SpellFinder.Path);
    Self.Queue += Self.SpellFinder.Path;
    Self.Timeout.Extend(15 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'finders/spells.zip', Self.SpellFinder.Path, @Self.Download);
  end;

  if Self.PrayerFinder.Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'finders/prayer.zip.hash').Trim() then
  begin
    WriteLn GetDebugLn('WLAssets', 'Updating finders/prayer.zip', ELogLevel.WARN);
    FileDelete(Self.PrayerFinder.Path);
    Self.Queue += Self.PrayerFinder.Path;
    Self.Timeout.Extend(15 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'finders/prayer.zip', Self.PrayerFinder.Path, @Self.Download);
  end;

  if Self.OverheadFinder.Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'finders/overheads.zip.hash').Trim() then
  begin
    WriteLn GetDebugLn('WLAssets', 'Updating finders/overheads.zip', ELogLevel.WARN);
    FileDelete(Self.OverheadFinder.Path);
    Self.Queue += Self.OverheadFinder.Path;
    Self.Timeout.Extend(15 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'finders/overheads.zip', Self.OverheadFinder.Path, @Self.Download);
  end;

  if Self.HouseLayoutFinder.Hash <> HTTPClient.Get(Self.DATA_REPO_URL + 'finders/house_layout.zip.hash').Trim() then
  begin
    WriteLn GetDebugLn('WLAssets', 'Updating finders/house_layout.zip', ELogLevel.WARN);
    FileDelete(Self.HouseLayoutFinder.Path);
    Self.Queue += Self.HouseLayoutFinder.Path;
    Self.Timeout.Extend(30 * ONE_SECOND);
    Async.HTTPGetFile(Self.DATA_REPO_URL + 'finders/house_layout.zip', Self.HouseLayoutFinder.Path, @Self.Download);
  end;

  //wait downloads
  while Length(Self.Queue) > 0 do
  begin
    Sleep(100);

    if Self.Timeout.IsFinished then
    begin
      for i := 0 to High(Self.Queue) do
        FileDelete(Self.Queue[i]);
      raise GetDebugLn('WLAssets', 'Timed out downloading assets: ' + ToStr(Self.Queue));
    end;
  end;
end;

var
  WLAssets: TWLAssets;
