(*
# WebGraph Generator
This page is about webgraph generation out of collision map images.

You can force WaspLib's graph generator to always run even if there's already
cached graphs by adding the following compiler directive at the top of your
script **BEFORE INCLUDING WASPLIB**:
```pascal
{$DEFINE WL_GENERATE_GRAPH_ALWAYS}
```
*)

{$DEFINE WL_WEBGRAPHGEN_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}
{$R+}

type
(*
## TWebGraphGenerator
Record responsible for generating webgraphs from collision map images.
*)
  TWebGraphGenerator = record
    Spacing, MinimumTiles, NodeRadius, MaxConnections: Integer;
    WallCrossings, Disabled: Boolean;
  end;

function TWebGraphGenerator.Hash(): String;
var
  data: TIntegerArray;
begin
  data := [Self.Spacing, Self.MinimumTiles, Self.NodeRadius, Self.MaxConnections, Integer(Self.WallCrossings)];
  Result := HashData(EHashAlgo.CRC32, @data[0], Length(data));
end;

(*
## WebGraphGenerator.Setup
```pascal
procedure TWebGraphGenerator.Setup();
```
Sets up the `TWebGraphGenerator` with the following settings which are the
defaults:
```pascal
WebGraphGenerator.Spacing := 18;         //low = better/slower, high = worse/faster
WebGraphGenerator.MinimumTiles := 4;     //spaces with less tiles than this will be ignored.
WebGraphGenerator.NodeRadius := 50;      //closed space less than NodeRadius pixels will have a single node.
WebGraphGenerator.MaxConnections := 6;   //Max connections per node.
WebGraphGenerator.WallCrossings := True; //Whether to allow wall crossings when there's a close path around it.
```

Feel free to change the settings to suit your need and use the
{ref}`Map Debugger` to see what the results look like.

To do so you **MUST DO IT BEFORE** setting up your {ref}`Map`.
*)
procedure TWebGraphGenerator.Setup();
begin
  Self.Spacing := 18;
  Self.MinimumTiles := 4;
  Self.NodeRadius := 50;
  Self.MaxConnections := 6;
  Self.WallCrossings := True;
end;

function TWebGraphGenerator.GetDoorDirection(center: TPoint; img: TImage): TPoint;
var
  imgBounds: TBox;
  
  function SafePixelCheck(x, y: Integer): Boolean;
  begin
    Result := imgBounds.Contains([x, y]) and (img.Pixel[x, y] = $0000FF);
  end;
  
begin
  imgBounds := [0, 0, img.Width - 1, img.Height - 1];
  
  if SafePixelCheck(center.X+1, center.Y) or SafePixelCheck(center.X-1, center.Y) then
    Exit([0,1]);

  if SafePixelCheck(center.X, center.Y+1) or SafePixelCheck(center.X, center.Y-1) then
    Exit([1,0]);

  if SafePixelCheck(center.X+1, center.Y+1) or SafePixelCheck(center.X-1, center.Y-1) then
    Exit([1,-1]);

  if SafePixelCheck(center.X+1, center.Y-1) or SafePixelCheck(center.X-1, center.Y+1) then
    Exit([1,1]);

  Result := [0,0];
end;

function TWebGraphGenerator.DoorIsSeparating(center, direction: TPoint; img: TImage): Boolean;
var
  inverted: TPoint;
  i: Integer;
  splitA, splitB: Boolean;
  testPoint: TPoint;
  imgBounds: TBox;
begin
  imgBounds := [0, 0, img.Width - 1, img.Height - 1];
  inverted := direction.Rotate(HALF_PI, [0,0]);

  for i := 1 to 5 do
  begin
    testPoint := Point(center.X, center.Y) + (inverted*i);
    
    if imgBounds.Contains(testPoint) then
    begin
      case img.Pixel[testPoint.X, testPoint.Y] of
        $333333, $0:
        begin
          splitA := True;
          Break;
        end;
      end;
    end;

    testPoint := Point(testPoint.X - direction.X, testPoint.Y - direction.Y);
    if imgBounds.Contains(testPoint) then
    begin
      case img.Pixel[testPoint.X, testPoint.Y] of
        $333333, $0:
        begin
          splitA := True;
          Break;
        end;
      end;
    end;

    testPoint := Point(center.X, center.Y) + (inverted*i) + direction;
    if imgBounds.Contains(testPoint) then
    begin
      case img.Pixel[testPoint.X, testPoint.Y] of
        $333333, $0:
        begin
          splitA := True;
          Break;
        end;
      end;
    end;
  end;

  for i := 1 to 5 do
  begin
    testPoint := Point(center.X, center.Y) - (inverted * i);
    
    if imgBounds.Contains(testPoint) then
    begin
      case img.Pixel[testPoint.X, testPoint.Y] of
        $333333, $0:
        begin
          splitB := True;
          Break;
        end;
      end;
    end;

    testPoint := Point(testPoint.X - direction.X, testPoint.Y - direction.Y);
    if imgBounds.Contains(testPoint) then
    begin
      case img.Pixel[testPoint.X, testPoint.Y] of
        $333333, $0:
        begin
          splitB := True;
          Break;
        end;
      end;
    end;

    testPoint := Point(center.X, center.Y) - (inverted * i) + direction;
    if imgBounds.Contains(testPoint) then
    begin
      case img.Pixel[testPoint.X, testPoint.Y] of
        $333333, $0:
        begin
          splitB := True;
          Break;
        end;
      end;
    end;
  end;

  Result := splitA and splitB;
end;


function TWebGraphGenerator.FindDoors(doors: T2DPointArray; img: TImage): T2DPointArray;
var
  direction: TPoint;
  i, idx: Integer;
  imgBounds: TBox;
  centerPt, testPt1, testPt2: TPoint;
begin
  imgBounds := [0, 0, img.Width - 1, img.Height - 1];
  
  for i := 0 to High(doors) do
  begin
    case Length(doors[i]) of
      4, 8: ;
      else Continue;
    end;

    centerPt := doors[i].Mean();
    direction := Self.GetDoorDirection(centerPt, img);
    if direction = [0,0] then Continue;

    testPt1 := Point(centerPt.X + direction.X, centerPt.Y + direction.Y);
    testPt2 := Point(centerPt.X - direction.X, centerPt.Y - direction.Y);
    
    if not imgBounds.Contains(testPt1) or not imgBounds.Contains(testPt2) then
      Continue;
      
    if (img.Pixel[testPt1.X, testPt1.Y] <> $FFFFFF) or
       (img.Pixel[testPt2.X, testPt2.Y] <> $FFFFFF) then
      Continue;

    if not Self.DoorIsSeparating(centerPt, direction, img) then
      Continue;

    idx := Length(Result);
    SetLength(Result, idx+1);
    Result[idx] += centerPt;
    Result[idx] += centerPt + direction * 2;
    Result[idx] += centerPt - direction * 2;
  end;
end;


(*
## WebGraphGenerator.BuildGraph
```pascal
function TWebGraphGenerator._BuildGraph(map: TImage; white, red: TPointArray): TWebGraph;
function TWebGraphGenerator.BuildGraph(name: String; map: TImage): TWebGraph;
```
Magically builds a webgraph for you for a given collision map passed into `map`.

The collision map can only have 4 colors:
- white ($FFFFFF) for walkable space
- black ($000000) for non walkable space
- red ($0000FF) for doors (optional)
- gray ($333333) for objects (optional)

```{note}
This is an internal method. Don't use it if you don't know what you are doing.
```

It's hard to go into detail on how this works but if you want to see the result
run this example code:
```pascal
{$I WaspLib/osrs.simba}
begin
  Map.Setup([Chunk(Box(49,54,50,53), 0)]);
  Map.Debug();
end.
```

This will setup a map with a small piece of varrock and then open the
{ref}`Map Debugger`.

On the {ref}`Map Debugger` change the dropdown to the collision map if you want
to see what it looks like, that is what will go through this as the `map`
parameter and it should look something like this:

```{figure} ../../images/map_collision.png
```

As a bonus you can also see the resulting webgraph!
*)
function TWebGraphGenerator._BuildGraph(map: TImage; white, red: TPointArray): TWebGraph;
var
  i, j, l, n, hi, len, minLen: Integer;
  cluster, skeleton, nodes, tpa: TPointArray;
  p, q: TPoint;
  tree: TKDPointTree;
  doors: T2DPointArray;
  connectMap: array of TIntegerMatrix;
  doorMap: TIntegerMatrix;
  connectionA, connectionB, ignore: TBooleanArray;
begin
  doors := Self.FindDoors(red.Cluster(1.5), map);
  SetLength(ignore, Length(doors));
  SetLength(connectionA, Length(doors));
  SetLength(connectionB, Length(doors));

  with white.Bounds() do
  begin
    SetLength(connectMap, Y2, X2);
    SetLength(doorMap, Y2, X2);
  end;

  minLen := Self.MinimumTiles * RSTranslator.TileArea;

  for cluster in white.Cluster(1).SortBySize(True) do
  begin
    for j := 0 to High(doors) do
    begin
      connectionA[j] := cluster.Contains(doors[j,1]);
      connectionB[j] := cluster.Contains(doors[j,2]);
      ignore[j] := connectionA.Last and connectionB.Last;
    end;

    if Length(cluster) <= minLen then
      Continue;

    with cluster.Bounds() do
      if Max(Width, Height) < Self.NodeRadius then
      begin
        Result.Nodes += TGraphNode.Create(cluster.Median());
        hi := High(Result.Nodes);
        SetLength(Result.Paths, hi+1);

        for j := 0 to High(doors) do
        begin
          if ignore[j] then Continue;

          if connectionA[j] or connectionB[j] then
          begin
            n := doorMap[doors[j,0].Y, doors[j,0].X];
            if n = 0 then
            begin
              Result.Nodes += TGraphNode.Create(doors[j,0], EGraphNode.DOOR);
              Result.Paths += [High(Result.Nodes)];
              n := High(Result.Nodes)+1;
              doorMap[doors[j,0].Y, doors[j,0].X] := n;
            end
            else
              ignore[j] := True;

            Result.Paths[hi] += Dec(n);
          end;
        end;

        Continue;
      end;

    skeleton := cluster.Erode(1).Skeleton(2, 6);

    nodes := [];
    for tpa in skeleton.Partition(Self.Spacing) do
      nodes += tpa.Cluster(1.5).Means();

    tree := TKDPointTree.Create(nodes);

    len := Length(Result.Nodes);
    SetLength(Result.Nodes, len + Length(nodes));
    SetLength(Result.Paths, Length(Result.Nodes));

    for i := 0 to High(tree.Data) do
    begin
      p := tree.Data[i].Split;
      for q in tree.KNearest(p, Self.MaxConnections, True) do
      begin
        if Max(Abs(p.X - q.X), Abs(p.Y - q.Y)) > Self.Spacing * 2 then Continue;

        if map.ColorsInLine(p, q, [$0, $FF, $333333]) then
          if map.ColorsInLineEx(p, q, [$0, $FF, $333333]) then
            if cluster.ExtractBox(TBox.Create(Min(p.X, q.X), Min(p.Y, q.Y), Max(p.X, q.X), Max(p.Y, q.Y)).Expand(Self.Spacing div 2)).AStar(p, q, True) = [] then
              Continue;

        connectMap[q.Y,q.X] += i;
      end;
    end;

    for i := 0 to High(tree.Data) do
    begin
      p := tree.Data[i].Split;
      Result.Nodes[i+len] := TGraphNode.Create(p);
      for j in connectMap[p.Y,p.X] do
      begin
        Result.Nodes[j+len] := TGraphNode.Create(tree.Data[j].Split);

        if not Result.Paths[i+len].Contains(j+len) then
          Result.Paths[i+len] += j+len;
        if not Result.Paths[j+len].Contains(i+len) then
          Result.Paths[j+len] += i+len;
      end;
    end;

    for j := 0 to High(doors) do
    begin
      if ignore[j] then Continue;

      if connectionA[j] or connectionB[j] then
      begin
        n := doorMap[doors[j,0].Y, doors[j,0].X];
        if n = 0 then
        begin
          Result.Nodes += TGraphNode.Create(doors[j,0], EGraphNode.DOOR);
          Result.Paths += [High(Result.Nodes)];
          n := High(Result.Nodes)+1;
          doorMap[doors[j,0].Y, doors[j,0].X] := n;
        end
        else
          ignore[j] := True;

        l := Result.Nodes.IndexOf(tree.Nearest(doors[j,0], True));
        Result.Paths[l] += Dec(n);
      end;
    end;
  end;
end;

function TWebGraphGenerator.BuildGraph(name: String; map: TImage): TWebGraph;
var
  white, red, gray, merged, graySubset: TPointArray;
  whiteClusters, grayClusters, mergedClusters: T2DPointArray;
  i, j: Integer;
  t: UInt64;
begin
  white := map.FindColor($FFFFFF, 0);
  red := map.FindColor($0000FF, 0);

  WriteLn GetDebugLn('Generating webgraph for region: ' + name);

  t := GetTimeRunning();
  Result := Self._BuildGraph(map, white, red);

  gray := map.FindColor($333333, 0);

  whiteClusters := white.Cluster(1);
  grayClusters := gray.Cluster(1);

  for i := 0 to High(whiteClusters) do
  begin
    if Length(whiteClusters[i]) <= 6 then Continue;

    graySubset := gray.ExtractBox(whiteclusters[i].Bounds().Expand(80));
    merged := whiteclusters[i] + graySubset;
    mergedClusters := merged.Cluster(1);

    for j := 0 to high(mergedClusters) do
      if mergedClusters[j].Contains(whiteClusters[i][0]) then
      begin
        Result.WalkableClusters += mergedClusters[j];
        Break;
      end;
  end;

  Result.WalkableSpace    := white + gray;
  Result.ObjectClusters   := grayClusters;

  WriteLn GetDebugLn('WebGraphGenerator', 'Generating webgraph took ' + ToStr(Round(((GetTimeRunning()-t)/1000), 2)) + ' seconds.', ELogLevel.SUCCESS);
end;
{$R+}

var
(*
## WebGraphGenerator variable
Global {ref}`TWebGraphGenerator` variable.
*)
  WebGraphGenerator: TWebGraphGenerator;
