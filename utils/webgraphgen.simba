(*
# WebGraph Generator
File responsible for webgraph generation out of collision map images.
*)

{$DEFINE SRLT_WEBGRAPHGEN_INCLUDED}
{$IFNDEF SRLT_UTILS}
  {$I SRLT/utils.simba}
{$ENDIF}

type
  TWebGraphGenerator = record
    Spacing, MinimumTiles, NodeRadius, MaxConnections: Integer;
    WallCrossings, Disabled: Boolean;
  end;

function TWebGraphGenerator.Hash(): String;
var
  data: TIntegerArray;
begin
  data := [Self.Spacing, Self.MinimumTiles, Self.NodeRadius, Self.MaxConnections, Integer(Self.WallCrossings)];
  Result := HashData(EHashAlgo.MD5, @data[0], Length(data));
  SetLength(Result, 6);
end;


function TWebGraphGenerator.GetDoorDirection(const center: TPoint; const img: TImage): TPoint;
begin
  if (img.Pixel[center.X+1, center.Y] = $0000FF) or (img.Pixel[center.X-1, center.Y] = $0000FF) then
    Exit([0,1]);

  if (img.Pixel[center.X, center.Y+1] = $0000FF) or (img.Pixel[center.X, center.Y-1] = $0000FF) then
    Exit([1,0]);

  if (img.Pixel[center.X+1, center.Y+1] = $0000FF) or (img.Pixel[center.X-1, center.Y-1] = $0000FF) then
    Exit([1,-1]);

  if (img.Pixel[center.X+1, center.Y-1] = $0000FF) or (img.Pixel[center.X-1, center.Y+1] = $0000FF) then
    Exit([1,1]);

  Result := [0,0];
end;

function TWebGraphGenerator.DoorIsSeparating(const center, direction: TPoint; const img: TImage): Boolean;
var
  inverted: TPoint;
  i: Integer;
  splitA, splitB: Boolean;
begin
  inverted := direction.Rotate(PI/2, [0,0]);

  for i := 1 to 5 do
    with Point(center.X, center.Y) + (inverted*i) do
    begin
      case img.Pixel[X, Y] of
        $333333, $0:
        begin
          splitA := True;
          Break;
        end;
      end;

      case img.Pixel[X-direction.X, Y-direction.Y] of
        $333333, $0:
        begin
          splitA := True;
          Break;
        end;
      end;

      case img.Pixel[X+direction.X, Y+direction.Y] of
        $333333, $0:
        begin
          splitA := True;
          Break;
        end;
      end;
    end;

  for i := 1 to 5 do
    with Point(center.X, center.Y) - (inverted * i) do
    begin
      case img.Pixel[X, Y] of
        $333333, $0:
        begin
          splitB := True;
          Break;
        end;
      end;

      case img.Pixel[X-direction.X, Y-direction.Y] of
        $333333, $0:
        begin
          splitB := True;
          Break;
        end;
      end;

      case img.Pixel[X+direction.X, Y+direction.Y] of
        $333333, $0:
        begin
          splitB := True;
          Break;
        end;
      end;
    end;

  Result := splitA and splitB;
end;


function TWebGraphGenerator.FindDoors(doors: T2DPointArray; img: TImage): TRSDoorArray;
var
  direction: TPoint;
  i, idx: Integer;
  doorType: ERSDoorType;
begin
  for i := 0 to High(doors) do
  begin
    case Length(doors[i]) of
      4: doorType := ERSDoorType.NORMAL;
      8: doorType := ERSDoorType.WIDE;
      else Continue;
    end;

    with doors[i].Mean() do
    begin
      direction := Self.GetDoorDirection([X,Y], img);
      if direction = [0,0] then Continue;

      if (img.Pixel[X+direction.X, Y+direction.Y] <> $FFFFFF) or
         (img.Pixel[X-direction.X, Y-direction.Y] <> $FFFFFF) then
        Continue;

      if not Self.DoorIsSeparating([X,Y], direction, img) then Continue;

      idx := Length(Result);
      SetLength(Result, idx+1);
      Result[idx].Center := [X,Y];
    end;

    Result[idx].DoorType := doorType;
    Result[idx].Direction := direction;
    Result[idx].Before := Result[idx].Center + direction * 2;
    Result[idx].After  := Result[idx].Center - direction * 2;
  end;
end;



(*
## TRSChunkLoader.BuildGraph
```pascal
function TRSChunkLoader._BuildGraph(map: TMufasaBitmap; white, red: TPointArray): TWebGraphV2;
function TRSChunkLoader.BuildGraph(name: String; map: TMufasaBitmap): TWebGraphV2;
```
Magically builds a webgraph for you for a given collision map passed into `map`.

The collision map can only have 4 colors:
- white ($FFFFFF) for walkable space
- black ($000000) for non walkable space
- red ($0000FF) for doors (optional)
- gray ($333333) for objects (optional)

```{note}
This is an internal method. Don't use it if you don't know what you are doing.
```
*)
function TWebGraphGenerator._BuildGraph(map: TImage; white, red: TPointArray): TWebGraph;
var
  i, j, d, len, hi, minLen: Integer;
  cluster, skeleton, nodes, tpa: TPointArray;
  bounds: TBox;
  p, q: TPoint;
  nodesTree: TSlackTree;
  doors: TRSDoorArray;
  connectionMap: array of TIntegerMatrix;
  connectedDoors: array of record
    After, Before: Boolean;
  end;
  connectA, connectB: TIntegerArray;
begin
  doors := Self.FindDoors(red.ClusterEx(1), map);
  SetLength(connectedDoors, Length(doors));
  with white.Bounds() do
    SetLength(connectionMap, X2, Y2);

  minLen := Self.MinimumTiles * RSTranslator.TileArea;

  for cluster in white.ClusterEx(1).SortBySize(True) do
  begin
    if Length(cluster) <= minLen then Continue; //remove very small spaces

    hi := High(connectedDoors);
    connectA := [];
    connectB := [];

    for d := 0 to hi do
    begin
      if connectedDoors[d].After and connectedDoors[d].Before then
      begin
        Result.Doors += doors[d];
        Delete(doors, d, 1);
        Delete(connectedDoors, d, 1);
        hi -= 1;
        d -= 1;
        Continue;
      end;

      if not connectedDoors[d].After and cluster.Contains(doors[d].After) then
        connectA += d;
      if not connectedDoors[d].Before and cluster.Contains(doors[d].Before) then
        connectB += d;
    end;

    bounds := cluster.Bounds();

    if Max(bounds.Width, bounds.Height) < Self.NodeRadius then
    begin
      Result.Nodes += cluster.Median(); //mark spaces less than NodeRadius with a single node and continue

      for d in connectA do
      begin
        Result.Nodes += doors[d].After;
        connectedDoors[d].After := True;
        SetLength(Result.Paths, Length(Result.Nodes));
        Result.Paths[High(Result.Nodes)-1] := [High(Result.Nodes)];
        Result.Paths[High(Result.Nodes)] := [High(Result.Nodes)-1];
      end;

      for d in connectB do
      begin
        Result.Nodes += doors[d].Before;
        connectedDoors[d].Before := True;
        SetLength(Result.Paths, Length(Result.Nodes));
        Result.Paths[High(Result.Nodes)-1] := [High(Result.Nodes)];
        Result.Paths[High(Result.Nodes)] := [High(Result.Nodes)-1];
      end;

      Continue;
    end;

    skeleton := cluster.Erode(1).Skeleton(2, 6);

    nodes := [];
    for tpa in skeleton.Partition(Self.Spacing) do
      nodes += tpa.ClusterEx(1.5).Means();

    for d in connectA do
    begin
      nodes += doors[d].After;
      connectedDoors[d].After := True;
    end;

    for d in connectB do
    begin
      nodes += doors[d].Before;
      connectedDoors[d].Before := True;
    end;

    nodesTree := TSlackTree.Create(nodes);

    len := Length(Result.Nodes);
    SetLength(Result.Nodes, len + Length(nodes));
    SetLength(Result.Paths, Length(Result.Nodes));

    for i := 0 to High(nodesTree.Data) do
    begin
      p := nodesTree.Data[i].Split;
      for q in nodesTree.KNearest(p, Self.MaxConnections, True) do
      begin
        if Max(Abs(p.X - q.X), Abs(p.Y - q.Y)) > Self.Spacing * 2 then Continue;

        if map.ColorsInLine(p, q, [$0, $FF, $333333]) then
          if map.ColorsInLineEx(p, q, [$0, $FF, $333333]) then
            if cluster.ExtractBox(TBox.Create(Min(p.X, q.X), Min(p.Y, q.Y), Max(p.X, q.X), Max(p.Y, q.Y)).Expand(Self.Spacing div 2)).AStar(p, q, True) = [] then
              Continue;

        connectionMap[q.X, q.Y] += i;
      end;
    end;

    for i := 0 to High(nodesTree.Data) do
    begin
      p := nodesTree.Data[i].Split;
      Result.Nodes[i+len] := p;
      for j in connectionMap[p.X, p.Y] do
      begin
        Result.Nodes[j+len] := nodesTree.Data[j].Split;

        if not Result.Paths[i+len].Contains(j+len) then
          Result.Paths[i+len] += j+len;
        if not Result.Paths[j+len].Contains(i+len) then
          Result.Paths[j+len] += i+len;
      end;
    end;
  end;

  SetLength(Result.Names, Length(Result.Nodes));
end;

function TWebGraphGenerator._BuildGraph2(map: TImage; white, red: TPointArray): TWebGraph;
var
  a, b, i, j, n, d, len, hi: Integer;
  atpa, parts: T2DPointArray;
  skeleton, nodes, tpa, doorsInTpa, doorNodes: TPointArray;
  bounds: TBox;
  p, q: TPoint;
  nodesTree, skeletonTree: TSlackTree;
  jInRange, nInRange: Boolean;
  connectionMap: array of TIntegerMatrix;
  doors: TRSDoorArray;
  door: TRSDoor;
  doorPaths: T2DIntegerArray;
  connectedDoors: array of record
    After, Before: Boolean;
  end;
  connectA, connectB: TIntegerArray;
  dists: TDoubleArray;
begin
  atpa := white.ClusterEx(1).SortBySize(True);
  doors := Self.FindDoors(red.ClusterEx(1), map);
  SetLength(connectedDoors, Length(doors));
  with white.Bounds() do
    SetLength(connectionMap, X2, Y2);

  for i := 0 to High(atpa) do
  begin
    if Length(atpa[i]) <= Self.MinimumTiles * RSTranslator.TileArea then
      Continue; //remove very small spaces

    connectA := [];
    connectB := [];

    hi := High(connectedDoors);
    for d := 0 to hi do
    begin
      if connectedDoors[d].After and connectedDoors[d].Before then
      begin
        Result.Doors += doors[d];
        Delete(doors, d, 1);
        Delete(connectedDoors, d, 1);
        hi -= 1;
        d -= 1;
        Continue;
      end;

      if not connectedDoors[d].After and atpa[i].Contains(doors[d].After) then
        connectA += d;
      if not connectedDoors[d].Before and atpa[i].Contains(doors[d].Before) then
        connectB += d;
    end;

    bounds := atpa[i].Bounds();
    if Max(bounds.Width, bounds.Height) < Self.NodeRadius then
    begin
      Result.Nodes += atpa[i].Median(); //mark spaces less than NodeRadius with a single node and continue

      for d in connectA do
      begin
        Result.Nodes += doors[d].After;
        connectedDoors[d].After := True;
        SetLength(Result.Paths, Length(Result.Nodes));
        Result.Paths[High(Result.Nodes)-1] := [High(Result.Nodes)];
        Result.Paths[High(Result.Nodes)] := [High(Result.Nodes)-1];
      end;

      for d in connectB do
      begin
        Result.Nodes += doors[d].Before;
        connectedDoors[d].Before := True;
        SetLength(Result.Paths, Length(Result.Nodes));
        Result.Paths[High(Result.Nodes)-1] := [High(Result.Nodes)];
        Result.Paths[High(Result.Nodes)] := [High(Result.Nodes)-1];
      end;

      Continue;
    end;

    skeleton := atpa[i].Erode(1).Skeleton(2, 6);

    if skeleton = [] then
    begin
      Result.Nodes += atpa[i].Median();

      for d in connectA do
      begin
        Result.Nodes += doors[d].After;
        connectedDoors[d].After := True;
        SetLength(Result.Paths, Length(Result.Nodes));
        Result.Paths[High(Result.Nodes)-1] := [High(Result.Nodes)];
        Result.Paths[High(Result.Nodes)] := [High(Result.Nodes)-1];
      end;

      for d in connectB do
      begin
        Result.Nodes += doors[d].Before;
        connectedDoors[d].Before := True;
        SetLength(Result.Paths, Length(Result.Nodes));
        Result.Paths[High(Result.Nodes)-1] := [High(Result.Nodes)];
        Result.Paths[High(Result.Nodes)] := [High(Result.Nodes)-1];
      end;

      Continue;
    end;

    nodes := [];

    for tpa in skeleton.Partition(Self.Spacing) do
      for tpa in tpa.ClusterEx(1.5) do
        nodes += tpa.Mean();

    for d in connectA do
    begin
      nodes += doors[d].After;
      connectedDoors[d].After := True;
    end;

    for d in connectB do
    begin
      nodes += doors[d].Before;
      connectedDoors[d].Before := True;
    end;

    nodesTree.Init(nodes);
    len := Length(Result.Nodes);
    SetLength(Result.Nodes, len + Length(nodes));
    SetLength(Result.Paths, Length(Result.Nodes));

    for j := 0 to High(nodesTree.Data) do
    begin
      p := nodesTree.Data[j].Split;
      tpa := nodesTree.KNearest(p, Self.MaxConnections, True);

      for q in tpa do
      begin
        if Max(Abs(p.X - q.X), Abs(p.Y - q.Y)) > Self.Spacing * 2 then Continue;

        if map.ColorsInLine(p, q, [$0, $FF, $333333]) then
          if map.ColorsInLineEx(p, q, [$0, $FF, $333333]) then
            if atpa[i].ExtractBox(TBox.Create(Min(p.X, q.X), Min(p.Y, q.Y), Max(p.X, q.X), Max(p.Y, q.Y))).AStar(p, q, True) = [] then
              Continue;

        connectionMap[q.X, q.Y] += j;
      end;
    end;

    for j := 0 to High(nodesTree.Data) do
    begin
      p := nodesTree.Data[j].Split;
      Result.Nodes[j+len] := p;
      for n in connectionMap[p.X, p.Y] do
      begin
        Result.Nodes[n+len] := nodesTree.Data[n].Split;

        if not Result.Paths[j+len].Contains(n+len) then
          Result.Paths[j+len] += n+len;
        if not Result.Paths[n+len].Contains(j+len) then
          Result.Paths[n+len] += j+len;
      end;
    end;
  end;

  SetLength(Result.Paths, Length(Result.Nodes));
  SetLength(Result.Names, Length(Result.Nodes));
end;


function TWebGraphGenerator.BuildGraph(name: String; map: TImage): TWebGraph;
var
  white, red, gray, merged, graySubset: TPointArray;
  whiteClusters, grayClusters, mergedClusters: T2DPointArray;
  i, j: Integer;
  t: UInt64;
begin
  white := map.FindColor($FFFFFF, 0);
  red := map.FindColor($0000FF, 0);

  WriteLn GetDebugLn('Generating webgraph for region: ' + name);

  t := GetTickCount();
  Result := Self._BuildGraph(map, white, red);

  gray := map.FindColor($333333, 0);

  whiteClusters := white.ClusterEx(1);
  grayClusters := gray.ClusterEx(1);

  for i := 0 to High(whiteClusters) do
  begin
    if Length(whiteClusters[i]) <= 6 then Continue;

    graySubset := gray.ExtractBox(whiteclusters[i].Bounds().Expand(80));
    merged := whiteclusters[i] + graySubset;
    mergedClusters := merged.ClusterEx(1);

    for j := 0 to high(mergedClusters) do
      if mergedClusters[j].Contains(whiteClusters[i][0]) then
      begin
        Result.WalkableClusters += mergedClusters[j];
        Break;
      end;
  end;

  Result.WalkableSpace    := white + gray;
  Result.ObjectClusters   := grayClusters;

  WriteLn GetDebugLn('WebGraphGenerator', 'Generating webgraph took ' + ToStr(Round(((GetTickCount()-t)/1000), 2)) + ' seconds.', EErrorLevel.SUCCESS);
end;

var
  WebGraphGenerator: TWebGraphGenerator;

begin
  WebGraphGenerator.Spacing := 18;         //low = better/slower, high = worse/faster
  WebGraphGenerator.MinimumTiles := 4;     //spaces with less tiles than this will be ignored.
  WebGraphGenerator.NodeRadius := 50;      //closed space less than NodeRadius pixels will have a single node.
  WebGraphGenerator.MaxConnections := 6;   //Max connections per node.
  WebGraphGenerator.WallCrossings := True; //Whether to allow wall crossings when there's a close path around it.
end;
