{$DEFINE SRLT_MISC_INCLUDED}
{$IFNDEF SRLT_UTILS}
  {$I SRLT/utils.simba}
{$ENDIF}

type
  RSColors = record
    const ITEM_SHADOW: TColor = $202030;
    const ITEM_SHADOW_GRAY: TColor = $333333;
    const ITEM_BORDER: TColor = $010000;
    const ITEM_BORDER_WHITE: TColor = $FFFFFF;

    const STACK_YELLOW: TColor = $00FFFF;
    const STACK_WHITE: TColor  = $FFFFFF;
    const STACK_GREEN: TColor  = $80FF00;
    const STACK_COLORS: TColorArray = [$00FFFF, $FFFFFF, $80FF00];

    const TEXT_ORANGE: TColor = $1F98FF;
    const TEXT_GREY: TColor   = $9F9F9F;
  end;

function RSColors.HasItem(const bounds: TBox): Boolean; static;
begin
  Result := Target.HasColor(RSColors.ITEM_BORDER, 0, 1, bounds) or
            Target.HasColor(RSColors.ITEM_BORDER_WHITE, 0, 1, bounds);
end;

(*
## Level2XP
```pascal
function Level2XP(level: Integer): Integer;
```
Converts a level to the xp required for that level.

Example:
```pascal
  WriteLn Level2XP(70);
```
*)
function Level2XP(const level: Integer): Integer;
var
  total:Double;
  i:Int32;
begin
  for i := 1 to level-1 do
    total += Floor(i + 300 * 2 ** (i / 7));
  Result := Floor(total / 4);
end;

(*
## XP2Level
```pascal
function XP2Level(xp: Integer): Integer;
```
Converts XP to the respective level.

Example:
```pascal
  WriteLn XP2Level(100000);
```
*)
function XP2Level(const xp: Integer): Integer;
var
  total: Double;
begin
  while (total < xp*4+1) do
  begin
    Inc(Result);
    total += Floor(Result + 300 * 2 ** (Result / 7));
  end;
end;

function TStringArray.AnyContains(const value: String; const caseSensitive: Boolean = True): Boolean;
var
  i: Integer;
begin
  for i := 0 to High(Self) do
    if Self[i].Contains(value, caseSensitive) then
      Exit(True);
end;


function TImage.ColorsInLine(start, stop: TPoint; colors: TIntegerArray): Boolean;
var
  x, y: Integer;
  pXCross, pYCross, qXCross, qYCross: Boolean;
begin
  for x := Min(start.X, stop.X) to Max(start.X, stop.X) do
  begin
    if not pXCross then pXCross := Self.Pixel[x, start.Y] in colors;
    if not qXCross then qXCross := Self.Pixel[x, stop.Y] in colors;
    if pXCross and qXCross then Exit(True);
  end;

  for y := Min(start.Y, stop.Y) to Max(start.Y, stop.Y) do
  begin
    if not pYCross then pYCross := Self.Pixel[start.X, y] in colors;
    if not qYCross then qYCross := Self.Pixel[stop.X, y] in colors;
    if pYCross and qYCross then Exit(True);
  end;

  Result := (pXCross and pYCross) or (qXCross and qYCross);
end;
