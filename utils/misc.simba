(*
# Misc
Misc functions and methods that don't really fit in a single place at the moment
*)
{$DEFINE WL_MISC_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
(*
## RSColors
```pascal
RSColors.ITEM_SHADOW
RSColors.ITEM_SHADOW_GRAY
RSColors.ITEM_BORDER
RSColors.INTERFACE_BORDER
RSColors.ITEM_BORDER_WHITE
RSColors.STACK_YELLOW
RSColors.STACK_WHITE
RSColors.STACK_GREEN
RSColors.STACK_COLORS
RSColors.TEXT_WHITE
RSColors.TEXT_ORANGE
RSColors.TEXT_GREY
RSColors.TEXT_GREEN
RSColors.TEXT_YELLOW
RSColors.TEXT_RED
RSColors.TEXT_LIGHT_YELLOW
```
Record holding a collection of constant colors used throughout the game.
*)
  RSColors = record
    const ITEM_SHADOW: TColor = $202030;
    const ITEM_SHADOW_GRAY: TColor = $333333;
    const ITEM_BORDER: TColor = $010000;
    const INTERFACE_BORDER: TColor = $010000;
    const ITEM_BORDER_WHITE: TColor = $FFFFFF;

    const STACK_YELLOW: TColor = $00FFFF;
    const STACK_WHITE: TColor  = $FFFFFF;
    const STACK_GREEN: TColor  = $80FF00;
    const STACK_COLORS: TColorArray = [$00FFFF, $FFFFFF, $80FF00];

    const TEXT_WHITE: TColor = $FFFFFF;
    const TEXT_ORANGE: TColor = $1F98FF;
    const TEXT_GREY: TColor   = $9F9F9F;
    const TEXT_GREEN: TColor = $0DC10D;
    const TEXT_YELLOW: TColor = $00FFFF;
    const TEXT_RED: TColor = $0000FF;
    const TEXT_LIGHT_YELLOW: TColor = $A2D8E4;
  end;

function RSColors.HasItem(bounds: TBox; faded: Boolean = True): Boolean; static;
var
  tolerance: Single;
begin
  if faded then tolerance := 8.5;
  Result := Target.HasColor(RSColors.ITEM_BORDER, tolerance, 1, bounds) or
            Target.HasColor(RSColors.ITEM_BORDER_WHITE, 0, 1, bounds);
end;

(*
## Level2XP
```pascal
function Level2XP(level: Integer): Integer;
```
Converts a level to the xp required for that level.

Example:
```pascal
  WriteLn Level2XP(70);
```
*)
function Level2XP(level: Integer): Integer;
var
  total:Double;
  i:Int32;
begin
  for i := 1 to level-1 do
    total += Floor(i + 300 * 2 ** (i / 7));
  Result := Floor(total / 4);
end;

(*
## XP2Level
```pascal
function XP2Level(xp: Integer): Integer;
```
Converts XP to the respective level.

Example:
```pascal
  WriteLn XP2Level(100000);
```
*)
function XP2Level(xp: Integer): Integer;
var
  total: Double;
begin
  while (total < xp*4+1) do
  begin
    Inc(Result);
    total += Floor(Result + 300 * 2 ** (Result / 7));
  end;
end;


function Colors.Random(): TColor; static;
var
  R, G, B: Byte;
begin
  R := 128 + Random(128);
  G := 128 + Random(128);
  B := 128 + Random(128);
  Result := (B shl 16) or (G shl 8) or R;
end;

function TColorArray.GetRarest(): TColor;
var
  weights: TIntegerArray;
  i,L    : Int32;
begin
  L := High(Self);
  if (L <= 0) then Exit;

  SetLength(weights, L + 1);
  for i := 0 To L do weights[i] := Self.IndicesOf(Self[i]).Length;

  Self.Sort(weights, True);
  Result := Self[0];
end;

function TStringArray.AnyContains(value: String; caseSensitive: Boolean = True): Boolean;
var
  i: Integer;
begin
  for i := 0 to High(Self) do
    if Self[i].Contains(value, caseSensitive) then
      Exit(True);
end;


function TImage.ColorsInLineEx(start, stop: TPoint; colors: TIntegerArray): Boolean;
var
  x, y: Integer;
  pXCross, pYCross, qXCross, qYCross: Boolean;
begin
  for x := Min(start.X, stop.X) to Max(start.X, stop.X) do
  begin
    if not pXCross then pXCross := Self.Pixel[x, start.Y] in colors;
    if not qXCross then qXCross := Self.Pixel[x, stop.Y] in colors;
    if pXCross and qXCross then Exit(True);
  end;

  for y := Min(start.Y, stop.Y) to Max(start.Y, stop.Y) do
  begin
    if not pYCross then pYCross := Self.Pixel[start.X, y] in colors;
    if not qYCross then qYCross := Self.Pixel[stop.X, y] in colors;
    if pYCross and qYCross then Exit(True);
  end;

  Result := (pXCross and pYCross) or (qXCross and qYCross);
end;




//credits: Simba1400/Source/MML/simba.tpa.pas#L2440C10-L2440C21
function TImage.ColorsInLine(start, stop: TPoint; colors: TIntegerArray): Boolean;
var
  Xinc, YInc: Int32;
  TwoDxAccumulatedError, TwoDyAccumulatedError: Integer;
  current, d, twoD: TPoint;
begin
  d := [(stop.X-start.X), (stop.Y-start.Y)];
  twoD := [d.X + d.X, d.Y + d.Y];
  current := start;
  Xinc := 1;
  Yinc := 1;

  if (d.X < 0) then
  begin
    Xinc := -1;
    d.X := - d.X;
    twoD.X := - twoD.X;
  end;

  if (d.Y < 0) then
  begin
    Yinc := -1;
    d.Y := -d.Y;
    twoD.Y := - twoD.Y;
  end;

  if ((d.X = 0) and (D.Y = 0)) then
    Exit;

  if (d.Y <= d.X) then
  begin
    repeat
      Inc(current.X, Xinc);
      Inc(TwoDxAccumulatedError, twoD.Y);
      if (TwoDxAccumulatedError > d.X) then
      begin
        Inc(current.Y, Yinc);
        Dec(TwoDxAccumulatedError, twoD.X);
      end;

      if Self.Pixel[current.X, current.Y] in colors then Exit(True);
    until (current.X = stop.X);

    Exit;
  end;

  repeat
    Inc(current.Y, Yinc);
    Inc(TwoDyAccumulatedError, twoD.X);

    if (TwoDyAccumulatedError > d.Y) then
    begin
      Inc(current.X, Xinc);
      Dec(TwoDyAccumulatedError, twoD.Y);
    end;

    if Self.Pixel[current.X, current.Y] in colors then Exit(True);
  until (current.Y = stop.Y);
end;


function SaveScreenshotEx(folder: String; bounds: TBox = [-1,-1,-1,-1]): String;
var
  path: String;
  img: TImage;
begin
  path := SimbaEnv.ScreenshotsPath + folder + PATH_SEP;
  if not DirCreate(path) then Exit;

  path += TDateTime.CreateFromSystem().ToString(FILE_TIME_FORMAT);

  img := Target.GetImage(bounds);
  if img.Save(path, True) then
    Result := path;
end;
