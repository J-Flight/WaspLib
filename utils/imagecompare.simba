{$DEFINE WL_IMAGECOMPARE_INCLUDED}

type
  TImageMatch = record
    Index: Integer;
    Box: TBox;
    Match: Single;
  end;

  TImageMatchArray = array of TImageMatch;

  TImageCompareFilter = procedure(constref image, template: TImage) of object;

  TImageCompareUtils = record
    Clean: procedure (image, template: TImage) of object;
    Align: function (image, template: TImage): Boolean of object;
    Filter: TImageCompareFilter;
  end;

function TImageCompareUtils.Compare(image, template: TImage; var similarity: Single): Boolean;
var
  match: Single;
  tmp: TImage;
begin
  tmp := image.Copy();

  if @Self.Align <> nil then
    if not Self.Align(tmp, template) then Exit;

  if (template.Width < tmp.Width) or (template.Height < tmp.Height) then
  begin
    similarity := 0;
    Exit;
  end;

  template.SetSize(tmp.Width, tmp.Height);

  if @Self.Clean <> nil then Self.Clean(tmp, template);
  if @Self.Filter <> nil then Self.Filter(tmp, template);

  if similarity = 1 then
    Exit(tmp.Equals(template));

  match := tmp.Compare(template);
  Result := match >= similarity;
  similarity := match;
end;

function TImageCompareUtils.Compare(image: TImage; slot: TBox; out similarity: Single): Boolean; overload;
var
  template: TImage;
begin
  template := Target.GetImage([slot.X1, slot.Y1, slot.X1 + 36, slot.Y2]);
  Result := Self.Compare(image, template, similarity);
end;


function TImageCompareUtils.FindMatch(image: TImage; bounds: TBox; out match: TImageMatch): Boolean;
var
  container: TImage;
  matrix: TSingleMatrix;
  similarity: Single;
begin
  container := Target.GetImage(bounds);
  matrix := MatchTemplate(container, image, ETMFormula.TM_CCOEFF_NORMED);

  with matrix.ArgMax() do
  begin
    similarity := matrix[Y][X];
    if similarity < match.Match then Exit;

    bounds.X1 += X;
    bounds.Y1 += Y;
    bounds.X2 := bounds.X1 + image.Width;
    bounds.Y2 := bounds.Y1 + image.Height;

    match := [0, bounds, similarity];
    Result := True;
  end;
end;
