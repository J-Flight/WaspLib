(*
# MapChunks
Helper enum and functions for a more "human" accessible way of using map chunks.
*)
{$DEFINE WL_RSCHUNKS_INCLUDED}

type
(*
## TRSMapChunk
Helper record to store chunk data with a name associated with.
*)
  TRSMapChunk = record
    Chunk: TBox;
    Planes: TIntegerArray;
  end;
  TRSMapChunkArray = array of TRSMapChunk;

(*
### Chunk
```pascal
function Chunk(b: TBox; planes: TIntegerArray): TRSMapChunk;
function Chunk(b: TBox; plane: Integer): TRSMapChunk; overload;
```
Helper functions to create {ref}`TRSMapChunk`s.
*)
function Chunk(b: TBox; planes: TIntegerArray): TRSMapChunk;
begin
  Result.Chunk := b;
  Result.Planes := planes;
end;

function Chunk(b: TBox; plane: Integer): TRSMapChunk; overload;
begin
  Result := Chunk(b, [plane]);
end;


(*
### TRSMapChunkArray.CreateFromString
```pascal
function TRSMapChunkArray.CreateFromString(str: String): TRSMapChunkArray; static;
```
Creates a `TRSMapChunkArray` from a string. This is quite tolerant but extects
the string to have a certain format.

Some example of valid strings this will be able to handle are:
```
Map.Setup([Chunk(Box(45,51,46,50), 0)]);
Map.Setup([[[45,51,46,50], 0]]);
Map.Setup([[[45,51,46,50], [0,2]]]);
Map.Setup([[[45,51,46,50], [0,2]], Chunk([45,51,46,50], [0]);
Map.SetupChunk(Chunk([45,51,46,50], 0));
[[[45,51,46,50], [0,2]]
[[[45,51,46,50], 2]
45,51,46,50 - 0
```
To put it simply, it will try it's best to parse the string and look for the box
coordinates first and then plane numbers.

It can also handle multiple chunks in a string.

```{note}
While it's very flexible, it does not validate anything. If what you pass in is
not a valid chunk your script will probably crash.

E.G. plane 55 which doesn't exist.
```
*)
function TRSMapChunkArray.CreateFromString(str: String): TRSMapChunkArray; static;
var
  i, j: Integer;
  boxCoords, planes: TIntegerArray;
begin
  str := str.Replace(' ', '');
  i := 1;

  while i < Length(str) do
  begin
    for i to Length(str) do
      if str[i].IsNumeric then
        Break;

    if i = Length(str) then
      Exit;

    boxCoords := [];
    while Length(boxCoords) < 4 do
    begin
      for j := i to Length(str) do
        if not str[j].IsNumeric then
        begin
          boxCoords += StrToInt(str.CopyRange(i, j-1));
          i := j+1;
          if i = Length(str) then
            Exit;
          Break;
        end;
      if j >= Length(str) then
        Exit;
    end;

    planes := [];
    for i to Length(str) do
    begin
      if str[i] = '[' then
      begin
        for j := Inc(i) to Length(str) do
        begin
          WriteLn str[j];
          if not str[j].IsNumeric then
          begin
            planes += StrToInt(str.CopyRange(i, j-1));
            i := j+1;
            if str[j] = ']' then
              Break(2);

          end;
        end;
        Break;
      end;

      if str[i].IsNumeric then
      begin
        for j := i to Length(str) do
        begin
          if not str[j].IsNumeric then
          begin
            planes += StrToInt(str.CopyRange(i, j-1));
            i := j+1;
            Break;
          end;
        end;
        Break;
      end;
    end;

    Result += [[boxCoords[0], boxCoords[1], boxCoords[2], boxCoords[3]], planes.Sorted()];
  end;
end;

type
  ERSChunk = (
    AL_KHARID,
    ARDOUGNE,
    BLAST_FURNACE,
    CASTLE_WARS,
    CATACOMBS_OF_KOUREND,
    CATHERBY,
    CORSAIR_COVE_DUNGEON,
    CRAFTING_GUILD,
    DRAYNOR_VILLAGE,
    EDGEVILLE,
    FALADOR,
    FOSSIL_ISLAND,
    HOSIDIUS_KITCHEN,
    ICEBERG,
    LUMBRIDGE,
    LUNAR_ISLE,
    MINING_GUILD,
    MOTHERLOADE_MINE,
    MYTHS_GUILD,
    PRIFDDINAS,
    ROGUES_DEN,
    RUINS_OF_UNKAH,
    SEERS_VILLAGE,
    STRONGHOLD_SLAYER_CAVE,
    TEMPOROSS_COVE,
    TITHE_FARM,
    VARROCK,
    WINTERTODT
  );

function ERSChunk.Get(planes: TIntegerArray = []): TRSMapChunk;
begin
  case Self of
    ERSChunk.AL_KHARID              : Result := Chunk(Box(50,51,53,48), 0);
    ERSChunk.ARDOUGNE               : Result := Chunk(Box(40,52,41,51), [0,3]);
    ERSChunk.BLAST_FURNACE          : Result := Chunk(Box(29,78,30,77), 0);
    ERSChunk.CASTLE_WARS            : Result := Chunk(Box(37,48,38,47), 0);
    ERSChunk.CATACOMBS_OF_KOUREND   : Result := Chunk(Box(25,157,26,156), 0);
    ERSChunk.CATHERBY               : Result := Chunk(Box(43,54,44,53), 0);
    ERSChunk.CORSAIR_COVE_DUNGEON   : Result := Chunk(Box(29,142,32,140), 1);
    ERSChunk.CRAFTING_GUILD         : Result := Chunk(Box(45,51,46,51), 0);
    ERSChunk.DRAYNOR_VILLAGE        : Result := Chunk(Box(47,51,48,50), 0);
    ERSChunk.EDGEVILLE              : Result := Chunk(Box(48,54,48,54), 0);
    ERSChunk.FALADOR                : Result := Chunk(Box(45,53,47,51), 0);
    ERSChunk.FOSSIL_ISLAND          : Result := Chunk(Box(56,61,60,57), [0,1]);
    ERSChunk.ICEBERG                : Result := Chunk(Box(40,64,42,61), [0,1]);
    ERSChunk.HOSIDIUS_KITCHEN       : Result := Chunk(Box(25,56,26,56), 0);
    ERSChunk.LUMBRIDGE              : Result := Chunk(Box(49,51,50,49), [0,1,2]);
    ERSChunk.LUNAR_ISLE             : Result := Chunk(Box(32,61,33,60), 0);
    ERSChunk.MINING_GUILD           : Result := Chunk(Box(46,152,47,151), 0);
    ERSChunk.MOTHERLOADE_MINE       : Result := Chunk(Box(57,89,59,87), [0,1] );
    ERSChunk.MYTHS_GUILD            : Result := Chunk(Box(38,44,38,44), [0,1,2]);
    ERSChunk.PRIFDDINAS             : Result := Chunk(Box(50,95,51,94), 0);
    ERSChunk.ROGUES_DEN             : Result := Chunk(Box(46,79,47,77), 1);
    ERSChunk.RUINS_OF_UNKAH         : Result := Chunk(Box(48,44,49,44), 0);
    ERSChunk.SEERS_VILLAGE          : Result := Chunk(Box(41,55,43,53), [0,2]);
    ERSChunk.STRONGHOLD_SLAYER_CAVE : Result := Chunk(Box(37,153,38,152), 0);
    ERSChunk.TEMPOROSS_COVE         : Result := Chunk(Box(47,46,47,46), 0);
    ERSChunk.TITHE_FARM             : Result := Chunk(Box(27,55,28,54), 0);
    ERSChunk.VARROCK                : Result := Chunk(Box(48,55,51,51), 0);
    ERSChunk.WINTERTODT             : Result := Chunk(Box(24,63,26,61), 0);
  end;

  if planes <> [] then Result.Planes := planes;
end;

function ERSChunk.Name(): String;
begin
  Result := ToStr(Self).After('ERSChunk.').Replace('_', ' ').ToLower().Capitalize();
end;


type
(*
## EBankChunk
EBankChunk is a enumerator that contains all bank chunks supported by WaspLib.
*)
  EBankChunk = enum(
    AL_KHARID,
    ARDOUGNE,
    CASTLE_WARS,
    CATHERBY,
    CRAFTING_GUILD,
    DRAYNOR_VILLAGE,
    EDGEVILLE,
    FALADOR,
    GRAND_EXCHANGE,
    LUNAR_ISLE,
    MINING_GUILD,
    PRIFDDINAS,
    SEERS_VILLAGE,
    VARROCK,
    WINTERTODT,
    FOSSIL_ISLAND
  );

function EBankChunk.Name(): String;
begin
  Result := ToStr(Self).After('ERSChunk.').Replace('_', ' ').ToLower().Capitalize();
end;

function EBankChunk.Get(): TRSMapChunk;
begin
  case Self of
    EBankChunk.AL_KHARID:       Result := ERSChunk.AL_KHARID.Get();
    EBankChunk.ARDOUGNE:        Result := ERSChunk.ARDOUGNE.Get();
    EBankChunk.CASTLE_WARS:     Result := ERSChunk.CASTLE_WARS.Get();
    EBankChunk.CATHERBY:        Result := ERSChunk.CATHERBY.Get();
    EBankChunk.CRAFTING_GUILD:  Result := ERSChunk.CRAFTING_GUILD.Get();
    EBankChunk.DRAYNOR_VILLAGE: Result := ERSChunk.DRAYNOR_VILLAGE.Get();
    EBankChunk.EDGEVILLE:       Result := ERSChunk.EDGEVILLE.Get();
    EBankChunk.FALADOR:         Result := ERSChunk.FALADOR.Get();
    EBankChunk.GRAND_EXCHANGE:  Result := ERSChunk.VARROCK.Get();
    EBankChunk.LUNAR_ISLE:      Result := ERSChunk.LUNAR_ISLE.Get();
    EBankChunk.MINING_GUILD:    Result := ERSChunk.MINING_GUILD.Get();
    EBankChunk.PRIFDDINAS:      Result := ERSChunk.PRIFDDINAS.Get();
    EBankChunk.SEERS_VILLAGE:   Result := ERSChunk.SEERS_VILLAGE.Get();
    EBankChunk.VARROCK:         Result := ERSChunk.VARROCK.Get();
    EBankChunk.WINTERTODT:      Result := ERSChunk.WINTERTODT.Get();
    EBankChunk.FOSSIL_ISLAND:   Result := ERSChunk.FOSSIL_ISLAND.Get();
  end;
end;
