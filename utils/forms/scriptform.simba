(*
# Script Form
{ref}`Script Form` is a opinionated, `TLazForm` that you can setup and run in
a just a few lines.
*)
{$DEFINE WL_SCRIPTFORM_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
  TScriptForm = record
    Form: TLazForm;
    PageControl: TLazPageControl;
    Start: TLazButton;
  end;

(*
## Built-in Callbacks
{ref}`TScriptForm` has several built-in callbacks setup by default:
*)

(*
### ScriptForm.OnClose
```pascal
procedure TScriptForm.OnClose(sender: TObject; var closeAction: ELazFormCloseAction);
```
Callback called when the `TScriptForm.Form.OnClose` procedure.
This ensures the script is terminated when you close the form.

Closing the form programatically with `ScriptForm.Form.Close()` will also
terminate your script by default if you don't want this you will need to do
something similar to what {ref}`ScriptForm.OnStart` which does the following
when it runs:
```pascal
ScriptForm.Form.OnClose := nil;
ScriptForm.Form.Close();
```
*)
procedure TScriptForm.OnClose({$H-}sender: TObject;{$H+} var closeAction: ELazFormCloseAction);
begin
  case closeAction of
    ELazFormCloseAction.Minimize :;
    else TerminateScript();
  end;
end;

(*
### ScriptForm.OnStart
```pascal
procedure TScriptForm.OnStart(sender: TObject);
```
This callback is ran on the `TScriptForm.Start.OnClick` procedure.
By default, it's only used to close/hide the form and ensure that
{ref}`ScriptForm.OnClose` doesn't run.

The recommended usage for scripts would be to override this to setup your script
variables when it runs before calling `inherited`, something like this:

Example:
```pascal
procedure TScriptForm.StartScript(sender: TObject); override;
begin
  CurrentTask := ETask(Self.TaskSelector.GetItemIndex());
  inherited;
end;
```
*)
procedure TScriptForm.OnStart({$H-}sender: TObject);{$H+}
begin
  Self.Form.OnClose := nil;
  Self.Form.Close();
end;


(*
## TScriptForm.Setup
```pascal
procedure TScriptForm.Setup(caption: String = 'Script Form'; size: TPoint = [750, 500]; allowResize: Boolean = False);
```
Responsible for setting your TScriptForm up.
This sets up the sekeleton of your TScriptForm ready to take in tabs.
*)
procedure TScriptForm.Setup(caption: String = SCRIPT_FILE + ' Form');
var
  panel: TLazPanel;
  lbl: TLazLabel;
begin
  Self.Form := TLazForm.Create();
  Self.Form.Caption := caption;
  Self.Form.Width := 800;
  Self.Form.Height := 600;

  Self.Form.Constraints.MaxWidth := 800;
  Self.Form.Constraints.MinWidth := 800;
  Self.Form.Constraints.MaxHeight := 600;
  Self.Form.Constraints.MinHeight := 600;

  Self.Form.Position := ELazFormPosition.ScreenCenter;
  Self.Form.OnClose  := @Self.OnClose;

  Self.PageControl := TLazPageControl.Create(Self.Form);
  Self.PageControl.Parent := Self.Form;
  Self.PageControl.Align := ELazAlign.Client;

  panel := TLazPanel.Create(Self.Form);
  panel.Parent := Self.Form;
  panel.Align := ELazAlign.Bottom;
  panel.Height := 30;

  lbl := TLazLabel.Create(panel);
  lbl.Parent := panel;
  lbl.Caption := 'https://waspscripts.com';
  lbl.Align := ELazAlign.Left;
  lbl.BorderSpacing.Around := 4;
  lbl.BorderSpacing.Left := 12;
  lbl.SetURL();

  Self.Start := TLazButton.Create(panel);
  Self.Start.Parent := panel;
  Self.Start.Caption := 'Start';
  Self.Start.Align := ELazAlign.Right;
  Self.Start.OnClick := @Self.OnStart;
  Self.Start.BorderSpacing.Around := 2;
  Self.Start.BorderSpacing.Right := 12;
end;

(*
## TScriptForm.AddTab
```pascal
procedure TScriptForm.AddTab(caption: String);
procedure TScriptForm.AddTab(tab: TTabSheet); overload;
procedure TScriptForm.AddTabArray(captions: TStringArray);
```
Methods to add tabs to `TScriptForm`.

When you a tab by **caption** be it a single one or an array of them, the caption you use can be used
to reference the tab later.

It's **caption** get sanitized with:
```pascal
LowerCase(StringReplace(caption, ' ', '_', [rfReplaceAll]))
```

Which means that if you "HelLo WOrLD" as your **caption**, it's name internally will become "hello_world_settings".
This is only important if you need to retrieve the tab with the use of **Self.Form.GetChild()**.
If you use the other tab methods you simply have to write the **caption** name the same way you did the first time.
Your tab will also be added to **TScriptForm.Tabs** as the last element of the array and you can get it right after adding it with **MyForm.Tabs[High(MyForm.Tabs)]**.

This example as a very simple setup of a TScriptForm with one tab:

Example:
```pascal
procedure TMyScriptForm.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Setup('HELLO WORLD SCRIPT');
  Self.Start.setOnClick(@Self.StartScript);

  Self.AddTab('Script Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  inherited;
end;
```
*)
function TScriptForm.CreateTab(caption: String): TLazTabSheet;
begin
  Result := TLazTabSheet.Create(Self.PageControl);
  Result.Parent := Self.PageControl;
  Result.Caption := caption;
end;


(*
## TScriptForm.Show
```pascal
procedure TScriptForm.Show();
```
Shows your TScriptForm after it has been setup. To run this you have to use **Sync()**

Example:
```pascal
Sync(@MyForm.Show);
```
*)
procedure TScriptForm.Run();
begin
  try
    Self.Form.ShowModal();
  finally
    Self.Form.Free();
  end;
end;
