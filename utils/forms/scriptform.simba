(*
# Script Form
{ref}`Script Form` is a opinionated, `TLazForm` that you can setup and run in
a just a few lines.
```{figure} ../../images/basic_scriptform.png
A very basic `TScriptForm` with 3 tabs
```
This page is only about the very base of `TScriptForm`.

For information about pre-built panels you can find them on these pages:
- {ref}`House Form`
-
-
*)
{$DEFINE WL_SCRIPTFORM_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
(*
## TScriptForm
Main type for the {ref}`TScriptForm`.
*)
  TScriptForm = record
    Form: TLazForm;
    PageControl: TLazPageControl;
    Start: TLazButton;

    Goals: record
      Actions, Time, Level: TLazSpinEdit;
    end;

    ConfigData: TJSONItem;
    _FormClosed: Boolean;
  end;

(*
## Built-in Callbacks
{ref}`TScriptForm` has several built-in callbacks setup by default:
*)


(*
### ScriptForm.OnClose
```pascal
procedure TScriptForm.OnClose(sender: TLazObject; var closeAction: ELazFormCloseAction);
```
Callback called when the `TScriptForm.Form.OnClose` procedure.
This ensures the script is terminated when you close the form.

Closing the form programatically with `ScriptForm.Form.Close()` will also
terminate your script by default if you don't want this you will need to do
something similar to what {ref}`ScriptForm.OnStart` which does the following
when it runs:
```pascal
ScriptForm.Form.OnClose := nil;
ScriptForm.Form.Close();
```
*)
{$H-}
procedure TScriptForm.OnClose(sender: TLazObject; var closeAction: ELazFormCloseAction);
begin
  Self._FormClosed := True;
end;
{$H+}

(*
### ScriptForm.OnStart
```pascal
procedure TScriptForm.OnStart(sender: TLazObject);
```
This callback is ran on the `TScriptForm.Start.OnClick` procedure.
By default, it's only used to close/hide the form and ensure that
{ref}`ScriptForm.OnClose` doesn't run.

The recommended usage for scripts would be to override this to setup your script
variables when it runs before calling `inherited`, something like this:

Example:
```pascal
procedure TScriptForm.StartScript(sender: TLazObject); override;
begin
  CurrentTask := ETask(Self.TaskSelector.GetItemIndex());
  inherited;
end;
```
*)
procedure TScriptForm.OnStart(sender: TLazObject);
begin
  TLazForm(sender).OnClose := nil;
  TLazForm(sender).Close();

  if (Self.Goals.Actions <> nil) then
  begin
    if Self.ConfigData.Has('goal_actions') then
      Self.ConfigData.Item['goal_actions'].AsInt := Self.Goals.Actions.Value
    else
      Self.ConfigData.AddInt('goal_actions', Self.Goals.Actions.Value);
  end;

  if (Self.Goals.Time <> nil) then
  begin
    if Self.ConfigData.Has('goal_time') then
      Self.ConfigData.Item['goal_time'].AsInt := Self.Goals.Time.Value
    else
      Self.ConfigData.AddInt('goal_time', Self.Goals.Time.Value);
  end;

  if (Self.Goals.Level <> nil) then
  begin
    if Self.ConfigData.Has('goal_level') then
      Self.ConfigData.Item['goal_level'].AsInt := Self.Goals.Level.Value
    else
      Self.ConfigData.AddInt('goal_level', Self.Goals.Level.Value);
  end;
end;



(*
## ScriptForm.Setup
```pascal
procedure TScriptForm.Setup(caption: String = 'Script Form'; size: TPoint = [750, 500]; allowResize: Boolean = False);
```
Responsible for setting your TScriptForm up.
This sets up the sekeleton of your TScriptForm ready to take in tabs.
*)
procedure TScriptForm.Setup(caption: String = 'WaspLib'; configData: TJSONItem = nil);
var
  panel: TLazPanel;
begin
  ProfileForm.Setup();
  
  Self.Form := TLazForm.Create();

  Self.Form.Caption := caption + ' Settings';
  Self.Form.Width := 800;
  Self.Form.Height := 600;

  Self.Form.Constraints.MaxWidth := Self.Form.Width;
  Self.Form.Constraints.MinWidth := Self.Form.Width;
  Self.Form.Constraints.MaxHeight := Self.Form.Height;
  Self.Form.Constraints.MinHeight := Self.Form.Height;

  Self.Form.Position := ELazFormPosition.ScreenCenter;
  Self.Form.OnClose  := @Self.OnClose;

  Self.PageControl := TLazPageControl.CreateEx(Self.Form);
  Self.PageControl.Align := ELazAlign.Client;
  Self.PageControl.Width := 800;
  Self.PageControl.Height := 570;

  panel := TLazPanel.CreateEx(Self.Form);
  panel.Align := ELazAlign.Bottom;
  panel.Height := 40;

  ProfileForm.SetupUI(panel);

  // Start button
  Self.Start := TLazButton.CreateEx(panel, 'Start', '', 0, 0, Floor(80 * FormUtils.Scale));
  Self.Start.Align := ELazAlign.Right;
  Self.Start.OnClick := @Self.OnStart;
  Self.Start.BorderSpacing.Top    := 3;
  Self.Start.BorderSpacing.Left   := 3;
  Self.Start.BorderSpacing.Right  := 6;
  Self.Start.BorderSpacing.Bottom := 3;

  Self.ConfigData := configData;
end;

(*
## ScriptForm.CreateTab
```pascal
function TScriptForm.CreateTab(caption: String): TLazTabSheet;
```
Methods to create and add tabs to `TScriptForm`.

This will create a new tab on the form and return it to you as the result so you
add controls to it.

Example:
```pascal
{$I WaspLib/osrs.simba}

var
  form: TScriptForm;
  selector: TLazCombobox;
  tab: TLazTabSheet;
begin
  form.Setup();
  tab := form.CreateTab('House');
  selector := TLazComboBox.CreateEx(tab);
  form.Run();
end.
```
*)
function TScriptForm.CreateTab(caption: String): TLazTabSheet;
var
  w, h: Integer;
begin
  w := Round(Self.PageControl.Width / FormUtils.Scale);
  h := Round(Self.PageControl.Height / FormUtils.Scale);

  Result := Self.PageControl.AddTab();
  Result.Caption := caption;
  Result.Width := w;
  Result.Height := h;

  Self.PageControl.ActiveTabIndex := 0;
end;

(*
## ScriptForm.AddTab
```pascal
procedure TScriptForm.AddTab(owner: Pointer);
```
Adds an already existing `TLazTabSheet` to the `TScriptForm`.
*)
procedure TScriptForm.AddTab(tab: TLazTabSheet);
begin
  tab.Parent := Self.PageControl;
  Self.PageControl.InsertComponent(tab);
end;


function TScriptForm.CreateGoals(owner: Pointer; actions, time, level: Boolean = True; orientation: EOrientation = EOrientation.VERTICAL): TLazPanel;
var
  lbl: TLazLabel;
  y, size: Integer;
begin
  case orientation of
    EOrientation.HORIZONTAL:
    begin
      Result := TLazPanel.CreateEx(owner, 0, 0, 0, 40);

      if level then
      begin
        Self.Goals.Level := TLazSpinEdit.CreateEx(Result, '', 'Maximum level for the bot to stop.', 0, 0, 80);
        Self.Goals.Level.MinValue := 0;
        Self.Goals.Level.MaxValue := 99;
        Self.Goals.Level.Align := ELazAlign.Left;
        Self.Goals.Level.BorderSpacing.Around := 8;
        lbl := TLazLabel.CreateEx(Result, 'Stop after level', 'Maximum level for the bot to stop.');
        lbl.Align := ELazAlign.Left;
        lbl.BorderSpacing.Top    := 10;
        lbl.BorderSpacing.Bottom := 10;
        lbl.BorderSpacing.Left   := 30;
        lbl.BorderSpacing.Right  := 5;
        size += 234;
      end;

      if time then
      begin
        lbl := TLazLabel.CreateEx(Result, 'minutes', 'Maximum amount of time in minutes for the bot to stop.');
        lbl.Align := ELazAlign.Left;
        lbl.BorderSpacing.Top    := 10;
        lbl.BorderSpacing.Bottom := 10;
        lbl.BorderSpacing.Left   := 5;
        lbl.BorderSpacing.Right  := 30;
        Self.Goals.Time := TLazSpinEdit.CreateEx(Result, '', 'Maximum amount of time in minutes for the bot to stop.', 0, 0, 80);
        Self.Goals.Time.Align := ELazAlign.Left;
        Self.Goals.Time.BorderSpacing.Around := 8;
        lbl := TLazLabel.CreateEx(Result, 'Stop after', 'Maximum amount of time in minutes for the bot to stop.');
        lbl.Align := ELazAlign.Left;
        lbl.BorderSpacing.Top    := 10;
        lbl.BorderSpacing.Bottom := 10;
        lbl.BorderSpacing.Left   := 30;
        lbl.BorderSpacing.Right  := 5;
        size += 234;
      end;

      if actions then
      begin
        lbl := TLazLabel.CreateEx(Result, 'actions', 'Maximum amount of actions for the bot to stop.');
        lbl.Align := ELazAlign.Left;
        lbl.BorderSpacing.Top    := 10;
        lbl.BorderSpacing.Bottom := 10;
        lbl.BorderSpacing.Left   := 5;
        lbl.BorderSpacing.Right  := 30;
        Self.Goals.Actions := TLazSpinEdit.CreateEx(Result, '', 'Maximum amount of actions for the bot to stop.', 0, 0, 80);
        Self.Goals.Actions.Align := ELazAlign.Left;
        Self.Goals.Actions.BorderSpacing.Around := 8;
        lbl := TLazLabel.CreateEx(Result, 'Stop after', 'Maximum amount of actions for the bot to stop.');
        lbl.Align := ELazAlign.Left;
        lbl.BorderSpacing.Top    := 10;
        lbl.BorderSpacing.Bottom := 10;
        lbl.BorderSpacing.Left   := 30;
        lbl.BorderSpacing.Right  := 5;
        size += 234;
      end;

      Result.Width := size;
    end;

    EOrientation.VERTICAL:
    begin
      Result := TLazPanel.CreateEx(owner, 0, 0, 240, 0);
      y := 10;

      if actions then
      begin
        lbl := TLazLabel.CreateEx(Result, 'Stop after', 'Maximum amount of actions for the bot to stop.', 10, y);
        Self.Goals.Actions := TLazSpinEdit.CreateEx(Result, '', 'Maximum amount of actions for the bot to stop.', 0, 0, 80);
        Self.Goals.Actions.AnchorHorizontally(lbl, 34);
        Self.Goals.Actions.BorderSpacing.Top := -2;
        lbl := TLazLabel.CreateEx(Result, 'actions', 'Maximum amount of actions for the bot to stop.');
        lbl.AnchorHorizontally(Self.Goals.Actions, 5);
        lbl.BorderSpacing.Top := 2;
        y += 30;
        size += 34;
      end;

      if time then
      begin
        lbl := TLazLabel.CreateEx(Result, 'Stop after', 'Maximum amount of time in minutes for the bot to stop.', 10, y);
        Self.Goals.Time := TLazSpinEdit.CreateEx(Result, '', 'Maximum amount of time in minutes for the bot to stop.', 0, 0, 80);
        Self.Goals.Time.AnchorHorizontally(lbl, 34);
        Self.Goals.Time.BorderSpacing.Top := -2;
        lbl := TLazLabel.CreateEx(Result, 'minutes', 'Maximum amount of time in minutes for the bot to stop.');
        lbl.AnchorHorizontally(Self.Goals.Time, 5);
        lbl.BorderSpacing.Top := 2;
        y += 30;
        size += 34;
      end;

      if level then
      begin
        lbl := TLazLabel.CreateEx(Result, 'Stop after level', 'Maximum level for the bot to stop.', 10, y);
        Self.Goals.Level := TLazSpinEdit.CreateEx(Result, '', 'Maximum level for the bot to stop.', 0, 0, 80);
        Self.Goals.Level.AnchorHorizontally(lbl, 5);
        Self.Goals.Level.BorderSpacing.Top := -2;
        size += 34;
      end;

      Result.Height := size;
    end;
  end;

  Result.BevelWidth := 0;

  if actions and Self.ConfigData.Has('goal_actions') then
    Self.Goals.Actions.Value := Self.ConfigData.Item['goal_actions'].AsInt;
  if time and Self.ConfigData.Has('goal_time') then
    Self.Goals.Time.Value := Self.ConfigData.Item['goal_time'].AsInt;
  if level and Self.ConfigData.Has('goal_level') then
    Self.Goals.Level.Value := Self.ConfigData.Item['goal_level'].AsInt;
end;

(*
## ScriptForm.Run
```pascal
procedure TScriptForm.Run();
```
Runs and shows your `TScriptForm` after it has been setup.
*)
procedure TScriptForm.Run();
begin
  try
    Self.Form.ShowModal();
  except
    WriteLn(GetExceptionMessage());
  finally
    Self.Form.Free();
  end;

  if Self._FormClosed then
    TerminateScript('Thank you for using WaspScripts');
end;
