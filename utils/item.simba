(*
# Item
Page dedicated to runescape items and misc functions related to them.
*)
{$DEFINE WL_ITEM_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

const
  QUANTITY_ALL = 0;
  QUANTITY_ALL_BUT_ONE = 1;

type
  ERSItemQuantity = enum(ONE, FIVE, TEN, CUSTOM, ALL);

(*
## Bank.Integer2Quantity
```pascal
function TRSBank.Integer2Quantity(quantity: Integer): ERSItemQuantity;
```
Internal helper function to convert a integer quantity into a ERSItemQuantity.

Example:
```pascal
WriteLn Bank.Integer2Quantity(5);
WriteLn Bank.Integer2Quantity(7);
```
*)
function ERSItemQuantity.Integer2Quantity(quantity: Integer): ERSItemQuantity; static;
begin
  case quantity of
    1:     Result := ERSItemQuantity.ONE;
    5:     Result := ERSItemQuantity.FIVE;
    10:    Result := ERSItemQuantity.TEN;
    0, -1: Result := ERSItemQuantity.ALL;
    else   Result := ERSItemQuantity.CUSTOM;
  end;
end;

type
  TRSItem = String;
  TRSItemArray = array of TRSItem;

  TRSBankItem = record
    Item: TRSItem;
    Quantity: Integer;
    Noted: Boolean;
  end;

  TRSBankItemArray = array of TRSBankItem;

function TRSItem.HasAmount(): Boolean;
begin
  Result := Self.EndsWith(')', True);
end;

(*
## TRSItem.SimplifyName
```pascal
function TRSItem.SimplifyName(): String;
```
Internal helper function to get a human like short item name, usually to search.

Example:
```pascal
item := 'Amulet of glory(6)';
WriteLn item.SimplifyName();
```
*)
function TRSItem.SimplifyName(): String;
var
  short, long: Integer;
begin
  if Self.Contains(' of ') then
    Result := Self.After(' of ').ToLower()
  else
    Result := Self.ToLower();

  if Result.EndsWith(')') then Result := Result.Before('(');

  long := Length(Result);
  short := Min(0, long - Ceil(long/3));
  Result := Result.CopyRange(0, Random(short, long));
end;

function TRSItem.ToBankItem(quantity: Integer = QUANTITY_ALL_BUT_ONE): TRSBankItem;
begin
  Result.Quantity := quantity;
  Result.Noted := Self.StartsWith('Noted ', False);
  if Result.Noted then Result.Item := Self.After('Noted ')
  else Result.Item := Self;
end;


(*
## GetItemAmountBox
```pascal
function TRSItem.GetItemAmountBox(constref area: TBox): TBox; static;
```
Returns the correct text box of an item's amount text based on the item box.
*)
function TRSItem.GetStackBox(slot: TBox): TBox; static;
begin
  Result := [slot.X1, slot.Y1-1, slot.X1 + 35, slot.Y1 + 11];
end;

(*
## SRL.GetItemAmount
```pascal
function TSRL.GetItemAmount(area: TBox): Int32;
```
For use with items in like bankscreen, inventory, shops and so on to
get the number of stacked items there are.
*)
function TRSItem.ReadStack(slot: TBox): Integer; static;
var
  i: Integer;
begin
  slot := TRSItem.GetStackBox(slot);
  for i := 0 to RSColors.STACK_COLORS.High do
    if Target.HasColor(RSColors.STACK_COLORS[i], 1, 1, slot) then
      Exit(OCR.RecognizeNumber(slot, RSFonts.PLAIN_11, [RSColors.STACK_COLORS[i]], 1) * Round(10 ** (3 * i)));
  Result := -1;
end;

function TRSBankItem.ToItem(): TRSItem;
begin
  Result := Self.Item;
  if Self.Noted then
    Result := 'Noted ' + Result.ToLower();
end;

function TRSBankItem.Create(item: TRSItem; quantity: Integer = QUANTITY_ALL_BUT_ONE): TRSBankItem; static;
begin
  Result := item.ToBankItem(quantity);
end;
