(*
OCR
===
*)
{$DEFINE SRLT_OCR_INCLUDED}
{$INCLUDE_ONCE SRLT/utils.simba}

type
  TOCR = record
    Engine: TPixelOCR;
  end;

function TOCR.RecognizeStatic(bounds: TBox; font: TPixelFont; colors: TColorArray; tolerance: Single): String;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(bounds);
  img.ReplaceColorBinary(False, colors, tolerance);
  Result := Self.Engine.Recognize(img, font, [0,0]);
  img.Free();
end;

function TOCR.RecognizeStaticInvert(bounds: TBox; font: TPixelFont; colors: TColorArray): String;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(bounds);
  img.ReplaceColorBinary(True, colors);
  Result := Self.Engine.Recognize(img, font, [0,0]);
  img.Free();
end;

function TOCR.Recognize(bounds: TBox; font: TPixelFont; colors: TColorArray; tolerance: Single): String;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(bounds);
  img.ReplaceColorBinary(False, colors, tolerance);
  Result := Self.Engine.Recognize(img, Font);
  img.Free();
end;

function TOCR.RecognizeLines(bounds: TBox; font: TPixelFont; colors: TColorArray; tolerance: Single): TStringArray;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(bounds);
  img.ReplaceColorBinary(False, colors, tolerance);
  Result := Self.Engine.RecognizeLines(img, font);
  img.Free();
end;

function TOCR.RecognizeShadow(bounds: TBox; font: TPixelFont; tolerance: Single): String;
var
  image: TImage;
  shadows: TPointArray;
  color: TColor;
begin
  image := TImage.CreateFromTarget(bounds);
  shadows := image.FindColor(0, 2.5, [1, 1, image.Width - 1, image.Height - 1]);
  shadows := Shadows.Offset([-1,-1]).ExcludePoints(shadows);
  color := image.GetColors(shadows).Mode;
  image.ReplaceColorBinary(False, color, tolerance);
  Result := Self.Engine.Recognize(image, font);
  image.Free();
end;

function TOCR.RecognizeNumber(bounds: TBox; font: TPixelFont; colors: TColorArray; tolerance: Single): Integer;
begin
  Result := Self.Recognize(bounds, font, colors, tolerance).ExtractInteger();
end;

function TOCR.Locate(bounds: TBox; Text: String; colors: TColorArray; tolerance: Single; font: TPixelFont): Single;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(bounds);
  img.ReplaceColorBinary(False, colors, tolerance);
  Result := Self.Engine.Locate(img, Font, Text);
  img.Free();
end;

function TOCR.LocateInvert(bounds: TBox; Text: String; colors: TColorArray; tolerance: Single; font: TPixelFont): Single;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(bounds);
  img.ReplaceColorBinary(True, colors, tolerance);
  Result := Self.Engine.Locate(img, Font, Text);
  img.Free();
end;

var
  OCR: TOCR;

type
  TRSFonts = record
    PLAIN_11:       TPixelFont;
    PLAIN_12:       TPixelFont;
    BOLD:           TPixelFont;
    BOLD_SHADOW:    TPixelFont;
    QUILL_8:        TPixelFont;
    QUILL:          TPixelFont;
    const PATH = SRLTEnv.CacheDir + 'fonts' + PATH_SEP;
  end;

procedure TRSFonts.Setup();
begin
  if DirList(Self.PATH) = [] then
  begin
    if not DirCreate(Self.PATH) then
      raise GetDebugLn('OCR', 'Failed to create path: ' + Self.PATH);
    if not ZipExtract({$MACRO DIR} + 'fonts.zip', Self.PATH) then
      raise GetDebugLn('OCR', 'Failed to unzip fonts');
  end;

  Self.PLAIN_11 := OCR.Engine.LoadFont(Self.PATH + 'Plain 11', 4);
  Self.PLAIN_12 := OCR.Engine.LoadFont(Self.PATH + 'Plain 12', 4);

  Self.BOLD        := OCR.Engine.LoadFont(Self.PATH + 'Bold 12', 4);
  Self.BOLD_SHADOW := OCR.Engine.LoadFont(Self.PATH + 'Bold 12 Shadow', 4);

  Self.QUILL_8 := OCR.Engine.LoadFont(Self.PATH + 'Quill 8', 4);
  Self.QUILL   := OCR.Engine.LoadFont(Self.PATH + 'Quill', 4);
end;

var
  RSFonts: TRSFonts;
