{$DEFINE SRLT_BASE_INCLUDED}
{$INCLUDE_ONCE SRLT/utils.simba}

type
  EErrorLevel = enum(SUCCESS, WARN, ERROR);

  TLogger = record
    Name: String;
    Path: String;
    TimeRunning: TStopwatch;
    IsSetup: Boolean;
    ReportNames: TStringArray;
  end;

procedure TLogger._Setup();
var
  files: TStringArray;
  i: Integer;
  date, oldest: TDateTime;
  filename: String;
begin
  Self.Path := SRLTEnv.LogsDir;

  files := DirList(Self.Path);
  if Length(files) > 100 then
  begin
    for i := 0 to High(files) do
    begin
      date := FileCreationTime(files[i]);
      if date > oldest then
      begin
        oldest := date;
        filename := files[i];
      end;
    end;

    if not FileDelete(filename) then
      raise TimeStamp() + ':[Logger]: Failed to delete old log: ' + PathExtractName(filename);
  end;

  if not DirCreate(Self.Path) then
    raise TimeStamp() + ':[Logger]: Failed to create logs directory.';

  Self.Path += 'SRLT_' + Now().ToString('yyyy-mm-dd_hh-mm-ss-ms') + '.log';
  if not FileCreate(Self.Path) then
    raise TimeStamp() + ':[Logger]: Failed to create log file: ' + PathExtractName(Self.Path);

  Self.TimeRunning.Start();
end;

procedure TLogger.Setup(name: String = ''; reportNames: TStringArray = []);
var
  old, str: String;
  i, len: Integer;
begin
  Self.Name := name;
  Self.IsSetup := name <> '';
  old := Self.Path;
  Self.Path := SRLTEnv.LogsDir + name + PATH_SEP;

  if not DirCreate(Self.Path) then
    raise TimeStamp() + ':[Logger]: Failed to create log path: ' + Self.Path;

  Self.Path += Now().ToString('yyyy-mm-dd_hh-mm-ss-ms') + '.log';

  if Self.IsSetup and (old <> Self.Path) then
  begin
    if FileExists(old) then
    begin
      if not FileRename(old, Self.Path) then
        raise TimeStamp() + ':[Logger]: Failed to rename log file: ' + PathExtractName(old) + ' > ' + PathExtractName(Self.Path);
    end;
    if not FileCreate(Self.Path) then
      raise TimeStamp() + ':[Logger]: Failed to create log file: ' + PathExtractName(Self.Path);
  end;

  Self.ReportNames := [];

  for i := 0 to High(reportNames) do
  begin
    if len < Length(reportNames[i]) then
      len := Length(reportNames[i]);
  end;

  len += 2;

  for i := 0 to High(reportNames) do
  begin
    str := reportNames[i] + ': ';
    Self.ReportNames += str.PadRight(len - Length(str), ' ');
  end;
end;

procedure TLogger.AddLine(line: String);
begin
  FileAppend(Self.Path, line + LINE_SEP);
end;

function TLogger.GetTimeRunning(): String;
begin
  Result := Self.TimeRunning.ElapsedFmt();
end;


function TLogger.GetReport(values: TStringArray): String;
var
  i, len: Integer;
  half: Single;
  str, lines, btm, header: String;
begin
  if Length(Self.ReportNames) <> Length(values) then
    raise TimeStamp() + ':[Logger]: `TLogger.ReportNames` and `values` need to be the same length!';

  for i := 0 to High(Self.ReportNames) do
  begin
    str := '║ ' + Self.ReportNames[i] + values[i] + ' ║';
    if len < Length(str) then len := Length(str);
    lines += str + LINE_SEP;
  end;

  btm := '╚' + '═' * (len-2) + '╝';

  str := '🐝WaspScripts🐝';
  half := (len - Length(str)-2)/2;

  header := '╔' + '═' * Floor(half) +  str + '═' * Ceil(half) + '╗';

  Result := header + LINE_SEP + lines + btm;
end;



var
  Logger: TLogger;

function GetDebugLn(text: String; log: Boolean = True): String;
begin
  Result := TimeStamp() + ': ' + text;
  if log then Logger.AddLine(Result);
end;

function GetDebugLn(name, text: String; log: Boolean = True): String; overload;
begin
  Result := TimeStamp() + ':[' + name + ']: ' + text;
  if log then Logger.AddLine(Result);
end;

function GetDebugLn(text: String; level: EErrorLevel; log: Boolean = True): String; overload;
begin
  case level of
    EErrorLevel.SUCCESS: Result := #0#0'000008' + GetDebugLn(text, log);
    EErrorLevel.WARN:    Result := #0#0'000002' + GetDebugLn(text, log);
    EErrorLevel.ERROR:   Result := #0#0'000004' + GetDebugLn(text, log);
  end;
end;

function GetDebugLn(name, text: String; level: EErrorLevel; log: Boolean = True): String; overload;
begin
  case level of
    EErrorLevel.SUCCESS: Result := #0#0'000008' + GetDebugLn(name, text, log);
    EErrorLevel.WARN:    Result := #0#0'000002' + GetDebugLn(name, text, log);
    EErrorLevel.ERROR:   Result := #0#0'000004' + GetDebugLn(name, text, log);
  end;
end;
