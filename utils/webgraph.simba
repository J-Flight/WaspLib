(*
# WebGraph
Responsible for handling webwalking or any other graph logic you may need.
It's partially based on the original webgraph logic by [slacky](https://slacky.one/) but behaves quite
differently to handle different scenarios, e.g. doors.
*)

{$DEFINE WL_WEBGRAPH_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
  ERSDoorType = (NORMAL, WIDE);

  TRSDoor = record
    Before, After, Center, Direction: TPoint;
    DoorType: ERSDoorType;
  end;

  TRSDoorArray = array of TRSDoor;

//This is the number of degrees you need to face the compass to face the door directly.
//It works by selecting the cardinal direction that gives the highest inner product
//with the vector from the tile before the door to the door center.
function TRSDoor.GetDoorAngle(): Single;
const
  NORTH:  TPoint = [0,-1];
  EAST:   TPoint = [1,0];
  SOUTH:  TPoint = [0,1];
  WEST:   TPoint = [-1,0];
  CARDINALS: TPointArray = [NORTH,EAST,SOUTH,WEST];
var
  score, best: Integer;
  cardinal, doorDirection, tmp: TPoint;
begin
  for cardinal in CARDINALS do
  begin
    tmp := Self.Center - RSTranslator.NormalizeDoor(Self.After);
    score :=  cardinal.X * tmp.X + cardinal.Y * tmp.Y;
    if score > best then
    begin
      doorDirection := cardinal;
      best := score;
    end;
  end;

  case doorDirection of
    NORTH: Result := 180;
    WEST: Result := 270;
    SOUTH: Result := 0;
    EAST: Result := 90;
  end;
end;

//Does as the name states. Doesn't support diagonal doors yet
//Might add small randomness to this later (i.e. do doorangle + Random(-10,10) or something similar)
function TRSDoor.GetVisibleAngle(angle: Double; randomness: Integer = 75; allowBackwardsAngle: Boolean = True): Double;
begin
  Result := Self.GetDoorAngle();

  if Abs(Round(DeltaAngle(angle, Result))) < randomness then Exit(angle);
  if Abs(Round(DeltaAngle(angle, Result + 180))) < randomness then Exit(angle);

  Result += Random(-randomness,randomness);
  if RandomBoolean(0.5) and allowBackwardsAngle then Result += 180;

  Result := DegNormalize(Result);
end;

function TRSDoor.GetCorners(corners: TPointArray; doorAngle: Single; compass: Single = $FFFF): TPointArray; static;
var
  diff: Double;
begin
  diff := DeltaAngle(doorAngle, compass);
  diff := Modulo(diff, 180);

  if not InRange(diff, 45, 135) then
    corners.SortByY(False)
  else
    corners.SortByX(not InRange(diff, 45, 90));

  Result := [corners[0], corners[1]];
end;

//draw doors on bitmap
procedure TRSDoorArray.Draw(img: TImage);
var
  door: TRSDoor;
begin
  for door in Self do
  begin
    case door.DoorType of
      ERSDoorType.NORMAL: img.DrawColor := $FF0000;
      ERSDoorType.WIDE: img.DrawColor :=  $FFFF00;
    end;
    img.DrawCross(door.Center, 4);
  end;
end;

procedure TRSDoorArray.Draw(canvas: TImageBoxCanvas); overload;
var
  door: TRSDoor;
begin
  for door in Self do
    case door.DoorType of
      ERSDoorType.NORMAL: canvas.DrawCross(door.Center, 4, $FF0000);
      ERSDoorType.WIDE: canvas.DrawCross(door.Center, 4, $FFFF00);
    end;
end;


function TRSDoorArray.ToBytes(): TByteArray;
var
  len: Integer;
begin
  len := Length(Self) * SizeOf(TRSDoor);
  if len = 0 then Exit;
  SetLength(Result, len);
  Move(Self[0], Result[0], len);
end;

function TRSDoorArray.CreateFromBytes(bytes: TByteArray): TRSDoorArray; static;
var
  len: Integer;
begin
  len := Length(bytes);
  if len = 0 then Exit;
  len := Length(bytes);
  SetLength(Result, len div SizeOf(TRSDoor));
  Move(bytes[0], Result[0], len);
end;



type
  TWebGraph = record
    Nodes: TPointArray;
    Paths: T2DIntegerArray;
    Names: TStringArray;

    Doors: TRSDoorArray;

    Blocking: TIntegerArray;

    WalkableSpace: TPointArray;
    WalkableClusters, ObjectClusters: T2DPointArray;

    UseCollisionData: Boolean;
    Tree: TSlackTree;
  end;

function TWebGraph.Copy(): TWebGraph;
begin
  Result.Blocking := System.Copy(Self.Blocking);
  Result.Names    := System.Copy(Self.Names);
  Result.Nodes    := System.Copy(Self.Nodes);
  Result.Paths    := System.Copy(Self.Paths);
end;


procedure TWebGraph.BlockInside(area: TBox);
var
  i, c: Integer;
begin
  SetLength(Self.Blocking, Length(Self.Nodes));

  for i := 0 to High(Self.Nodes) do
    if area.Contains(Self.Nodes[i]) then
    begin
      Self.Blocking[c] := i;
      Inc(c);
    end;

  SetLength(Self.Blocking, c);
end;

procedure TWebGraph.BlockOutside(Area: TBox);
var
  i, c: Integer;
begin
  SetLength(Self.Blocking, Length(Self.Nodes));

  for i := 0 to High(Self.Nodes) do
    if (not Area.Contains(Self.Nodes[i])) then
    begin
      Self.Blocking[c] := i;
      Inc(c);
    end;

  SetLength(Self.Blocking, c);
end;


function TWebGraph.FindPath(Start, Goal: Integer; Rnd:Double=0): TIntegerArray;
type
  TNode = record
    Indices: TIntegerArray;
    Score: Double;
  end;
var
  queue: array of TNode;
  visited: TBooleanArray;
  cIdx, pathIdx, i: Integer;
  current, node: TNode;
  p, q: TPoint;
  hyp: Double;

  function GetNextShortest(): TNode;
  var i, node: Integer;
  begin
    Result := queue[0];
    for i := 1 to High(queue) do
      if queue[i].Score < Result.Score then
      begin
        node   := i;
        Result := queue[i];
      end;
    Delete(queue, node, 1);
  end;
begin
  queue   := [[[start],0]];
  SetLength(visited, Length(Self.Nodes));

  // block certain paths by marking them as visited
  for i:=0 to High(Self.Blocking) do Visited[Self.Blocking[i]] := True;

  // ...
  while Length(queue) <> 0 do
  begin
    current := GetNextShortest();
    cIdx := current.Indices[High(current.Indices)];
    if Visited[cIdx] then Continue; //skip overwrapping paths..
    Visited[cIdx] := True;

    if (cIdx = Goal) then
      Exit(current.Indices);

    p := Self.Nodes[cIdx];
    for pathIdx in Self.Paths[cIdx] do
    begin
      if not Visited[pathIdx] then
      begin
        q := Self.Nodes[pathIdx];
        node.Indices := current.Indices + pathIdx;

        hyp := Hypot(p.x-q.x, p.y-q.y);
        node.Score   := current.Score + hyp + (hyp*Random()*Rnd-Rnd/2);
        queue += node;
      end;
    end;
  end;
end;

function TWebGraph.FindNearestNode(p: TPoint): Integer;
var
  i,j: Integer;
  d,best,dn1,dn2: Double;
begin
  best := $FFFFFF;
  for i:=0 to High(Self.Paths) do
    for j in Self.Paths[i] do
    begin
      d := DistToLine(p, Self.Nodes[i], Self.Nodes[j]);
      if d < best then
      begin
        best := d;
        dn1 := Hypot(Self.Nodes[i].X-p.X, Self.Nodes[i].Y-p.Y);
        dn2 := Hypot(Self.Nodes[j].X-p.X, Self.Nodes[j].Y-p.Y);
        if dn1 < dn2 then
          Result := i
        else
          Result := j;
      end;
    end;
end;

function TWebGraph.FindNearestNodes(p: TPoint; amount: Integer): TIntegerArray;

var
  i: Integer;
  weights: TIntegerArray;
  tpa: TPointArray;
begin
  if Self.Tree.Size = 0 then
    Self.Tree.Init(System.Copy(Self.Nodes));

  tpa := Self.Tree.KNearest(p, amount);

  for i := 0 to High(tpa) do
  begin
    if not Self.UseCollisionData or Self.WalkableClusters.InSameTPA(p, tpa[i]) then
    begin
      Result += Self.Nodes.IndexOf(tpa[i]);
      weights += Round(p.DistanceTo(tpa[i]));
    end;
  end;

  if Result = [] then
    raise GetDebugLn('WebGraph', 'No near nodes were found around point ' + ToStr(p));

  Result.Sort(weights, True);
end;

function TWebGraph.FindNearestNodesEx(p: TPoint; amount: Integer): TPointArray;
begin
  if Self.Tree.Size = 0 then
  begin
    Self.Tree.Init(System.Copy(Self.Nodes));
    //AddOnTerminate(@Self.Tree.Free);
  end;

  Result := Self.Tree.KNearest(p, amount);
end;


function TWebGraph.NearestWalkablePoint(p: TPoint): TPoint;
var
  pArea, obj, tpa, bestObj: TPointArray;
  pAreaClusters: T2DPointArray;
  i, bestLength, tempLength: Integer;
begin
  pArea := TPointArray.CreateFromCircle(p, 20, True).Intersection(Self.WalkableSpace);
  pAreaClusters := pArea.Cluster(1);

  if Self.ObjectClusters = [] then Exit(pArea.NearestPoint(p));

  obj := [];
  for i := 0 to High(Self.ObjectClusters) do
  begin
    if not Self.ObjectClusters[i].Bounds().Contains(p) then Continue;
    if Self.ObjectClusters[i].Contains(p) then
    begin
      obj := Self.ObjectClusters[i];
      {$IFDEF DEBUG_WALKER}
      WriteLn('Point was inside object! with edges: ', obj);
      {$ENDIF}
      Break;
    end;
  end;

  if obj = [] then Exit(pArea.NearestPoint(p));

  for i := 0 to High(pAreaClusters) do
  begin
    tpa := pAreaClusters[i].Intersection(obj);
    tempLength := Length(tpa);
    if tempLength > bestLength then
    begin
      bestLength := tempLength;
      bestObj := tpa;
    end;
  end;
  Result := bestObj.NearestPoint(p);

  {$IFDEF DEBUG_WALKER}
  WriteLn('Found nearest walkable point as: ',result);
  {$ENDIF}
end;

function TWebGraph.NodesToPoints(nodes: TIntegerArray): TPointArray;
var
  node: Integer;
begin
  for node in nodes do
    Result += Self.Nodes[node];
end;


function TWebGraph.PathBetween(p, q: TPoint; rnd: Double = 0): TPointArray;
var
  n1, n2: Integer;
  nodes: TIntegerArray;
begin
  if p.DistanceTo(q) <= 4 then Exit([p, q]);

  n1 := Self.FindNearestNode(p);
  n2 := Self.FindNearestNode(q);

  nodes := Self.FindPath(n1, n2, rnd);

  Result += p;
  Result += Self.NodesToPoints(nodes);
  Result += q;

  if Length(nodes) = 0 then
    raise GetDebugLn('WebGraph', 'Points ' + ToStr(p) + ' and ' + ToStr(q) + ' don''t connect!');
end;

function TWebGraph.PathBetweenEx(p, q: TPoint; rnd: Double = 0; attempts: Integer = 3; safe: Boolean = True): TPointArray;
var
  i, j: Integer;
  nS, nG, nodes: TIntegerArray;
begin
  if Self.UseCollisionData then
    if not Self.WalkableSpace.Contains(p) or not Self.WalkableSpace.Contains(q) then
    begin
      p := RSTranslator.NormalizeDoor(p);
      q := RSTranslator.NormalizeDoor(q);

      if not Self.WalkableSpace.Contains(p) then p := Self.NearestWalkablePoint(p);
      if not Self.WalkableSpace.Contains(q) then q := Self.NearestWalkablePoint(q);
    end;

  nS := Self.FindNearestNodes(p, attempts);
  nG := Self.FindNearestNodes(q, attempts);

  if nS[0] = nG[0] then Exit([p, q]);

  if (Length(nG) = 1) and (Length(Self.Paths[nG[0]]) = 0) then
    raise GetDebugLn('WebGraph', 'Points ' + ToStr(p) + ' and ' + ToStr(q) + ' don''t connect!');

  attempts -= 1;

  for i := 0 to High(nS) do
    for j := 0 to High(nG) do
    begin
      if nS[i] = nG[j] then Continue;
      nodes := Self.FindPath(nS[i],nG[j], rnd);
      if Length(nodes) > 0 then Break(2);
    end;

  if safe and (Length(nodes) = 0) then Exit;

  Result += p;
  Result += Self.NodesToPoints(nodes);
  Result += q;

  if Length(nodes) = 0 then
    raise GetDebugLn('WebGraph', 'Points ' + ToStr(p) + ' and ' + ToStr(q) + ' don''t connect!');
end;



function TWebGraph.FindObjectPath(me: TPoint; out p: TPoint): TPointArray;
var
  i: Integer;
  cluster, best: TPointArray;
begin
  if Self.UseCollisionData then
  begin
    for i := 0 to High(Self.WalkableClusters) do
      if Self.WalkableClusters[i].Contains(me) then
        cluster := Self.WalkableClusters[i];

    if cluster = [] then
      raise GetDebugLn('WebGraph', 'Can''t find player cluster containg: ' + ToStr(me));
  end;

  best := Self.FindNearestNodesEx(p, 12);
  for i := 0 to High(best) do
  begin
    p := best[i];

    if not Self.UseCollisionData or cluster.Contains(p) then
    begin
      try
        Result := Self.PathBetweenEx(me, p, 0.2, 2);
        if Result = [] then
        begin
          if me.DistanceTo(p) <= 52 then Exit([p]);
          RaiseException('Path empty');
        end;
      except
        if me.DistanceTo(p) <= 52 then Exit([p]);
        raise GetDebugLn('WebGraph', 'Can''t find a walkable path to ' + ToStr(p) + ' object.');
      end;
      Break;
    end;
  end;
end;



function TWebGraph.InvalidConnection(p,q: TPoint): Boolean;

  function LinesIntersect(p,q:array[0..1] of TPoint; out i:TPoint): Boolean;
  var
    dx,dy,d: TPoint;
    dt,s,t: Double;
    function Det(a,b: TPoint): Int64;
    begin
      Result := a.x*b.y - a.y*b.x;
    end;
  begin
    dx := [p[0].x - p[1].x, q[0].x - q[1].x];
    dy := [p[0].y - p[1].y, q[0].y - q[1].y];
    dt := det(dx, dy);
    if dt = 0 then Exit(False);
    d := [Det(p[0],p[1]), Det(q[0],q[1])];
    i.x := Round(Det(d, dx) / dt);
    i.y := Round(Det(d, dy) / dt);
    s := (dx.x * (q[0].y-p[0].y) + dy.x * (p[0].x-q[0].x)) / dt;
    t := (dx.y * (p[0].y-q[0].y) + dy.y * (q[0].x-p[0].x)) / (-dt);
    Result := (s > 0) and (s < 1) and (t > 0) and (t < 1);
  end;

var
  i,n: Integer;
  l1,l2: array[0..1] of TPoint;
  _: TPoint;
begin
  l1 := [p,q];
  for i:=0 to High(self.Paths) do
  begin
    l2[0] := self.Nodes[i];
    for n in self.Paths[i] do
    begin
      l2[1] := self.Nodes[n];
      if (l1[0] = l2[0]) and (l1[1] = l2[1]) then
        Continue;
      if LinesIntersect(l1,l2,_) then
        Exit(True);
    end;
  end;
end;


function TWebGraph.AddNode(p: TPoint; FromNode: Integer): Boolean;
var
  c: Integer;
begin
  if (FromNode <> -1) and (Self.InvalidConnection(p, Self.Nodes[FromNode])) then
    Exit(False);

  c := Length(Self.Nodes);
  SetLength(Self.Nodes, c+1);
  SetLength(Self.Paths, c+1);
  SetLength(Self.Names, c+1);
  Self.Nodes[c] := p;

  if FromNode <> -1 then
  begin
    Self.Paths[FromNode] += c;
    Self.Paths[c] += FromNode;
  end;

  Result := True;
end;


function TWebGraph.ConnectNodes(a,b: Integer): Boolean;
begin
  if b in Self.Paths[a] then
  begin
    Self.Paths[a].Remove(b);
    Self.Paths[b].Remove(a);
  end else
  begin
    Self.Paths[a] += b;
    Self.Paths[b] += a;
  end;

  Result := True;
end;

function TWebGraph.ConnectNodes(a,b: TPoint): Boolean; overload;
var
  i, j: Integer;
begin
  i := Self.Nodes.IndexOf(a);
  if i = -1 then Exit;

  j := Self.Nodes.IndexOf(b);
  if j = -1 then Exit;

  Result := Self.ConnectNodes(i,j);
end;

function TWebGraph.ConnectNodes(a: Integer; b: TPoint): Boolean; overload;
var
  i: Integer;
begin
  i := Self.Nodes.IndexOf(b);
  if i = -1 then Exit;

  Result := Self.ConnectNodes(a, i);
end;

function TWebGraph.ConnectNodesEx(a,b: TPoint): Boolean; overload;
var
  i, j: Integer;
begin
  i := Self.FindNearestNode(a);
  j := Self.FindNearestNode(b);
  Result := Self.ConnectNodes(i,j);
end;


function TWebGraph.DeleteNode(node: Integer): Integer;
var
  i,j,n,curr: Integer;
  marked: TIntegerArray;
begin
  marked += node;
  repeat
    curr := marked.Pop;

    for n in Self.Paths[curr] do
    begin
      Self.Paths[n].Remove(curr);
      if Self.Paths[n] = [] then
        marked += n;
    end;

    // offset remainding nodes
    for i:=0 to High(Self.Paths) do
      for j:=0 to High(Self.Paths[i]) do
        if Self.Paths[i][j] > curr then
          Dec(Self.Paths[i][j]);

    for i:=0 to High(marked) do
      if marked[i] > curr then Dec(marked[i]);

    // remove the node itself
    Delete(Self.Paths, curr, 1);
    Delete(Self.Nodes, curr, 1);
    Result += 1;
  until Length(marked) = 0;
end;

procedure TWebGraph.DeleteNodes(b: TBox);
var
  i: Integer;
begin
  for i := High(Self.Nodes) downto 0 do
    if b.Contains(Self.Nodes[i]) then
    begin
      Self.DeleteNode(i);
      i := High(Self.Nodes) + 1;
    end;
end;


procedure TWebGraph.Merge(graph: TWebGraph);
var
  i, j, len: Integer;
begin
  len := Length(Self.Nodes);

  for i := 0 to High(graph.Nodes) do
  begin
    Self.Nodes += graph.Nodes[i];
    Self.Paths += graph.Paths[i];
    for j := 0 to High(Self.Paths[len+i]) do
      Self.Paths[len+i,j] += len;

    Self.Names += graph.Names[i];
  end;

  Self.Doors            += graph.Doors;
  Self.WalkableSpace    += graph.WalkableSpace;
  Self.WalkableClusters += graph.WalkableClusters;
  Self.ObjectClusters   += graph.ObjectClusters;
end;


procedure TWebGraph.Draw(img: TImage);
var
  i,j: Integer;
begin
  if Self.Nodes = [] then Exit;

  img.DrawColor := $00EAEA;
  for i := 0 to High(Self.Paths) do
    for j := 0 to High(Self.Paths[i]) do
      img.DrawLine(Self.Nodes[i], Self.Nodes[Self.Paths[i, j]]);

  for i := 0 to High(Self.Nodes) do
  begin
    if Self.Names[i] = '' then img.DrawColor := $0101CC else img.DrawColor := $FF7F00;
    img.DrawBox(TBox.Create(Self.Nodes[i], 1, 1));
  end;

  Self.Doors.Draw(img);
end;

procedure TWebGraph.Draw(canvas: TImageBoxCanvas); overload;
var
  i,j: Integer;
begin
  if Self.Nodes = [] then Exit;

  for i := 0 to High(Self.Paths) do
    for j := 0 to High(Self.Paths[i]) do
      canvas.DrawLine(Self.Nodes[i], Self.Nodes[Self.Paths[i, j]], $00EAEA);

  for i := 0 to High(Self.Nodes) do
  begin
    if Self.Names[i] = '' then
      canvas.DrawBox(TBox.Create(Self.Nodes[i], 1, 1), $0101CC)
    else
      canvas.DrawBox(TBox.Create(Self.Nodes[i], 1, 1), $FF7F00);
  end;

  Self.Doors.Draw(canvas);
end;

