(*
# Progress Report
Formatted progress reports with bordered table output.

Credits: TaZe
*)
{$DEFINE WL_PROGRESS_REPORT_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

(*
## TProgressReport
Progress report record for managing formatted table output with timing and print frequency control.
*)
type
  TProgressReport = record
    Headers: TStringArray;
    ValueProvider: function: TStringArray of Object;
    Title: String;
    PrintTimer: TCountDown;
  end;

(*
## TProgressReport.Setup
```pascal
procedure TProgressReport.Setup(title: String = 'Progress Report'; headers: TStringArray = []);
```
Sets up the progress report with title and column headers.
*)
procedure TProgressReport.Setup(title: String = 'ProgressReport'; headers: TStringArray = []; printInterval: Integer = ONE_MINUTE * 5);
begin
  Self.Headers := headers;
  Self.Title := title;
  Self.PrintTimer.Start(printInterval);
end;

(*
## TProgressReport.Generate
```pascal
function TProgressReport.Generate(values: TStringArray): String;
```
Generates a formatted report with the provided values in a bordered table format.
*)
function TProgressReport.Generate(values: TStringArray): String;
const
  COLUMN_WIDTH = 15;
  SEPARATOR_WIDTH = 5;
var
  i, totalWidth: Integer;
  str, lines, btm, header: String;
begin
  if Length(Self.Headers) <> Length(values) then
    raise 'TProgressReport.GenerateReport: Header count (' +
          IntToStr(Length(Self.Headers)) + ') must match value count (' +
          IntToStr(Length(values)) + ')';

  totalWidth := COLUMN_WIDTH * 2 + SEPARATOR_WIDTH;

  for i := 0 to High(Self.Headers) do
  begin
    str := '| ' + Self.Headers[i].PadRight(COLUMN_WIDTH) + ' ' +
           values[i].PadRight(COLUMN_WIDTH) + ' |';
    lines += str + LINE_SEP;
  end;

  btm := '+' + '-' * (totalWidth-2) + '+';
  header := '+ ' + Self.Title + ' ' + '-' * (totalWidth - Length(Self.Title) - 4) + '+';

  Result := header + LINE_SEP + lines + btm;
end;

(*
## TProgressReport.Print
```pascal
procedure TProgressReport.Print();
```
Displays the current report using the ValueProvider function to retrieve current values.
*)
procedure TProgressReport.Print();
begin
  if not Self.PrintTimer.IsFinished then Exit;

  WriteLn Self.Generate(Self.ValueProvider());
  Self.PrintTimer.Restart();
end;
