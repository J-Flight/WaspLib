(*
# Progress Report
Formatted progress reports with bordered table output.

Credits: TaZe
*)
{$DEFINE WL_PROGRESS_REPORT_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

(*
## TProgressReport
Progress report record for managing formatted table output with timing and print frequency control.
*)
type
  TProgressReport = record
    Headers: TStringArray;
    ValueProvider: function: TStringArray of Object;
    Title: String;
    PrintTimer: TCountDown;
  end;

(*
## TProgressReport.Setup
```pascal
procedure TProgressReport.Setup(title: String = 'ProgressReport'; headers: TStringArray = []; valueProvider: function: TStringArray of Object = nil; printInterval: Integer = ONE_MINUTE * 5);
```
Sets up the progress report with title and column headers.

Check the example in {ref}`TProgressReport.Print` for more information.
*)
procedure TProgressReport.Setup(title: String = 'ProgressReport'; headers: TStringArray = []; valueProvider: function: TStringArray of Object = nil; printInterval: Integer = ONE_MINUTE * 5);
begin
  Self.Headers := headers;
  Self.Title := title;
  Self.PrintTimer.Start(printInterval);
  Self.ValueProvider := @valueProvider;
end;

(*
## TProgressReport.Generate
```pascal
function TProgressReport.Generate(values: TStringArray): String;
```
Generates a formatted report with the provided values in a bordered table format.
*)
function TProgressReport.Generate(values: TStringArray): String;
var
  i, totalW, headersW, valuesW: Integer;
  lines, btm, header: String;
begin
  if Length(Self.Headers) <> Length(values) then
    raise 'TProgressReport.GenerateReport: Header count (' +
          IntToStr(Length(Self.Headers)) + ') must match value count (' +
          IntToStr(Length(values)) + ')';

  for i := 0 to High(Self.Headers) do
  begin
    headersW := Max(headersW, Length(Self.Headers[i]) + 2);
    valuesW := Max(valuesW, Length(values[i]));
  end;

  totalW := headersW + valuesW;

  for i := 0 to High(Self.Headers) do
    lines += '| ' + Self.Headers[i].PadRight(headersW) +
             ' ' + values[i].PadRight(valuesW) + ' |' + LINE_SEP;

  header := '+ ' + Self.Title + ' ' + '-' * (totalW - Length(Self.Title) + 1) + '+';
  btm := '+' + '-' * (totalW + 3) + '+';

  Result := header + LINE_SEP + lines + btm;
end;

(*
## TProgressReport.Print
```pascal
procedure TProgressReport.Print();
```
Displays the current report using the `TProgressReport.ValueProvider` function
to retrieve current values.

Keep in mind that calling this won't do anything until
`TProgressReport.PrintTimer.IsFinished` is true.

Here is a short example of how to setup and print reports:
```pascal
{$I WaspLib/osrs.simba}

function GetReportValues(): TStringArray;
begin
  Result := [
    GetTimeStamp(TIME_SHORT),
    Logger.TimeRunning.ElapsedFmt(TIME_SHORT),
    Antiban.TimeRunning.ElapsedFmt(TIME_SHORT),
    ToStr(50)
  ];
end;

begin
  Logger.Setup('Script Name');
  ProgressReport.Setup(
    'Script Name',
    ['Full script runtime:', 'Botting runtime:', 'Time spent in antiban:', 'Boss kills:'],
    @GetReportValues,
    ONE_SECOND
  );

  while True do
    ProgressReport.Print();
end.
```
And the output should look something like this:
```
Succesfully compiled in 906.08 milliseconds.
+ Script Name ----------------------+
| Full script runtime:     00:00:06 |
| Botting runtime:         00:00:01 |
| Time spent in antiban:   00:00:00 |
| Boss kills:              50       |
+-----------------------------------+
Succesfully executed in 7976.01 milliseconds.
```
*)
procedure TProgressReport.Print();
begin
  if not Self.PrintTimer.IsFinished then
    Exit;

  WriteLn Self.Generate(Self.ValueProvider());
  Self.PrintTimer.Restart();
end;

{$H-}
var
  ProgressReport: TProgressReport;
{$H+}
