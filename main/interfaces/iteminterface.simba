(*
# ItemInterface
Methods to interact item interfaces.
*)

{$DEFINE SRLT_ITEM_INTERFACE_INCLUDED}
{$IFNDEF SRLT_OSRS}
  {$I SRLT/osrs.simba}
{$ENDIF}

type
  TRSItemInterface = record
    Slots: TRSSlotInterface;
  end;


function TRSItemInterface.IndexOf(items: TRSItemArray): Integer;
var
  match: TImageCompareMatchBox;
begin
  if ItemFinder.Find(items, Self.Slots.GetSlots(), Match) then
    Exit(Match.Index);
  eResult := -1;
end;

function TRSItemInterface.IndicesOf(items: TRSItemArray): TIntegerArray;
var
  matches: TRSItemFinderMatchArray;
  I: Integer;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  matches := ItemFinder.FindAll(items, Self.SlotBoxesFunction());

  SetLength(Result, Length(matches));
  for I := 0 to High(matches) do
    Result[I] := matches[I].Index;
end;



function TRSItemInterface.Find(items: TRSItemArray; out slot: TBox): Boolean;
var
  slots: TBoxArray;
  match: TImageCompareMatchBox;
begin
  slots := Self.Slots.GetSlots();
  Result := ItemCompare.Find(items, slots, match);
  if Result then
    slot := match.Box;
end;


function TRSItemInterface.FindAll(items: TRSItemArray): TBoxArray;
var
  matches: TImageCompareMatchBoxArray;
  i: Integer;
begin
  matches := ItemCompare.FindAll(items, Self.Slots.GetSlots());
  for i := 0 to High(matches) do
    Result += matches[i].Box;
end;

function TRSItemInterface.FindAll(items: TRSItemArray; out boxes: TBoxArray): Boolean; overload;
var
  matches: TImageCompareMatchBoxArray;
  i: Integer;
begin
  if not ItemCompare.FindAll(items, Self.Slots.GetSlots(), matches) then Exit;

  Result := True;
  for i := 0 to High(matches) do
    boxes += matches[i].Box;
end;


function TRSItemInterface.FindAny(items: TRSItemArray): TImageCompareMatchBox;
begin
  ItemCompare.Find(items, Self.Slots.GetSlots(), Result);
end;

function TRSItemInterface.FindAny(items: TRSItemArray; out box: TBox): Boolean; overload;
var
  match: TImageCompareMatchBox;
begin
  Result := ItemCompare.Find(items, Self.Slots.GetSlots(), match);
  if Result then box := match.Box;
end;


function TRSItemInterface.Contains(item: TRSItem): Boolean;
begin
  Result := Self.IndexOf([Item]) > -1;
end;

function TRSItemInterface.ContainsAny(items: TRSItemArray): Boolean;
begin
  Result := Self.IndexOf(items) > -1;
end;

function TRSItemInterface.ContainsAll(items: TRSItemArray): Boolean;
var
  matches: TImageCompareMatchBoxArray;
begin
  Result := ItemCompare.FindAll(items, Self.Slots.GetSlots(), matches);
end;

