{$I WaspLib/osrs.simba}

const
  ENDPOINT = 'https://oldschool.runescape.wiki/api.php?';
  SILENT: Boolean = True;

function GetEndPoint(name: String): String;
begin
  Result := ENDPOINT + 'action=parse&page=' +
            name.Replace(' ', '_').Replace('+', '%2B') +
            '&prop=wikitext&redirects=1&format=json';
end;

type TSlotArray = array [0..12] of TStringArray;

var
  Slots: TSlotArray;



function TStringArray.GetStr(): String;
var
  i: Integer;
begin
  if Self = [] then Exit('[]');
  Result := '[';
  for i := 0 to High(Self)-1 do
    Result += '"' + Self[i] + '", ';
  Result += '"' + Self[High(Self)] + '"]';
end;

function TSlotArray.GetStr(): String;
var
  i: Integer;
begin
  for i := 0 to 10 do
    Result += '  "' + ToStr(ERSEquipment(i)).After('ERSEquipment.').ToLower() + '": ' + Self[i].Unique().Sorted().GetStr() + ',' + LINE_SEP;

  Result += '  "spec_weapons": ' + Self[11].Unique().Sorted().GetStr() + ',' + LINE_SEP;
  Result += '  "2h": ' + Self[12].Unique().Sorted().GetStr();
end;

procedure FillSlot(item, txt: String);
begin
  if not txt.Contains('equipable = Yes') then
    Exit;

  if txt.Contains('slot = weapon') then
  begin
    Slots[ERSEquipment.WEAPON] += item;
    if txt.Contains('Category:Weapons with Special attacks') then
      Slots[11] += item;
    Exit;
  end;

  if txt.Contains('slot = 2h') then
  begin
    Slots[12] += item;
    if txt.Contains('Category:Weapons with Special attacks') then
      Slots[11] += item;
    Exit;
  end;

  if txt.Contains('slot = head') then
  begin
    Slots[ERSEquipment.HEAD] += item;
    Exit;
  end;

  if txt.Contains('slot = cape') then
  begin
    Slots[ERSEquipment.CAPE] += item;
    Exit;
  end;

  if txt.Contains('slot = neck') then
  begin
    Slots[ERSEquipment.NECK] += item;
    Exit;
  end;

  if txt.Contains('slot = ammo') then
  begin
    Slots[ERSEquipment.AMMO] += item;
    Exit;
  end;

  if txt.Contains('slot = body') then
  begin
    Slots[ERSEquipment.BODY] += item;
    Exit;
  end;

  if txt.Contains('slot = shield') then
  begin
    Slots[ERSEquipment.SHIELD] += item;
    Exit;
  end;

  if txt.Contains('slot = legs') then
  begin
    Slots[ERSEquipment.LEGS] += item;
    Exit;
  end;

  if txt.Contains('slot = hands') then
  begin
    Slots[ERSEquipment.HANDS] += item;
    Exit;
  end;

  if txt.Contains('slot = feet') then
  begin
    Slots[ERSEquipment.FEET] += item;
    Exit;
  end;

  if txt.Contains('slot = ring') then
    Slots[ERSEquipment.RING] += item;
end;

var
  items: TStringArray;
  i: Integer;
  url: String;
  json, tmp: TJSONItem;
  text: String;
begin
  items := FileReadLines(ItemFinder.Database.DataDir + 'item').Unique();

  for i := High(items) downto 0 do
    if items[i].StartsWith('noted ') then
      Delete(items, i, 1);

  for i := 0 to High(items) do
  begin
    if i mod 100 = 0 then
      WriteLn('Reading information from the wiki ', i, '/', High(items), ' items done.');

    url := GetEndPoint(items[i]);

    try
      json := HTTPClient.GetJson(url);
    except
      WriteLn('Failed to fetch: ', items[i]);
    end;

    if json = nil then
    begin
      WriteLn('Failed to fetch, json is nil: ', items[i]);
      Continue;
    end;

    try
      tmp := json.Item['parse'];
    except
      WriteLn('Failed to find parse: ', items[i]);
      json.Free();
      Continue;
    end;

    try
      text := tmp.Item['wikitext'].ToJSON();
    except
      if not SILENT then
        WriteLn('Failed to find wikitext: ', items[i]);
      json.Free();
      Continue;
    end;

    FillSlot(items[i], text);
    json.Free();
  end;

  text := '{' + LINE_SEP + Slots.GetStr() + LINE_SEP + '}';
  WriteLn text;
  FileWrite(GearData.PATH, text);
end;
