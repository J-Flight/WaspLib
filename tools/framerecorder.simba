(*
# Frame Recorder
Simple utility for recording frame sequences at a specified FPS.
Useful for creating frame sequences for {ref}`videoplayer` or debugging.

Example usage:
```pascal
{$I WaspLib/osrs.simba}
{$I WaspLib/tools/framerecorder.simba}
var
  frames: TFrameRecorder;
begin
  frames.Start(25); // 25 FPS
  frames.Run();     // Starts capture loop (press ESC to stop)
end;
```
*)

{$DEFINE WL_FRAMERECORDER_INCLUDED}
{$INCLUDE_ONCE WaspLib/utils.simba}

type
(*
## type TFrameRecorder
```pascal
TFrameRecorder = record
  FPS: Integer;
  Directory: String;
  FrameCount: Integer;
end;
```
Simple record for recording frame sequences.
*)
  TFrameRecorder = record
    FPS: Integer;
    Directory: String;
    FrameCount: Integer;
  end;

(*
## TFrameRecorder.Start
```pascal
procedure TFrameRecorder.Start(fps: Integer = 25; dir: String = '');
```
Initializes the frame recorder.

Parameters:
- `fps`: Frames per second to capture (default: 25)
- `dir`: Directory to save frames (default: auto-generated with timestamp)
*)
procedure TFrameRecorder.Start(fps: Integer = 25; dir: String = '');
var
  selectedDir: String;
  imagesDir: String;
begin
  if not Target.IsValid then
    raise 'No target to screenshot';
    
  Self.FPS := fps;
  Self.FrameCount := 0;
  
  if dir = '' then
  begin
    imagesDir := SimbaEnv.SimbaPath + 'Images';
    if not DirExists(imagesDir) then
      DirCreate(imagesDir);
      
    if ShowDirectoryDialog('Select directory for screenshots', imagesDir, selectedDir) then
      Self.Directory := selectedDir + PATH_SEP + 'sequence_' + TDateTime.CreateFromSystem().ToString('YYYY-MM-DD_HH-mm-ss') + PATH_SEP
    else
      TerminateScript('No directory selected - capture cancelled');
  end
  else
    Self.Directory := dir;
    
  if not DirExists(Self.Directory) then
    DirCreate(Self.Directory);
    
  WriteLn('Frame recorder initialized:');
  WriteLn('  FPS: ', Self.FPS);
  WriteLn('  Directory: ', Self.Directory);
  WriteLn('Press ESC to stop recording');
end;

(*
## TFrameRecorder.Run
```pascal
procedure TFrameRecorder.Run();
```
Starts the recording loop. Press ESC to stop.
Saves frames as padded sequential numbers (00001.png, 00002.png, etc.)
*)
procedure TFrameRecorder.Run();
var
  frameTime: Integer;
begin
  frameTime := 1000 div Self.FPS;
  
  repeat
    Inc(Self.FrameCount);
    SaveScreenshot(Self.Directory + ToStr(Self.FrameCount).PadLeft(5, '0'));
    WriteLn('Frame ', Self.FrameCount, ' saved');
    
    Sleep(frameTime);
  until Target.KeyPressed(EKeyCode.ESCAPE);
  
  WriteLn('Capture stopped. Total frames: ', Self.FrameCount);
end;
